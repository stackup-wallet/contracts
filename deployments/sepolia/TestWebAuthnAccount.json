{
  "address": "0xfcbf563e1B6DA0b8fF90dB133c93E0792E74c551",
  "abi": [
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "q",
          "type": "uint256[2]"
        },
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "initCode",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "preVerificationGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        },
        {
          "internalType": "bytes32",
          "name": "userOpHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "missingAccountFunds",
          "type": "uint256"
        }
      ],
      "name": "validateUserOp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "validationData",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x42d99c65713f4a0c434d2818288787d34497a0e097084b181f5d44a789bff950",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf6731De143cd04d7e9aEBe3B1b00aDBBd4710249",
    "contractAddress": null,
    "transactionIndex": 75,
    "gasUsed": "1079492",
    "logsBloom": "0x
    "blockHash": "0xedce0eb6208410ec61dd5b57abad44d9bd188397839e34d9d348e7f6d80f7927",
    "transactionHash": "0x42d99c65713f4a0c434d2818288787d34497a0e097084b181f5d44a789bff950",
    "logs": [],
    "blockNumber": 5174353,
    "cumulativeGasUsed": "9941063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "f7ab4371c3919d60c1f8647c237d1717",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"q\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"missingAccountFunds\",\"type\":\"uint256\"}],\"name\":\"validateUserOp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A contract to test UserOp verification with WebAuthn. This contract is not safe for production since any public key (Q) can be used. We are only interested in using this to test Bundler tracing.\",\"kind\":\"dev\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"details\":\"Must validate caller is the entryPoint.      Must validate the signature and nonce\",\"params\":{\"missingAccountFunds\":\"missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\",\"userOp\":\"the operation that is about to be executed.\",\"userOpHash\":\"hash of the user's request data. can be used as the basis for signature.\"},\"returns\":{\"validationData\":\"packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"title\":\"TestWebAuthnAccount\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \\\"simulation call\\\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestWebAuthnAccount.sol\":\"TestWebAuthnAccount\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\ninterface IAccount {\\n\\n    /**\\n     * Validate user's signature and nonce\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\n     *\\n     * @dev Must validate caller is the entryPoint.\\n     *      Must validate the signature and nonce\\n     * @param userOp the operation that is about to be executed.\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\n    external returns (uint256 validationData);\\n}\\n\",\"keccak256\":\"0x556a0e5980de18e90b115553ed502408155ba35f58642823010d9288047bc418\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"},\"contracts/test/TestWebAuthnAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\n/* solhint-disable no-empty-blocks */\\n\\nimport { IAccount } from \\\"account-abstraction/contracts/interfaces/IAccount.sol\\\";\\nimport { UserOperation } from \\\"account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport { Base64 } from \\\"../utils/Base64.sol\\\";\\nimport { LibSecp256r1 } from \\\"../utils/Secp256r1.sol\\\";\\n\\n/**\\n * @title TestWebAuthnAccount\\n * @dev A contract to test UserOp verification with WebAuthn.\\n * This contract is not safe for production since any public key (Q) can be used.\\n * We are only interested in using this to test Bundler tracing.\\n */\\ncontract TestWebAuthnAccount is IAccount {\\n    function validateSignature(uint256[2] memory q, bytes32 _hash, bytes memory _signature) public view returns (bool) {\\n        (\\n            uint256 rValue,\\n            uint256 sValue,\\n            bytes memory authenticatorData,\\n            string memory clientDataJSONPre,\\n            string memory clientDataJSONPost\\n        ) = abi.decode(_signature, (uint256, uint256, bytes, string, string));\\n        bytes32 clientHash;\\n        {\\n            string memory opHashBase64 = Base64.encode(bytes.concat(_hash));\\n            string memory clientDataJSON = string.concat(clientDataJSONPre, opHashBase64, clientDataJSONPost);\\n            clientHash = sha256(bytes(clientDataJSON));\\n        }\\n        bytes32 sigHash = sha256(bytes.concat(authenticatorData, clientHash));\\n        return LibSecp256r1.Verify(q, rValue, sValue, uint256(sigHash));\\n    }\\n\\n    function validateUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 userOpHash,\\n        uint256 missingAccountFunds\\n    ) external returns (uint256 validationData) {\\n        validationData = 0;\\n        (uint[2] memory q, bytes memory signature) = abi.decode(userOp.signature, (uint[2], bytes));\\n        if (!validateSignature(q, userOpHash, signature)) {\\n            validationData = 1;\\n        }\\n\\n        if (missingAccountFunds > 0) {\\n            (bool success, bytes memory data) = msg.sender.call{ value: missingAccountFunds }(\\\"\\\");\\n            (success, data);\\n        }\\n        return validationData;\\n    }\\n\\n    fallback() external payable {}\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x593e517d4caddb9d03de67841d4c741cc493d722043878982ab256972afafc4f\",\"license\":\"GPL-3.0\"},\"contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *  modified for base64url https://datatracker.ietf.org/doc/html/rfc4648#section-5\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        uint256 newlength = (data.length * 8) / 6;\\n        if (data.length % 6 > 0) {\\n            newlength++;\\n        }\\n        string memory result = new string(newlength);\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x214af629ad514badb15b6ba37faca2c01299259e73b26eba6f17ca70d1a59abf\",\"license\":\"Apache-2.0\"},\"contracts/utils/Secp256r1.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\n// Heavily inspired from\\n// https://github.com/maxrobot/elliptic-solidity/blob/master/contracts/Secp256r1.sol\\n// https://github.com/tdrerup/elliptic-curve-solidity/blob/master/contracts/curves/EllipticCurve.sol\\n// modified to use precompile 0x05 modexp\\n// and modified jacobian double\\n// optimisations to avoid to an from from affine and jacobian coordinates\\n\\n// Additional Elliptic curve Public key / Signature validation added by\\n// David Yonjun Kim (@Powerstream3604)\\n\\nstruct JPoint {\\n    uint256 x;\\n    uint256 y;\\n    uint256 z;\\n}\\n\\nlibrary LibSecp256r1 {\\n    uint256 constant gx = 0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy = 0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 public constant pp = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n    uint256 public constant nn = 0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n    uint256 constant a = 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b = 0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant MOST_SIGNIFICANT = 0xc000000000000000000000000000000000000000000000000000000000000000;\\n\\n    /*\\n     * Verify\\n     * @description - verifies that a public key has signed a given message\\n     * @param Q - public key coordinates X & Y\\n     * @param R - signature half R\\n     * @param S - signature half S\\n     * @param input - hashed message\\n     */\\n    function Verify(uint256[2] memory q, uint r, uint s, uint e) internal view returns (bool) {\\n        if (q[0] > pp - 1 || q[1] > pp - 1) {\\n            return false;\\n        }\\n        if (r == 0 || s == 0 || r >= nn || s >= nn) {\\n            return false;\\n        }\\n        if (\\n            mulmod(q[1], q[1], pp) !=\\n            addmod(addmod(mulmod(q[0], mulmod(q[0], q[0], pp), pp), mulmod(a, q[0], pp), pp), b, pp)\\n        ) {\\n            return false;\\n        }\\n\\n        JPoint[16] memory points = _preComputeJacobianPoints(q);\\n        return VerifyWithPrecompute(points, r, s, e);\\n    }\\n\\n    function VerifyWithPrecompute(JPoint[16] memory points, uint r, uint s, uint e) internal view returns (bool) {\\n        if (r == 0 || s == 0 || r >= nn || s >= nn) {\\n            return false;\\n        }\\n\\n        uint w = _primemod(s, nn);\\n\\n        uint u1 = mulmod(e, w, nn);\\n        uint u2 = mulmod(r, w, nn);\\n\\n        uint x;\\n        uint y;\\n\\n        (x, y) = ShamirMultJacobian(points, u1, u2);\\n        return (x == r);\\n    }\\n\\n    /*\\n     * Strauss Shamir trick for EC multiplication\\n     * https://stackoverflow.com/questions/50993471/ec-scalar-multiplication-with-strauss-shamir-method\\n     * we optimise on this a bit to do with 2 bits at a time rather than a single bit\\n     * the individual points for a single pass are precomputed\\n     * overall this reduces the number of additions while keeping the same number of doublings\\n     */\\n    function ShamirMultJacobian(JPoint[16] memory points, uint u1, uint u2) internal view returns (uint, uint) {\\n        uint x = 0;\\n        uint y = 0;\\n        uint z = 0;\\n        uint bits = 128;\\n        uint index = 0;\\n\\n        while (bits > 0) {\\n            if (z > 0) {\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n                (x, y, z) = _modifiedJacobianDouble(x, y, z);\\n            }\\n            index = ((u1 & MOST_SIGNIFICANT) >> 252) | ((u2 & MOST_SIGNIFICANT) >> 254);\\n            if (index > 0) {\\n                (x, y, z) = _jAdd(x, y, z, points[index].x, points[index].y, points[index].z);\\n            }\\n            u1 <<= 2;\\n            u2 <<= 2;\\n            bits--;\\n        }\\n        (x, y) = _affineFromJacobian(x, y, z);\\n        return (x, y);\\n    }\\n\\n    function _preComputeJacobianPoints(uint256[2] memory q) internal pure returns (JPoint[16] memory points) {\\n        points[0] = JPoint(0, 0, 0);\\n        points[1] = JPoint(q[0], q[1], 1); // u2\\n        points[2] = _jPointDouble(points[1]);\\n        points[3] = _jPointAdd(points[1], points[2]);\\n\\n        points[4] = JPoint(gx, gy, 1); // u1Points[1]\\n        points[5] = _jPointAdd(points[4], points[1]);\\n        points[6] = _jPointAdd(points[4], points[2]);\\n        points[7] = _jPointAdd(points[4], points[3]);\\n\\n        points[8] = _jPointDouble(points[4]); // u1Points[2]\\n        points[9] = _jPointAdd(points[8], points[1]);\\n        points[10] = _jPointAdd(points[8], points[2]);\\n        points[11] = _jPointAdd(points[8], points[3]);\\n\\n        points[12] = _jPointAdd(points[4], points[8]); // u1Points[3]\\n        points[13] = _jPointAdd(points[12], points[1]);\\n        points[14] = _jPointAdd(points[12], points[2]);\\n        points[15] = _jPointAdd(points[12], points[3]);\\n    }\\n\\n    function _jPointAdd(JPoint memory p1, JPoint memory p2) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _jAdd(p1.x, p1.y, p1.z, p2.x, p2.y, p2.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    function _jPointDouble(JPoint memory p) internal pure returns (JPoint memory) {\\n        uint x;\\n        uint y;\\n        uint z;\\n        (x, y, z) = _modifiedJacobianDouble(p.x, p.y, p.z);\\n        return JPoint(x, y, z);\\n    }\\n\\n    /* _affineFromJacobian\\n     * @desription returns affine coordinates from a jacobian input follows\\n     * golang elliptic/crypto library\\n     */\\n    function _affineFromJacobian(uint x, uint y, uint z) internal view returns (uint ax, uint ay) {\\n        if (z == 0) {\\n            return (0, 0);\\n        }\\n\\n        uint zinv = _primemod(z, pp);\\n        uint zinvsq = mulmod(zinv, zinv, pp);\\n\\n        ax = mulmod(x, zinvsq, pp);\\n        ay = mulmod(y, mulmod(zinvsq, zinv, pp), pp);\\n    }\\n\\n    /*\\n     * _jAdd\\n     * @description performs Jacobian addition as defined below:\\n     * http://www.hyperelliptic.org/EFD/g1p/data/shortw/jacobian/addition/add-2007-bl\\n     */\\n    function _jAdd(\\n        uint p1,\\n        uint p2,\\n        uint p3,\\n        uint q1,\\n        uint q2,\\n        uint q3\\n    ) internal pure returns (uint r1, uint r2, uint r3) {\\n        if (p3 == 0) {\\n            r1 = q1;\\n            r2 = q2;\\n            r3 = q3;\\n\\n            return (r1, r2, r3);\\n        } else if (q3 == 0) {\\n            r1 = p1;\\n            r2 = p2;\\n            r3 = p3;\\n\\n            return (r1, r2, r3);\\n        }\\n\\n        assembly {\\n            let pd := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z1z1 := mulmod(p3, p3, pd) // Z1Z1 = Z1^2\\n            let z2z2 := mulmod(q3, q3, pd) // Z2Z2 = Z2^2\\n\\n            let u1 := mulmod(p1, z2z2, pd) // U1 = X1*Z2Z2\\n            let u2 := mulmod(q1, z1z1, pd) // U2 = X2*Z1Z1\\n\\n            let s1 := mulmod(p2, mulmod(z2z2, q3, pd), pd) // S1 = Y1*Z2*Z2Z2\\n            let s2 := mulmod(q2, mulmod(z1z1, p3, pd), pd) // S2 = Y2*Z1*Z1Z1\\n\\n            let p3q3 := addmod(p3, q3, pd)\\n\\n            if lt(u2, u1) {\\n                u2 := add(pd, u2) // u2 = u2+pd\\n            }\\n            let h := sub(u2, u1) // H = U2-U1\\n\\n            let i := mulmod(0x02, h, pd)\\n            i := mulmod(i, i, pd) // I = (2*H)^2\\n\\n            let j := mulmod(h, i, pd) // J = H*I\\n            if lt(s2, s1) {\\n                s2 := add(pd, s2) // u2 = u2+pd\\n            }\\n            let rr := mulmod(0x02, sub(s2, s1), pd) // r = 2*(S2-S1)\\n            r1 := mulmod(rr, rr, pd) // X3 = R^2\\n\\n            let v := mulmod(u1, i, pd) // V = U1*I\\n            let j2v := addmod(j, mulmod(0x02, v, pd), pd)\\n            if lt(r1, j2v) {\\n                r1 := add(pd, r1) // X3 = X3+pd\\n            }\\n            r1 := sub(r1, j2v)\\n\\n            // Y3 = r*(V-X3)-2*S1*J\\n            let s12j := mulmod(mulmod(0x02, s1, pd), j, pd)\\n\\n            if lt(v, r1) {\\n                v := add(pd, v)\\n            }\\n            r2 := mulmod(rr, sub(v, r1), pd)\\n\\n            if lt(r2, s12j) {\\n                r2 := add(pd, r2)\\n            }\\n            r2 := sub(r2, s12j)\\n\\n            // Z3 = ((Z1+Z2)^2-Z1Z1-Z2Z2)*H\\n            z1z1 := addmod(z1z1, z2z2, pd)\\n            j2v := mulmod(p3q3, p3q3, pd)\\n            if lt(j2v, z1z1) {\\n                j2v := add(pd, j2v)\\n            }\\n            r3 := mulmod(sub(j2v, z1z1), h, pd)\\n        }\\n        return (r1, r2, r3);\\n    }\\n\\n    // Point doubling on the modified jacobian coordinates\\n    // http://point-at-infinity.org/ecc/Prime_Curve_Modified_Jacobian_Coordinates.html\\n    function _modifiedJacobianDouble(uint x, uint y, uint z) internal pure returns (uint x3, uint y3, uint z3) {\\n        if (y == 0) return (0, 0, 0);\\n        assembly {\\n            let pd := 0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\\n            let z2 := mulmod(z, z, pd)\\n            let az4 := mulmod(\\n                0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC,\\n                mulmod(z2, z2, pd),\\n                pd\\n            )\\n            let y2 := mulmod(y, y, pd)\\n            let s := mulmod(0x04, mulmod(x, y2, pd), pd)\\n            let u := mulmod(0x08, mulmod(y2, y2, pd), pd)\\n            let m := addmod(mulmod(0x03, mulmod(x, x, pd), pd), az4, pd)\\n            let twos := mulmod(0x02, s, pd)\\n            let m2 := mulmod(m, m, pd)\\n            if lt(m2, twos) {\\n                m2 := add(pd, m2)\\n            }\\n            x3 := sub(m2, twos)\\n            if lt(s, x3) {\\n                s := add(pd, s)\\n            }\\n            y3 := mulmod(m, sub(s, x3), pd)\\n            if lt(y3, u) {\\n                y3 := add(pd, y3)\\n            }\\n            y3 := sub(y3, u)\\n            z3 := mulmod(0x02, mulmod(y, z, pd), pd)\\n        }\\n    }\\n\\n    // Fermats little theorem https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\\n    // a^(p-1) = 1 mod p\\n    // a^(-1) \\u2245 a^(p-2) (mod p)\\n    // we then use the precompile bigModExp to compute a^(-1)\\n    function _primemod(uint value, uint p) internal view returns (uint ret) {\\n        ret = modexp(value, p - 2, p);\\n        return ret;\\n    }\\n\\n    // Wrapper for built-in BigNumber_modexp (contract 0x5) as described here. https://github.com/ethereum/EIPs/pull/198\\n    function modexp(uint _base, uint _exp, uint _mod) internal view returns (uint ret) {\\n        // bigModExp(_base, _exp, _mod);\\n        assembly {\\n            if gt(_base, _mod) {\\n                _base := mod(_base, _mod)\\n            }\\n            // Free memory pointer is always stored at 0x40\\n            let freemem := mload(0x40)\\n\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n\\n            mstore(add(freemem, 0x60), _base)\\n            mstore(add(freemem, 0x80), _exp)\\n            mstore(add(freemem, 0xa0), _mod)\\n\\n            let success := staticcall(14000, 0x5, freemem, 0xc0, freemem, 0x20)\\n            switch success\\n            case 0 {\\n                revert(0x0, 0x0)\\n            }\\n            default {\\n                ret := mload(freemem)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc129bb751115f394a53153f153dca1ceb544ac43c721d692cea9cf4ca6827e57\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A contract to test UserOp verification with WebAuthn. This contract is not safe for production since any public key (Q) can be used. We are only interested in using this to test Bundler tracing.",
    "kind": "dev",
    "methods": {
      "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "details": "Must validate caller is the entryPoint.      Must validate the signature and nonce",
        "params": {
          "missingAccountFunds": "missing funds on the account's deposit in the entrypoint.      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.      The excess is left as a deposit in the entrypoint, for future calls.      can be withdrawn anytime using \"entryPoint.withdrawTo()\"      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.",
          "userOp": "the operation that is about to be executed.",
          "userOpHash": "hash of the user's request data. can be used as the basis for signature."
        },
        "returns": {
          "validationData": "packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.      Note that the validation code cannot use block.timestamp (or block.number) directly."
        }
      }
    },
    "title": "TestWebAuthnAccount",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
        "notice": "Validate user's signature and nonce the entryPoint will make the call to the recipient only if this validation call returns successfully. signature failure should be reported by returning SIG_VALIDATION_FAILED (1). This allows making a \"simulation call\" without a valid signature Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}