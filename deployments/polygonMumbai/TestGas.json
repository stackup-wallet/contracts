{
  "address": "0x310de3671FCDA16eC24433e7610c2F48DEE7f8c2",
  "abi": [
    {
      "inputs": [],
      "name": "offset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "width",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        }
      ],
      "name": "recursiveCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "store",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2e7f62b2cf4699739a4126b3075b4bcd1c96fb5ee2cd6fdccb86f304cc7a4072",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x8cF905C50F25A481171e7f5936625754d44A9537",
    "contractAddress": null,
    "transactionIndex": 6,
    "gasUsed": "198637",
    "logsBloom": "0x
    "blockHash": "0xb6b0340831677a6c9cec287552c4cb4b68a53c3dfbacb7aa5eef87efd21349d9",
    "transactionHash": "0x2e7f62b2cf4699739a4126b3075b4bcd1c96fb5ee2cd6fdccb86f304cc7a4072",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 38246721,
        "transactionHash": "0x2e7f62b2cf4699739a4126b3075b4bcd1c96fb5ee2cd6fdccb86f304cc7a4072",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000008cf905c50f25a481171e7f5936625754d44a9537",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000010efd2bbc830000000000000000000000000000000000000000000000000006ec45a743dc1a74000000000000000000000000000000000000000000001256897521d137eb425500000000000000000000000000000000000000000000000006eb36aa181f9774000000000000000000000000000000000000000000001256897630ce63a7c555",
        "logIndex": 70,
        "blockHash": "0xb6b0340831677a6c9cec287552c4cb4b68a53c3dfbacb7aa5eef87efd21349d9"
      }
    ],
    "blockNumber": 38246721,
    "cumulativeGasUsed": "4250725",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "55af634e1faddbeaf86dd380678c2620",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"offset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"width\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"recursiveCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A contract with a collection of methods for testing certain edge cases related to gas. This is primarily used by the bundler to verify that its UserOperation gas estimates are working.\",\"kind\":\"dev\",\"methods\":{\"recursiveCall(uint256,uint256,uint256)\":{\"details\":\"This method allows you to run a recursive call where each nested call uses more gas than its parent.\",\"params\":{\"count\":\"Specifies a countdown that decrements by 1 at each call.\",\"depth\":\"Specifies the number of recursive calls to make.\",\"width\":\"Specifies the number of sibling calls at each depth to make.\"},\"returns\":{\"_0\":\"sum Specifies the total writes made to the store.\"}}},\"title\":\"TestGas\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestGas.sol\":\"TestGas\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/test/TestGas.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title TestGas\\n * @dev A contract with a collection of methods for testing certain edge cases related to gas.\\n * This is primarily used by the bundler to verify that its UserOperation gas estimates are working.\\n */\\ncontract TestGas {\\n    mapping(uint256 => uint256) public store;\\n    uint256 public offset;\\n\\n    /**\\n     * @dev This method allows you to run a recursive call where each nested call uses more gas than its parent.\\n     * @param depth Specifies the number of recursive calls to make.\\n     * @param width Specifies the number of sibling calls at each depth to make.\\n     * @param count Specifies a countdown that decrements by 1 at each call.\\n     * @return sum Specifies the total writes made to the store.\\n     */\\n    function recursiveCall(uint256 depth, uint256 width, uint256 count) external payable returns (uint256) {\\n        // Gas wasting logic.\\n        uint256 sum = depth - count;\\n        for (uint256 i = 0; i <= sum; i++) {\\n            offset++;\\n            store[offset] = i + 1;\\n        }\\n\\n        // Create multiple calls at a given depth.\\n        uint256 nestedSum = 0;\\n        if (count != 0) {\\n            for (uint256 i = 0; i <= width; i++) {\\n                nestedSum += this.recursiveCall(depth, width, count - 1);\\n            }\\n        }\\n\\n        // Maintain the function's stack frame.\\n        return sum + nestedSum;\\n    }\\n}\\n\",\"keccak256\":\"0xfb947aca7bca8b593e5bc4fcf9409b23be42f2feeaa16d9f20653229f2eb0fbf\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506102a1806100206000396000f3fe6080604052600436106100345760003560e01c80636057361d14610039578063d555654414610078578063d5d97d141461008e575b600080fd5b34801561004557600080fd5b506100666100543660046101db565b60006020819052908152604090205481565b60405190815260200160405180910390f35b34801561008457600080fd5b5061006660015481565b61006661009c3660046101f4565b6000806100a98386610236565b905060005b8181116100fa57600180549060006100c58361024f565b909155506100d69050816001610268565b600154600090815260208190526040902055806100f28161024f565b9150506100ae565b50600083156101c75760005b8581116101c5573063d5d97d14888861012060018a610236565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526004810193909352602483019190915260448201526064016020604051808303816000875af1158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a7919061027b565b6101b19083610268565b9150806101bd8161024f565b915050610106565b505b6101d18183610268565b9695505050505050565b6000602082840312156101ed57600080fd5b5035919050565b60008060006060848603121561020957600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561024957610249610220565b92915050565b60006001820161026157610261610220565b5060010190565b8082018082111561024957610249610220565b60006020828403121561028d57600080fd5b505191905056fea164736f6c6343000813000a",
  "deployedBytecode": "0x6080604052600436106100345760003560e01c80636057361d14610039578063d555654414610078578063d5d97d141461008e575b600080fd5b34801561004557600080fd5b506100666100543660046101db565b60006020819052908152604090205481565b60405190815260200160405180910390f35b34801561008457600080fd5b5061006660015481565b61006661009c3660046101f4565b6000806100a98386610236565b905060005b8181116100fa57600180549060006100c58361024f565b909155506100d69050816001610268565b600154600090815260208190526040902055806100f28161024f565b9150506100ae565b50600083156101c75760005b8581116101c5573063d5d97d14888861012060018a610236565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526004810193909352602483019190915260448201526064016020604051808303816000875af1158015610183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101a7919061027b565b6101b19083610268565b9150806101bd8161024f565b915050610106565b505b6101d18183610268565b9695505050505050565b6000602082840312156101ed57600080fd5b5035919050565b60008060006060848603121561020957600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561024957610249610220565b92915050565b60006001820161026157610261610220565b5060010190565b8082018082111561024957610249610220565b60006020828403121561028d57600080fd5b505191905056fea164736f6c6343000813000a",
  "devdoc": {
    "details": "A contract with a collection of methods for testing certain edge cases related to gas. This is primarily used by the bundler to verify that its UserOperation gas estimates are working.",
    "kind": "dev",
    "methods": {
      "recursiveCall(uint256,uint256,uint256)": {
        "details": "This method allows you to run a recursive call where each nested call uses more gas than its parent.",
        "params": {
          "count": "Specifies a countdown that decrements by 1 at each call.",
          "depth": "Specifies the number of recursive calls to make.",
          "width": "Specifies the number of sibling calls at each depth to make."
        },
        "returns": {
          "_0": "sum Specifies the total writes made to the store."
        }
      }
    },
    "title": "TestGas",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4309,
        "contract": "contracts/test/TestGas.sol:TestGas",
        "label": "store",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4311,
        "contract": "contracts/test/TestGas.sol:TestGas",
        "label": "offset",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}