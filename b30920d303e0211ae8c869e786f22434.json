{"id":"b30920d303e0211ae8c869e786f22434","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@openzeppelin/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"},"account-abstraction/contracts/core/BasePaymaster.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n\n/* solhint-disable reason-string */\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IPaymaster.sol\";\nimport \"../interfaces/IEntryPoint.sol\";\nimport \"./Helpers.sol\";\n\n/**\n * Helper class for creating a paymaster.\n * provides helper methods for staking.\n * validates that the postOp is called only by the entryPoint\n */\nabstract contract BasePaymaster is IPaymaster, Ownable {\n\n    IEntryPoint immutable public entryPoint;\n\n    constructor(IEntryPoint _entryPoint) {\n        entryPoint = _entryPoint;\n    }\n\n    /// @inheritdoc IPaymaster\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\n    external override returns (bytes memory context, uint256 validationData) {\n         _requireFromEntryPoint();\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\n    }\n\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\n    internal virtual returns (bytes memory context, uint256 validationData);\n\n    /// @inheritdoc IPaymaster\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external override {\n        _requireFromEntryPoint();\n        _postOp(mode, context, actualGasCost);\n    }\n\n    /**\n     * post-operation handler.\n     * (verified to be called only through the entryPoint)\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\n     * @param mode enum with the following options:\n     *      opSucceeded - user operation succeeded.\n     *      opReverted  - user op reverted. still has to pay for gas.\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\n     * @param context - the context value returned by validatePaymasterUserOp\n     * @param actualGasCost - actual gas used so far (without this postOp call).\n     */\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal virtual {\n\n        (mode,context,actualGasCost); // unused params\n        // subclass must override this method if validatePaymasterUserOp returns a context\n        revert(\"must override\");\n    }\n\n    /**\n     * add a deposit for this paymaster, used for paying for transaction fees\n     */\n    function deposit() public payable {\n        entryPoint.depositTo{value : msg.value}(address(this));\n    }\n\n    /**\n     * withdraw value from the deposit\n     * @param withdrawAddress target to send to\n     * @param amount to withdraw\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\n        entryPoint.withdrawTo(withdrawAddress, amount);\n    }\n    /**\n     * add stake for this paymaster.\n     * This method can also carry eth value to add to the current stake.\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\n     */\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\n        entryPoint.addStake{value : msg.value}(unstakeDelaySec);\n    }\n\n    /**\n     * return current paymaster's deposit on the entryPoint.\n     */\n    function getDeposit() public view returns (uint256) {\n        return entryPoint.balanceOf(address(this));\n    }\n\n    /**\n     * unlock the stake, in order to withdraw it.\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\n     */\n    function unlockStake() external onlyOwner {\n        entryPoint.unlockStake();\n    }\n\n    /**\n     * withdraw the entire paymaster's stake.\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\n        entryPoint.withdrawStake(withdrawAddress);\n    }\n\n    /// validate the call is made from a valid entrypoint\n    function _requireFromEntryPoint() internal virtual {\n        require(msg.sender == address(entryPoint), \"Sender not EntryPoint\");\n    }\n}\n"},"account-abstraction/contracts/core/Helpers.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\n/**\n * returned data from validateUserOp.\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\n * @param aggregator - address(0) - the account validated the signature by itself.\n *              address(1) - the account failed to validate the signature.\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\n * @param validAfter - this UserOp is valid only after this timestamp.\n * @param validaUntil - this UserOp is valid only up to this timestamp.\n */\n    struct ValidationData {\n        address aggregator;\n        uint48 validAfter;\n        uint48 validUntil;\n    }\n\n//extract sigFailed, validAfter, validUntil.\n// also convert zero validUntil to type(uint48).max\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\n        address aggregator = address(uint160(validationData));\n        uint48 validUntil = uint48(validationData >> 160);\n        if (validUntil == 0) {\n            validUntil = type(uint48).max;\n        }\n        uint48 validAfter = uint48(validationData >> (48 + 160));\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n// intersect account and paymaster ranges.\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\n        address aggregator = accountValidationData.aggregator;\n        if (aggregator == address(0)) {\n            aggregator = pmValidationData.aggregator;\n        }\n        uint48 validAfter = accountValidationData.validAfter;\n        uint48 validUntil = accountValidationData.validUntil;\n        uint48 pmValidAfter = pmValidationData.validAfter;\n        uint48 pmValidUntil = pmValidationData.validUntil;\n\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\n        return ValidationData(aggregator, validAfter, validUntil);\n    }\n\n/**\n * helper to pack the return value for validateUserOp\n * @param data - the ValidationData to pack\n */\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\n    }\n\n/**\n * helper to pack the return value for validateUserOp, when not using an aggregator\n * @param sigFailed - true for signature failure, false for success\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n * @param validAfter first timestamp this UserOperation is valid\n */\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\n    }\n\n/**\n * keccak function over calldata.\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\n */\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\n        assembly {\n            let mem := mload(0x40)\n            let len := data.length\n            calldatacopy(mem, data.offset, len)\n            ret := keccak256(mem, len)\n        }\n    }\n\n"},"account-abstraction/contracts/interfaces/IAggregator.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * Aggregated Signatures validator.\n */\ninterface IAggregator {\n\n    /**\n     * validate aggregated signature.\n     * revert if the aggregated signature does not match the given list of operations.\n     */\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\n\n    /**\n     * validate signature of a single userOp\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n     * @param userOp the userOperation received from the user.\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n     *    (usually empty, unless account and aggregator support some kind of \"multisig\"\n     */\n    function validateUserOpSignature(UserOperation calldata userOp)\n    external view returns (bytes memory sigForUserOp);\n\n    /**\n     * aggregate multiple signatures into a single value.\n     * This method is called off-chain to calculate the signature to pass with handleOps()\n     * bundler MAY use optimized custom code perform this aggregation\n     * @param userOps array of UserOperations to collect the signatures from.\n     * @return aggregatedSignature the aggregated signature\n     */\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\n}\n"},"account-abstraction/contracts/interfaces/IEntryPoint.sol":{"content":"/**\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\n ** Only one instance required on each chain.\n **/\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable avoid-low-level-calls */\n/* solhint-disable no-inline-assembly */\n/* solhint-disable reason-string */\n\nimport \"./UserOperation.sol\";\nimport \"./IStakeManager.sol\";\nimport \"./IAggregator.sol\";\nimport \"./INonceManager.sol\";\n\ninterface IEntryPoint is IStakeManager, INonceManager {\n\n    /***\n     * An event emitted after each successful request\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\n     * @param sender - the account that generates this request.\n     * @param paymaster - if non-null, the paymaster that pays for this request.\n     * @param nonce - the nonce value from the request.\n     * @param success - true if the sender transaction succeeded, false if reverted.\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\n     */\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\n\n    /**\n     * account \"sender\" was deployed.\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n     * @param sender the account that is deployed\n     * @param factory the factory used to deploy this account (in the initCode)\n     * @param paymaster the paymaster used by this UserOp\n     */\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\n\n    /**\n     * An event emitted if the UserOperation \"callData\" reverted with non-zero length\n     * @param userOpHash the request unique identifier.\n     * @param sender the sender of this request\n     * @param nonce the nonce used in the request\n     * @param revertReason - the return bytes from the (reverted) call to \"callData\".\n     */\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\n\n    /**\n     * an event emitted by handleOps(), before starting the execution loop.\n     * any event emitted before this event, is part of the validation.\n     */\n    event BeforeExecution();\n\n    /**\n     * signature aggregator used by the following UserOperationEvents within this bundle.\n     */\n    event SignatureAggregatorChanged(address indexed aggregator);\n\n    /**\n     * a custom revert error of handleOps, to identify the offending op.\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n     *  @param reason - revert reason\n     *      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n     *      so a failure can be attributed to the correct entity.\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\n     */\n    error FailedOp(uint256 opIndex, string reason);\n\n    /**\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\n     */\n    error SignatureValidationFailed(address aggregator);\n\n    /**\n     * Successful result from simulateValidation.\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     */\n    error ValidationResult(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\n\n    /**\n     * Successful result from simulateValidation, if the account returns a signature aggregator\n     * @param returnInfo gas and time-range returned values\n     * @param senderInfo stake information about the sender\n     * @param factoryInfo stake information about the factory (if any)\n     * @param paymasterInfo stake information about the paymaster (if any)\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\n     */\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\n        AggregatorStakeInfo aggregatorInfo);\n\n    /**\n     * return value of getSenderAddress\n     */\n    error SenderAddressResult(address sender);\n\n    /**\n     * return value of simulateHandleOp\n     */\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\n\n    //UserOps handled, per aggregator\n    struct UserOpsPerAggregator {\n        UserOperation[] userOps;\n\n        // aggregator address\n        IAggregator aggregator;\n        // aggregated signature\n        bytes signature;\n    }\n\n    /**\n     * Execute a batch of UserOperation.\n     * no signature aggregator is used.\n     * if any account requires an aggregator (that is, it returned an aggregator when\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\n     * @param ops the operations to execute\n     * @param beneficiary the address to receive the fees\n     */\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\n\n    /**\n     * Execute a batch of UserOperation with Aggregators\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n     * @param beneficiary the address to receive the fees\n     */\n    function handleAggregatedOps(\n        UserOpsPerAggregator[] calldata opsPerAggregator,\n        address payable beneficiary\n    ) external;\n\n    /**\n     * generate a request Id - unique identifier for this request.\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\n     */\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\n\n    /**\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n     * @param userOp the user operation to validate.\n     */\n    function simulateValidation(UserOperation calldata userOp) external;\n\n    /**\n     * gas and return values during simulation\n     * @param preOpGas the gas used for validation (including preValidationGas)\n     * @param prefund the required prefund for this operation\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\n     */\n    struct ReturnInfo {\n        uint256 preOpGas;\n        uint256 prefund;\n        bool sigFailed;\n        uint48 validAfter;\n        uint48 validUntil;\n        bytes paymasterContext;\n    }\n\n    /**\n     * returned aggregated signature info.\n     * the aggregator returned by the account, and its current stake.\n     */\n    struct AggregatorStakeInfo {\n        address aggregator;\n        StakeInfo stakeInfo;\n    }\n\n    /**\n     * Get counterfactual sender address.\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n     * this method always revert, and returns the address in SenderAddressResult error\n     * @param initCode the constructor code to be passed into the UserOperation.\n     */\n    function getSenderAddress(bytes memory initCode) external;\n\n\n    /**\n     * simulate full execution of a UserOperation (including both validation and target execution)\n     * this method will always revert with \"ExecutionResult\".\n     * it performs full validation of the UserOperation, but ignores signature error.\n     * an optional target address is called after the userop succeeds, and its value is returned\n     * (before the entire call is reverted)\n     * Note that in order to collect the the success/failure of the target call, it must be executed\n     * with trace enabled to track the emitted events.\n     * @param op the UserOperation to simulate\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n     *        are set to the return from that call.\n     * @param targetCallData callData to pass to target address\n     */\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\n}\n\n"},"account-abstraction/contracts/interfaces/INonceManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\ninterface INonceManager {\n\n    /**\n     * Return the next nonce for this sender.\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n     * But UserOp with different keys can come with arbitrary order.\n     *\n     * @param sender the account address\n     * @param key the high 192 bit of the nonce\n     * @return nonce a full nonce to pass for next UserOp with this sender.\n     */\n    function getNonce(address sender, uint192 key)\n    external view returns (uint256 nonce);\n\n    /**\n     * Manually increment the nonce of the sender.\n     * This method is exposed just for completeness..\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\n     * as the EntryPoint will update the nonce regardless.\n     * Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n     * UserOperations will not pay extra for the first transaction with a given key.\n     */\n    function incrementNonce(uint192 key) external;\n}\n"},"account-abstraction/contracts/interfaces/IPaymaster.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\nimport \"./UserOperation.sol\";\n\n/**\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\n */\ninterface IPaymaster {\n\n    enum PostOpMode {\n        opSucceeded, // user op succeeded\n        opReverted, // user op reverted. still has to pay for gas.\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\n    }\n\n    /**\n     * payment validation: check if paymaster agrees to pay.\n     * Must verify sender is the entryPoint.\n     * Revert to reject this request.\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\n     * @param userOp the user operation\n     * @param userOpHash hash of the user's request data.\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\n     * @return context value to send to a postOp\n     *      zero length to signify postOp is not required.\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n     *         otherwise, an address of an \"authorizer\" contract.\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n     *      <6-byte> validAfter - first timestamp this operation is valid\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\n     */\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\n    external returns (bytes memory context, uint256 validationData);\n\n    /**\n     * post-operation handler.\n     * Must verify sender is the entryPoint\n     * @param mode enum with the following options:\n     *      opSucceeded - user operation succeeded.\n     *      opReverted  - user op reverted. still has to pay for gas.\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\n     * @param context - the context value returned by validatePaymasterUserOp\n     * @param actualGasCost - actual gas used so far (without this postOp call).\n     */\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\n}\n"},"account-abstraction/contracts/interfaces/IStakeManager.sol":{"content":"// SPDX-License-Identifier: GPL-3.0-only\npragma solidity ^0.8.12;\n\n/**\n * manage deposits and stakes.\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n * stake is value locked for at least \"unstakeDelay\" by the staked entity.\n */\ninterface IStakeManager {\n\n    event Deposited(\n        address indexed account,\n        uint256 totalDeposit\n    );\n\n    event Withdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /// Emitted when stake or unstake delay are modified\n    event StakeLocked(\n        address indexed account,\n        uint256 totalStaked,\n        uint256 unstakeDelaySec\n    );\n\n    /// Emitted once a stake is scheduled for withdrawal\n    event StakeUnlocked(\n        address indexed account,\n        uint256 withdrawTime\n    );\n\n    event StakeWithdrawn(\n        address indexed account,\n        address withdrawAddress,\n        uint256 amount\n    );\n\n    /**\n     * @param deposit the entity's deposit\n     * @param staked true if this entity is staked.\n     * @param stake actual amount of ether staked for this entity.\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\n     *    and the rest fit into a 2nd cell.\n     *    112 bit allows for 10^15 eth\n     *    48 bit for full timestamp\n     *    32 bit allows 150 years for unstake delay\n     */\n    struct DepositInfo {\n        uint112 deposit;\n        bool staked;\n        uint112 stake;\n        uint32 unstakeDelaySec;\n        uint48 withdrawTime;\n    }\n\n    //API struct used by getStakeInfo and simulateValidation\n    struct StakeInfo {\n        uint256 stake;\n        uint256 unstakeDelaySec;\n    }\n\n    /// @return info - full deposit information of given account\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\n\n    /// @return the deposit (for gas payment) of the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * add to the deposit of the given account\n     */\n    function depositTo(address account) external payable;\n\n    /**\n     * add to the account's stake - amount and delay\n     * any pending unstake is first cancelled.\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\n     */\n    function addStake(uint32 _unstakeDelaySec) external payable;\n\n    /**\n     * attempt to unlock the stake.\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\n     */\n    function unlockStake() external;\n\n    /**\n     * withdraw from the (unlocked) stake.\n     * must first call unlockStake and wait for the unstakeDelay to pass\n     * @param withdrawAddress the address to send withdrawn value.\n     */\n    function withdrawStake(address payable withdrawAddress) external;\n\n    /**\n     * withdraw from the deposit.\n     * @param withdrawAddress the address to send withdrawn value.\n     * @param withdrawAmount the amount to withdraw.\n     */\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\n}\n"},"account-abstraction/contracts/interfaces/UserOperation.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.12;\n\n/* solhint-disable no-inline-assembly */\n\nimport {calldataKeccak} from \"../core/Helpers.sol\";\n\n/**\n * User Operation struct\n * @param sender the sender account of this request.\n     * @param nonce unique value the sender uses to verify it is not a replay.\n     * @param initCode if set, the account contract will be created by this constructor/\n     * @param callData the method call to execute on this account.\n     * @param callGasLimit the gas limit passed to the callData method call.\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\n     */\n    struct UserOperation {\n\n        address sender;\n        uint256 nonce;\n        bytes initCode;\n        bytes callData;\n        uint256 callGasLimit;\n        uint256 verificationGasLimit;\n        uint256 preVerificationGas;\n        uint256 maxFeePerGas;\n        uint256 maxPriorityFeePerGas;\n        bytes paymasterAndData;\n        bytes signature;\n    }\n\n/**\n * Utility functions helpful when working with UserOperation structs.\n */\nlibrary UserOperationLib {\n\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\n        address data;\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\n        assembly {data := calldataload(userOp)}\n        return address(uint160(data));\n    }\n\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\n    // pay above what he signed for.\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\n    unchecked {\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        if (maxFeePerGas == maxPriorityFeePerGas) {\n            //legacy mode (for networks that don't support basefee opcode)\n            return maxFeePerGas;\n        }\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n    }\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        address sender = getSender(userOp);\n        uint256 nonce = userOp.nonce;\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\n        uint256 callGasLimit = userOp.callGasLimit;\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\n        uint256 preVerificationGas = userOp.preVerificationGas;\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\n\n        return abi.encode(\n            sender, nonce,\n            hashInitCode, hashCallData,\n            callGasLimit, verificationGasLimit, preVerificationGas,\n            maxFeePerGas, maxPriorityFeePerGas,\n            hashPaymasterAndData\n        );\n    }\n\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\n        return keccak256(pack(userOp));\n    }\n\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n"},"contracts/test/TestToken.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.19;\n\nimport { ERC20 } from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract TestToken is ERC20 {\n    uint8 private immutable decimal;\n\n    constructor(uint8 _decimals, string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        decimal = _decimals;\n    }\n\n    function decimals() public view override returns (uint8) {\n        return decimal;\n    }\n\n    function mint(address to, uint256 amount) public {\n        require(amount < 1 ether, \"mint amount too high\");\n        _mint(to, amount);\n    }\n}\n"},"contracts/VerifyingPaymaster.sol":{"content":"// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.8.19;\n\nimport { IEntryPoint } from \"account-abstraction/contracts/interfaces/IEntryPoint.sol\";\nimport { UserOperation } from \"account-abstraction/contracts/interfaces/UserOperation.sol\";\nimport { UserOperationLib } from \"account-abstraction/contracts/interfaces/UserOperation.sol\";\nimport { BasePaymaster } from \"account-abstraction/contracts/core/BasePaymaster.sol\";\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"account-abstraction/contracts/core/Helpers.sol\" as Helpers;\n\n/**\n * A paymaster based on the eth-infinitism sample VerifyingPaymaster contract.\n * It has the same functionality as the sample, but with added support for withdrawing ERC20 tokens.\n * All withdrawn tokens will be transferred to the owner address.\n * Note that the off-chain signer should have a strategy in place to handle a failed token withdrawal.\n *\n * See account-abstraction/contracts/samples/VerifyingPaymaster.sol for detailed comments.\n */\ncontract VerifyingPaymaster is BasePaymaster {\n    using ECDSA for bytes32;\n    using UserOperationLib for UserOperation;\n    using SafeERC20 for IERC20;\n\n    mapping(address sender => uint256 nonce) public senderNonce;\n\n    uint256 private constant VALID_PND_OFFSET = 20;\n\n    uint256 private constant SIGNATURE_OFFSET = 148;\n\n    uint256 public constant POST_OP_GAS = 35000;\n\n    constructor(IEntryPoint _entryPoint, address _owner) BasePaymaster(_entryPoint) {\n        _transferOwnership(_owner);\n    }\n\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\n        bytes calldata pnd = userOp.paymasterAndData;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let ofs := userOp\n            let len := sub(sub(pnd.offset, ofs), 32)\n            ret := mload(0x40)\n            mstore(0x40, add(ret, add(len, 32)))\n            mstore(ret, len)\n            calldatacopy(add(ret, 32), ofs, len)\n        }\n    }\n\n    function getHash(\n        UserOperation calldata userOp,\n        uint48 validUntil,\n        uint48 validAfter,\n        address erc20Token,\n        uint256 exchangeRate\n    ) public view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    pack(userOp),\n                    block.chainid,\n                    address(this),\n                    senderNonce[userOp.getSender()],\n                    validUntil,\n                    validAfter,\n                    erc20Token,\n                    exchangeRate\n                )\n            );\n    }\n\n    function _validatePaymasterUserOp(\n        UserOperation calldata userOp,\n        bytes32 /*userOpHash*/,\n        uint256 requiredPreFund\n    ) internal override returns (bytes memory context, uint256 validationData) {\n        (requiredPreFund);\n\n        (\n            uint48 validUntil,\n            uint48 validAfter,\n            address erc20Token,\n            uint256 exchangeRate,\n            bytes calldata signature\n        ) = parsePaymasterAndData(userOp.paymasterAndData);\n        // solhint-disable-next-line reason-string\n        require(\n            signature.length == 64 || signature.length == 65,\n            \"VerifyingPaymaster: invalid signature length in paymasterAndData\"\n        );\n        bytes32 hash = ECDSA.toEthSignedMessageHash(getHash(userOp, validUntil, validAfter, erc20Token, exchangeRate));\n        senderNonce[userOp.getSender()]++;\n        context = \"\";\n        if (erc20Token != address(0)) {\n            context = abi.encode(\n                userOp.sender,\n                erc20Token,\n                exchangeRate,\n                userOp.maxFeePerGas,\n                userOp.maxPriorityFeePerGas\n            );\n        }\n\n        if (owner() != ECDSA.recover(hash, signature)) {\n            return (context, Helpers._packValidationData(true, validUntil, validAfter));\n        }\n\n        return (context, Helpers._packValidationData(false, validUntil, validAfter));\n    }\n\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal override {\n        (address sender, IERC20 token, uint256 exchangeRate, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas) = abi\n            .decode(context, (address, IERC20, uint256, uint256, uint256));\n\n        uint256 opGasPrice;\n        unchecked {\n            if (maxFeePerGas == maxPriorityFeePerGas) {\n                opGasPrice = maxFeePerGas;\n            } else {\n                opGasPrice = Math.min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\n            }\n        }\n\n        uint256 actualTokenCost = ((actualGasCost + (POST_OP_GAS * opGasPrice)) * exchangeRate) / 1e18;\n        if (mode != PostOpMode.postOpReverted) {\n            token.safeTransferFrom(sender, owner(), actualTokenCost);\n        }\n    }\n\n    function parsePaymasterAndData(\n        bytes calldata paymasterAndData\n    )\n        public\n        pure\n        returns (\n            uint48 validUntil,\n            uint48 validAfter,\n            address erc20Token,\n            uint256 exchangeRate,\n            bytes calldata signature\n        )\n    {\n        (validUntil, validAfter, erc20Token, exchangeRate) = abi.decode(\n            paymasterAndData[VALID_PND_OFFSET:SIGNATURE_OFFSET],\n            (uint48, uint48, address, uint256)\n        );\n        signature = paymasterAndData[SIGNATURE_OFFSET:];\n    }\n}\n"}},"settings":{"metadata":{"bytecodeHash":"none","useLiteralContent":true},"optimizer":{"enabled":true,"runs":800},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}}}},"output":{"sources":{"@openzeppelin/contracts/access/Ownable.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","exportedSymbols":{"Context":[1471],"Ownable":[112]},"id":113,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"102:23:0"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../utils/Context.sol","id":2,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":113,"sourceUnit":1472,"src":"127:30:0","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":4,"name":"Context","nameLocations":["683:7:0"],"nodeType":"IdentifierPath","referencedDeclaration":1471,"src":"683:7:0"},"id":5,"nodeType":"InheritanceSpecifier","src":"683:7:0"}],"canonicalName":"Ownable","contractDependencies":[],"contractKind":"contract","documentation":{"id":3,"nodeType":"StructuredDocumentation","src":"159:494:0","text":" @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."},"fullyImplemented":true,"id":112,"linearizedBaseContracts":[112,1471],"name":"Ownable","nameLocation":"672:7:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":7,"mutability":"mutable","name":"_owner","nameLocation":"713:6:0","nodeType":"VariableDeclaration","scope":112,"src":"697:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":6,"name":"address","nodeType":"ElementaryTypeName","src":"697:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"private"},{"anonymous":false,"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":13,"name":"OwnershipTransferred","nameLocation":"732:20:0","nodeType":"EventDefinition","parameters":{"id":12,"nodeType":"ParameterList","parameters":[{"constant":false,"id":9,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"769:13:0","nodeType":"VariableDeclaration","scope":13,"src":"753:29:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":8,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":11,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"800:8:0","nodeType":"VariableDeclaration","scope":13,"src":"784:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":10,"name":"address","nodeType":"ElementaryTypeName","src":"784:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"752:57:0"},"src":"726:84:0"},{"body":{"id":22,"nodeType":"Block","src":"926:49:0","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":18,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"955:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":19,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"955:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":17,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"936:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":20,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"936:32:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":21,"nodeType":"ExpressionStatement","src":"936:32:0"}]},"documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"816:91:0","text":" @dev Initializes the contract setting the deployer as the initial owner."},"id":23,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":15,"nodeType":"ParameterList","parameters":[],"src":"923:2:0"},"returnParameters":{"id":16,"nodeType":"ParameterList","parameters":[],"src":"926:0:0"},"scope":112,"src":"912:63:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":30,"nodeType":"Block","src":"1084:41:0","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":26,"name":"_checkOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":54,"src":"1094:11:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$__$","typeString":"function () view"}},"id":27,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1094:13:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":28,"nodeType":"ExpressionStatement","src":"1094:13:0"},{"id":29,"nodeType":"PlaceholderStatement","src":"1117:1:0"}]},"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"981:77:0","text":" @dev Throws if called by any account other than the owner."},"id":31,"name":"onlyOwner","nameLocation":"1072:9:0","nodeType":"ModifierDefinition","parameters":{"id":25,"nodeType":"ParameterList","parameters":[],"src":"1081:2:0"},"src":"1063:62:0","virtual":false,"visibility":"internal"},{"body":{"id":39,"nodeType":"Block","src":"1256:30:0","statements":[{"expression":{"id":37,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"1273:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":36,"id":38,"nodeType":"Return","src":"1266:13:0"}]},"documentation":{"id":32,"nodeType":"StructuredDocumentation","src":"1131:65:0","text":" @dev Returns the address of the current owner."},"functionSelector":"8da5cb5b","id":40,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"1210:5:0","nodeType":"FunctionDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[],"src":"1215:2:0"},"returnParameters":{"id":36,"nodeType":"ParameterList","parameters":[{"constant":false,"id":35,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":40,"src":"1247:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":34,"name":"address","nodeType":"ElementaryTypeName","src":"1247:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1246:9:0"},"scope":112,"src":"1201:85:0","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":53,"nodeType":"Block","src":"1404:85:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":49,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":45,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"1422:5:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":46,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1422:7:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":47,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"1433:10:0","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1433:12:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1422:23:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","id":50,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1447:34:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""},"value":"Ownable: caller is not the owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe","typeString":"literal_string \"Ownable: caller is not the owner\""}],"id":44,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1414:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1414:68:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1414:68:0"}]},"documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"1292:62:0","text":" @dev Throws if the sender is not the owner."},"id":54,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOwner","nameLocation":"1368:11:0","nodeType":"FunctionDefinition","parameters":{"id":42,"nodeType":"ParameterList","parameters":[],"src":"1379:2:0"},"returnParameters":{"id":43,"nodeType":"ParameterList","parameters":[],"src":"1404:0:0"},"scope":112,"src":"1359:130:0","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":67,"nodeType":"Block","src":"1885:47:0","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":63,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1922:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":62,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":61,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:0","typeDescriptions":{}}},"id":64,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":60,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1895:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":65,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1895:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":66,"nodeType":"ExpressionStatement","src":"1895:30:0"}]},"documentation":{"id":55,"nodeType":"StructuredDocumentation","src":"1495:331:0","text":" @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."},"functionSelector":"715018a6","id":68,"implemented":true,"kind":"function","modifiers":[{"id":58,"kind":"modifierInvocation","modifierName":{"id":57,"name":"onlyOwner","nameLocations":["1875:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"1875:9:0"},"nodeType":"ModifierInvocation","src":"1875:9:0"}],"name":"renounceOwnership","nameLocation":"1840:17:0","nodeType":"FunctionDefinition","parameters":{"id":56,"nodeType":"ParameterList","parameters":[],"src":"1857:2:0"},"returnParameters":{"id":59,"nodeType":"ParameterList","parameters":[],"src":"1885:0:0"},"scope":112,"src":"1831:101:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":90,"nodeType":"Block","src":"2151:128:0","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":82,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":77,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2169:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":80,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2189:1:0","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":79,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2181:7:0","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":78,"name":"address","nodeType":"ElementaryTypeName","src":"2181:7:0","typeDescriptions":{}}},"id":81,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2181:10:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2169:22:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373","id":83,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2193:40:0","typeDescriptions":{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""},"value":"Ownable: new owner is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe","typeString":"literal_string \"Ownable: new owner is the zero address\""}],"id":76,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2161:7:0","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":84,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2161:73:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":85,"nodeType":"ExpressionStatement","src":"2161:73:0"},{"expression":{"arguments":[{"id":87,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":71,"src":"2263:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":86,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"2244:18:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":88,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2244:28:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":89,"nodeType":"ExpressionStatement","src":"2244:28:0"}]},"documentation":{"id":69,"nodeType":"StructuredDocumentation","src":"1938:138:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."},"functionSelector":"f2fde38b","id":91,"implemented":true,"kind":"function","modifiers":[{"id":74,"kind":"modifierInvocation","modifierName":{"id":73,"name":"onlyOwner","nameLocations":["2141:9:0"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2141:9:0"},"nodeType":"ModifierInvocation","src":"2141:9:0"}],"name":"transferOwnership","nameLocation":"2090:17:0","nodeType":"FunctionDefinition","parameters":{"id":72,"nodeType":"ParameterList","parameters":[{"constant":false,"id":71,"mutability":"mutable","name":"newOwner","nameLocation":"2116:8:0","nodeType":"VariableDeclaration","scope":91,"src":"2108:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":70,"name":"address","nodeType":"ElementaryTypeName","src":"2108:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2107:18:0"},"returnParameters":{"id":75,"nodeType":"ParameterList","parameters":[],"src":"2151:0:0"},"scope":112,"src":"2081:198:0","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":110,"nodeType":"Block","src":"2496:124:0","statements":[{"assignments":[98],"declarations":[{"constant":false,"id":98,"mutability":"mutable","name":"oldOwner","nameLocation":"2514:8:0","nodeType":"VariableDeclaration","scope":110,"src":"2506:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":97,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":100,"initialValue":{"id":99,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2525:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2506:25:0"},{"expression":{"id":103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":101,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2541:6:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":102,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2550:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2541:17:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":104,"nodeType":"ExpressionStatement","src":"2541:17:0"},{"eventCall":{"arguments":[{"id":106,"name":"oldOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":98,"src":"2594:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":107,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"2604:8:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":105,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":13,"src":"2573:20:0","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:40:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":109,"nodeType":"EmitStatement","src":"2568:45:0"}]},"documentation":{"id":92,"nodeType":"StructuredDocumentation","src":"2285:143:0","text":" @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."},"id":111,"implemented":true,"kind":"function","modifiers":[],"name":"_transferOwnership","nameLocation":"2442:18:0","nodeType":"FunctionDefinition","parameters":{"id":95,"nodeType":"ParameterList","parameters":[{"constant":false,"id":94,"mutability":"mutable","name":"newOwner","nameLocation":"2469:8:0","nodeType":"VariableDeclaration","scope":111,"src":"2461:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":93,"name":"address","nodeType":"ElementaryTypeName","src":"2461:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2460:18:0"},"returnParameters":{"id":96,"nodeType":"ParameterList","parameters":[],"src":"2496:0:0"},"scope":112,"src":"2433:187:0","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":113,"src":"654:1968:0","usedErrors":[]}],"src":"102:2521:0"},"id":0},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","exportedSymbols":{"Context":[1471],"ERC20":[699],"IERC20":[777],"IERC20Metadata":[802]},"id":700,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":114,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"105:23:1"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"./IERC20.sol","id":115,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":778,"src":"130:22:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","file":"./extensions/IERC20Metadata.sol","id":116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":803,"src":"153:41:1","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":117,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":700,"sourceUnit":1472,"src":"195:33:1","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":119,"name":"Context","nameLocations":["1419:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":1471,"src":"1419:7:1"},"id":120,"nodeType":"InheritanceSpecifier","src":"1419:7:1"},{"baseName":{"id":121,"name":"IERC20","nameLocations":["1428:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"1428:6:1"},"id":122,"nodeType":"InheritanceSpecifier","src":"1428:6:1"},{"baseName":{"id":123,"name":"IERC20Metadata","nameLocations":["1436:14:1"],"nodeType":"IdentifierPath","referencedDeclaration":802,"src":"1436:14:1"},"id":124,"nodeType":"InheritanceSpecifier","src":"1436:14:1"}],"canonicalName":"ERC20","contractDependencies":[],"contractKind":"contract","documentation":{"id":118,"nodeType":"StructuredDocumentation","src":"230:1170:1","text":" @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."},"fullyImplemented":true,"id":699,"linearizedBaseContracts":[699,802,777,1471],"name":"ERC20","nameLocation":"1410:5:1","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":128,"mutability":"mutable","name":"_balances","nameLocation":"1493:9:1","nodeType":"VariableDeclaration","scope":699,"src":"1457:45:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":127,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"1465:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1457:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":126,"name":"uint256","nodeType":"ElementaryTypeName","src":"1476:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":134,"mutability":"mutable","name":"_allowances","nameLocation":"1565:11:1","nodeType":"VariableDeclaration","scope":699,"src":"1509:67:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":133,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":129,"name":"address","nodeType":"ElementaryTypeName","src":"1517:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1509:47:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":132,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":130,"name":"address","nodeType":"ElementaryTypeName","src":"1536:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1528:27:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":131,"name":"uint256","nodeType":"ElementaryTypeName","src":"1547:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"private"},{"constant":false,"id":136,"mutability":"mutable","name":"_totalSupply","nameLocation":"1599:12:1","nodeType":"VariableDeclaration","scope":699,"src":"1583:28:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":135,"name":"uint256","nodeType":"ElementaryTypeName","src":"1583:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":138,"mutability":"mutable","name":"_name","nameLocation":"1633:5:1","nodeType":"VariableDeclaration","scope":699,"src":"1618:20:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":137,"name":"string","nodeType":"ElementaryTypeName","src":"1618:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":140,"mutability":"mutable","name":"_symbol","nameLocation":"1659:7:1","nodeType":"VariableDeclaration","scope":699,"src":"1644:22:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":139,"name":"string","nodeType":"ElementaryTypeName","src":"1644:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"body":{"id":156,"nodeType":"Block","src":"2032:57:1","statements":[{"expression":{"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":148,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2042:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":149,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":143,"src":"2050:5:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2042:13:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":151,"nodeType":"ExpressionStatement","src":"2042:13:1"},{"expression":{"id":154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":152,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2065:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":153,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"2075:7:1","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"2065:17:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":155,"nodeType":"ExpressionStatement","src":"2065:17:1"}]},"documentation":{"id":141,"nodeType":"StructuredDocumentation","src":"1673:298:1","text":" @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."},"id":157,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":143,"mutability":"mutable","name":"name_","nameLocation":"2002:5:1","nodeType":"VariableDeclaration","scope":157,"src":"1988:19:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":142,"name":"string","nodeType":"ElementaryTypeName","src":"1988:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":145,"mutability":"mutable","name":"symbol_","nameLocation":"2023:7:1","nodeType":"VariableDeclaration","scope":157,"src":"2009:21:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":144,"name":"string","nodeType":"ElementaryTypeName","src":"2009:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1987:44:1"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2032:0:1"},"scope":699,"src":"1976:113:1","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[789],"body":{"id":166,"nodeType":"Block","src":"2223:29:1","statements":[{"expression":{"id":164,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":138,"src":"2240:5:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":163,"id":165,"nodeType":"Return","src":"2233:12:1"}]},"documentation":{"id":158,"nodeType":"StructuredDocumentation","src":"2095:54:1","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":167,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2163:4:1","nodeType":"FunctionDefinition","overrides":{"id":160,"nodeType":"OverrideSpecifier","overrides":[],"src":"2190:8:1"},"parameters":{"id":159,"nodeType":"ParameterList","parameters":[],"src":"2167:2:1"},"returnParameters":{"id":163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":167,"src":"2208:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":161,"name":"string","nodeType":"ElementaryTypeName","src":"2208:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2207:15:1"},"scope":699,"src":"2154:98:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[795],"body":{"id":176,"nodeType":"Block","src":"2436:31:1","statements":[{"expression":{"id":174,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":140,"src":"2453:7:1","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":173,"id":175,"nodeType":"Return","src":"2446:14:1"}]},"documentation":{"id":168,"nodeType":"StructuredDocumentation","src":"2258:102:1","text":" @dev Returns the symbol of the token, usually a shorter version of the\n name."},"functionSelector":"95d89b41","id":177,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2374:6:1","nodeType":"FunctionDefinition","overrides":{"id":170,"nodeType":"OverrideSpecifier","overrides":[],"src":"2403:8:1"},"parameters":{"id":169,"nodeType":"ParameterList","parameters":[],"src":"2380:2:1"},"returnParameters":{"id":173,"nodeType":"ParameterList","parameters":[{"constant":false,"id":172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":177,"src":"2421:13:1","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":171,"name":"string","nodeType":"ElementaryTypeName","src":"2421:6:1","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2420:15:1"},"scope":699,"src":"2365:102:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[801],"body":{"id":186,"nodeType":"Block","src":"3156:26:1","statements":[{"expression":{"hexValue":"3138","id":184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3173:2:1","typeDescriptions":{"typeIdentifier":"t_rational_18_by_1","typeString":"int_const 18"},"value":"18"},"functionReturnParameters":183,"id":185,"nodeType":"Return","src":"3166:9:1"}]},"documentation":{"id":178,"nodeType":"StructuredDocumentation","src":"2473:613:1","text":" @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."},"functionSelector":"313ce567","id":187,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"3100:8:1","nodeType":"FunctionDefinition","overrides":{"id":180,"nodeType":"OverrideSpecifier","overrides":[],"src":"3131:8:1"},"parameters":{"id":179,"nodeType":"ParameterList","parameters":[],"src":"3108:2:1"},"returnParameters":{"id":183,"nodeType":"ParameterList","parameters":[{"constant":false,"id":182,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":187,"src":"3149:5:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":181,"name":"uint8","nodeType":"ElementaryTypeName","src":"3149:5:1","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"3148:7:1"},"scope":699,"src":"3091:91:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[726],"body":{"id":196,"nodeType":"Block","src":"3312:36:1","statements":[{"expression":{"id":194,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"3329:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":193,"id":195,"nodeType":"Return","src":"3322:19:1"}]},"documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"3188:49:1","text":" @dev See {IERC20-totalSupply}."},"functionSelector":"18160ddd","id":197,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"3251:11:1","nodeType":"FunctionDefinition","overrides":{"id":190,"nodeType":"OverrideSpecifier","overrides":[],"src":"3285:8:1"},"parameters":{"id":189,"nodeType":"ParameterList","parameters":[],"src":"3262:2:1"},"returnParameters":{"id":193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":197,"src":"3303:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":191,"name":"uint256","nodeType":"ElementaryTypeName","src":"3303:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3302:9:1"},"scope":699,"src":"3242:106:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[734],"body":{"id":210,"nodeType":"Block","src":"3489:42:1","statements":[{"expression":{"baseExpression":{"id":206,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"3506:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":208,"indexExpression":{"id":207,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":200,"src":"3516:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3506:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":205,"id":209,"nodeType":"Return","src":"3499:25:1"}]},"documentation":{"id":198,"nodeType":"StructuredDocumentation","src":"3354:47:1","text":" @dev See {IERC20-balanceOf}."},"functionSelector":"70a08231","id":211,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"3415:9:1","nodeType":"FunctionDefinition","overrides":{"id":202,"nodeType":"OverrideSpecifier","overrides":[],"src":"3462:8:1"},"parameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"account","nameLocation":"3433:7:1","nodeType":"VariableDeclaration","scope":211,"src":"3425:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"3425:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3424:17:1"},"returnParameters":{"id":205,"nodeType":"ParameterList","parameters":[{"constant":false,"id":204,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":211,"src":"3480:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":203,"name":"uint256","nodeType":"ElementaryTypeName","src":"3480:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3479:9:1"},"scope":699,"src":"3406:125:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[744],"body":{"id":235,"nodeType":"Block","src":"3812:104:1","statements":[{"assignments":[223],"declarations":[{"constant":false,"id":223,"mutability":"mutable","name":"owner","nameLocation":"3830:5:1","nodeType":"VariableDeclaration","scope":235,"src":"3822:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":222,"name":"address","nodeType":"ElementaryTypeName","src":"3822:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":226,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":224,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"3838:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3838:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3822:28:1"},{"expression":{"arguments":[{"id":228,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":223,"src":"3870:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":229,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":214,"src":"3877:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":230,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":216,"src":"3881:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":227,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"3860:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3860:28:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":232,"nodeType":"ExpressionStatement","src":"3860:28:1"},{"expression":{"hexValue":"74727565","id":233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3905:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":221,"id":234,"nodeType":"Return","src":"3898:11:1"}]},"documentation":{"id":212,"nodeType":"StructuredDocumentation","src":"3537:185:1","text":" @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."},"functionSelector":"a9059cbb","id":236,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"3736:8:1","nodeType":"FunctionDefinition","overrides":{"id":218,"nodeType":"OverrideSpecifier","overrides":[],"src":"3788:8:1"},"parameters":{"id":217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":214,"mutability":"mutable","name":"to","nameLocation":"3753:2:1","nodeType":"VariableDeclaration","scope":236,"src":"3745:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":213,"name":"address","nodeType":"ElementaryTypeName","src":"3745:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":216,"mutability":"mutable","name":"amount","nameLocation":"3765:6:1","nodeType":"VariableDeclaration","scope":236,"src":"3757:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":215,"name":"uint256","nodeType":"ElementaryTypeName","src":"3757:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3744:28:1"},"returnParameters":{"id":221,"nodeType":"ParameterList","parameters":[{"constant":false,"id":220,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":236,"src":"3806:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":219,"name":"bool","nodeType":"ElementaryTypeName","src":"3806:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3805:6:1"},"scope":699,"src":"3727:189:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[754],"body":{"id":253,"nodeType":"Block","src":"4072:51:1","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":247,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"4089:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":249,"indexExpression":{"id":248,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":239,"src":"4101:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":251,"indexExpression":{"id":250,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":241,"src":"4108:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4089:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":246,"id":252,"nodeType":"Return","src":"4082:34:1"}]},"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"3922:47:1","text":" @dev See {IERC20-allowance}."},"functionSelector":"dd62ed3e","id":254,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3983:9:1","nodeType":"FunctionDefinition","overrides":{"id":243,"nodeType":"OverrideSpecifier","overrides":[],"src":"4045:8:1"},"parameters":{"id":242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"owner","nameLocation":"4001:5:1","nodeType":"VariableDeclaration","scope":254,"src":"3993:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"3993:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"spender","nameLocation":"4016:7:1","nodeType":"VariableDeclaration","scope":254,"src":"4008:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":240,"name":"address","nodeType":"ElementaryTypeName","src":"4008:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3992:32:1"},"returnParameters":{"id":246,"nodeType":"ParameterList","parameters":[{"constant":false,"id":245,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":254,"src":"4063:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":244,"name":"uint256","nodeType":"ElementaryTypeName","src":"4063:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4062:9:1"},"scope":699,"src":"3974:149:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[764],"body":{"id":278,"nodeType":"Block","src":"4520:108:1","statements":[{"assignments":[266],"declarations":[{"constant":false,"id":266,"mutability":"mutable","name":"owner","nameLocation":"4538:5:1","nodeType":"VariableDeclaration","scope":278,"src":"4530:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"4530:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":269,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":267,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"4546:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4546:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4530:28:1"},{"expression":{"arguments":[{"id":271,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"4577:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":272,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":257,"src":"4584:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":273,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"4593:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":270,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"4568:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4568:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":275,"nodeType":"ExpressionStatement","src":"4568:32:1"},{"expression":{"hexValue":"74727565","id":276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4617:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":264,"id":277,"nodeType":"Return","src":"4610:11:1"}]},"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"4129:297:1","text":" @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"095ea7b3","id":279,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4440:7:1","nodeType":"FunctionDefinition","overrides":{"id":261,"nodeType":"OverrideSpecifier","overrides":[],"src":"4496:8:1"},"parameters":{"id":260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"spender","nameLocation":"4456:7:1","nodeType":"VariableDeclaration","scope":279,"src":"4448:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"4448:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":259,"mutability":"mutable","name":"amount","nameLocation":"4473:6:1","nodeType":"VariableDeclaration","scope":279,"src":"4465:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":258,"name":"uint256","nodeType":"ElementaryTypeName","src":"4465:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4447:33:1"},"returnParameters":{"id":264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":279,"src":"4514:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":262,"name":"bool","nodeType":"ElementaryTypeName","src":"4514:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4513:6:1"},"scope":699,"src":"4431:197:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[776],"body":{"id":311,"nodeType":"Block","src":"5323:153:1","statements":[{"assignments":[293],"declarations":[{"constant":false,"id":293,"mutability":"mutable","name":"spender","nameLocation":"5341:7:1","nodeType":"VariableDeclaration","scope":311,"src":"5333:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"5333:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":296,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":294,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"5351:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5351:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5333:30:1"},{"expression":{"arguments":[{"id":298,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"5389:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":299,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":293,"src":"5395:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"5404:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":297,"name":"_spendAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":676,"src":"5373:15:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":301,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5373:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":302,"nodeType":"ExpressionStatement","src":"5373:38:1"},{"expression":{"arguments":[{"id":304,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":282,"src":"5431:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":305,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":284,"src":"5437:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":306,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"5441:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":303,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":459,"src":"5421:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5421:27:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":308,"nodeType":"ExpressionStatement","src":"5421:27:1"},{"expression":{"hexValue":"74727565","id":309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"5465:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":291,"id":310,"nodeType":"Return","src":"5458:11:1"}]},"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"4634:551:1","text":" @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."},"functionSelector":"23b872dd","id":312,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"5199:12:1","nodeType":"FunctionDefinition","overrides":{"id":288,"nodeType":"OverrideSpecifier","overrides":[],"src":"5299:8:1"},"parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":282,"mutability":"mutable","name":"from","nameLocation":"5229:4:1","nodeType":"VariableDeclaration","scope":312,"src":"5221:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"5221:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":284,"mutability":"mutable","name":"to","nameLocation":"5251:2:1","nodeType":"VariableDeclaration","scope":312,"src":"5243:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"5243:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":286,"mutability":"mutable","name":"amount","nameLocation":"5271:6:1","nodeType":"VariableDeclaration","scope":312,"src":"5263:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":285,"name":"uint256","nodeType":"ElementaryTypeName","src":"5263:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5211:72:1"},"returnParameters":{"id":291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":290,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":312,"src":"5317:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":289,"name":"bool","nodeType":"ElementaryTypeName","src":"5317:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5316:6:1"},"scope":699,"src":"5190:286:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":340,"nodeType":"Block","src":"5965:140:1","statements":[{"assignments":[323],"declarations":[{"constant":false,"id":323,"mutability":"mutable","name":"owner","nameLocation":"5983:5:1","nodeType":"VariableDeclaration","scope":340,"src":"5975:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"5975:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":326,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":324,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"5991:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5991:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"5975:28:1"},{"expression":{"arguments":[{"id":328,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"6022:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":329,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"6029:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":335,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":331,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":323,"src":"6048:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":332,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"6055:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":330,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"6038:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6038:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":334,"name":"addedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":317,"src":"6066:10:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6038:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":327,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6013:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6013:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":337,"nodeType":"ExpressionStatement","src":"6013:64:1"},{"expression":{"hexValue":"74727565","id":338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"6094:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":321,"id":339,"nodeType":"Return","src":"6087:11:1"}]},"documentation":{"id":313,"nodeType":"StructuredDocumentation","src":"5482:384:1","text":" @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."},"functionSelector":"39509351","id":341,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5880:17:1","nodeType":"FunctionDefinition","parameters":{"id":318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":315,"mutability":"mutable","name":"spender","nameLocation":"5906:7:1","nodeType":"VariableDeclaration","scope":341,"src":"5898:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":314,"name":"address","nodeType":"ElementaryTypeName","src":"5898:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":317,"mutability":"mutable","name":"addedValue","nameLocation":"5923:10:1","nodeType":"VariableDeclaration","scope":341,"src":"5915:18:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":316,"name":"uint256","nodeType":"ElementaryTypeName","src":"5915:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5897:37:1"},"returnParameters":{"id":321,"nodeType":"ParameterList","parameters":[{"constant":false,"id":320,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":341,"src":"5959:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":319,"name":"bool","nodeType":"ElementaryTypeName","src":"5959:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5958:6:1"},"scope":699,"src":"5871:234:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":381,"nodeType":"Block","src":"6691:328:1","statements":[{"assignments":[352],"declarations":[{"constant":false,"id":352,"mutability":"mutable","name":"owner","nameLocation":"6709:5:1","nodeType":"VariableDeclaration","scope":381,"src":"6701:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":351,"name":"address","nodeType":"ElementaryTypeName","src":"6701:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":355,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":353,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1461,"src":"6717:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6717:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6701:28:1"},{"assignments":[357],"declarations":[{"constant":false,"id":357,"mutability":"mutable","name":"currentAllowance","nameLocation":"6747:16:1","nodeType":"VariableDeclaration","scope":381,"src":"6739:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":356,"name":"uint256","nodeType":"ElementaryTypeName","src":"6739:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":362,"initialValue":{"arguments":[{"id":359,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"6776:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":360,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"6783:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":358,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"6766:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":361,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6766:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6739:52:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":364,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"6809:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":365,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"6829:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6809:35:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6846:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""},"value":"ERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8","typeString":"literal_string \"ERC20: decreased allowance below zero\""}],"id":363,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6801:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6801:85:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":369,"nodeType":"ExpressionStatement","src":"6801:85:1"},{"id":378,"nodeType":"UncheckedBlock","src":"6896:95:1","statements":[{"expression":{"arguments":[{"id":371,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":352,"src":"6929:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":372,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":344,"src":"6936:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":373,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":357,"src":"6945:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":374,"name":"subtractedValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":346,"src":"6964:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6945:34:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":370,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"6920:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6920:60:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":377,"nodeType":"ExpressionStatement","src":"6920:60:1"}]},{"expression":{"hexValue":"74727565","id":379,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"7008:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":350,"id":380,"nodeType":"Return","src":"7001:11:1"}]},"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"6111:476:1","text":" @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."},"functionSelector":"a457c2d7","id":382,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6601:17:1","nodeType":"FunctionDefinition","parameters":{"id":347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":344,"mutability":"mutable","name":"spender","nameLocation":"6627:7:1","nodeType":"VariableDeclaration","scope":382,"src":"6619:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":343,"name":"address","nodeType":"ElementaryTypeName","src":"6619:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":346,"mutability":"mutable","name":"subtractedValue","nameLocation":"6644:15:1","nodeType":"VariableDeclaration","scope":382,"src":"6636:23:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":345,"name":"uint256","nodeType":"ElementaryTypeName","src":"6636:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6618:42:1"},"returnParameters":{"id":350,"nodeType":"ParameterList","parameters":[{"constant":false,"id":349,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":382,"src":"6685:4:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":348,"name":"bool","nodeType":"ElementaryTypeName","src":"6685:4:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6684:6:1"},"scope":699,"src":"6592:427:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":458,"nodeType":"Block","src":"7581:710:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":393,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7599:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":396,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":395,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7607:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":394,"name":"address","nodeType":"ElementaryTypeName","src":"7607:7:1","typeDescriptions":{}}},"id":397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7607:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7599:18:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373","id":399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7619:39:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""},"value":"ERC20: transfer from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea","typeString":"literal_string \"ERC20: transfer from the zero address\""}],"id":392,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7591:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":400,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7591:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":401,"nodeType":"ExpressionStatement","src":"7591:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":403,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7677:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7691:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":405,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7683:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":404,"name":"address","nodeType":"ElementaryTypeName","src":"7683:7:1","typeDescriptions":{}}},"id":407,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7683:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7677:16:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472657373","id":409,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7695:37:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""},"value":"ERC20: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f","typeString":"literal_string \"ERC20: transfer to the zero address\""}],"id":402,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7669:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7669:64:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":411,"nodeType":"ExpressionStatement","src":"7669:64:1"},{"expression":{"arguments":[{"id":413,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7765:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":414,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"7771:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":415,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"7775:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":412,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"7744:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7744:38:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":417,"nodeType":"ExpressionStatement","src":"7744:38:1"},{"assignments":[419],"declarations":[{"constant":false,"id":419,"mutability":"mutable","name":"fromBalance","nameLocation":"7801:11:1","nodeType":"VariableDeclaration","scope":458,"src":"7793:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":418,"name":"uint256","nodeType":"ElementaryTypeName","src":"7793:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":423,"initialValue":{"baseExpression":{"id":420,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"7815:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":422,"indexExpression":{"id":421,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7825:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7815:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7793:37:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":425,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"7848:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":426,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"7863:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7848:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365","id":428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7871:40:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""},"value":"ERC20: transfer amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6","typeString":"literal_string \"ERC20: transfer amount exceeds balance\""}],"id":424,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7840:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7840:72:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":430,"nodeType":"ExpressionStatement","src":"7840:72:1"},{"id":445,"nodeType":"UncheckedBlock","src":"7922:273:1","statements":[{"expression":{"id":437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":431,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"7946:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":433,"indexExpression":{"id":432,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"7956:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7946:15:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":434,"name":"fromBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"7964:11:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":435,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"7978:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7964:20:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7946:38:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":438,"nodeType":"ExpressionStatement","src":"7946:38:1"},{"expression":{"id":443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":439,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"8161:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":441,"indexExpression":{"id":440,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8171:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8161:13:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":442,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"8178:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8161:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":444,"nodeType":"ExpressionStatement","src":"8161:23:1"}]},{"eventCall":{"arguments":[{"id":447,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"8219:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":448,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8225:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":449,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"8229:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":446,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"8210:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8210:26:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":451,"nodeType":"EmitStatement","src":"8205:31:1"},{"expression":{"arguments":[{"id":453,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":385,"src":"8267:4:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":454,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":387,"src":"8273:2:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":455,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":389,"src":"8277:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":452,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"8247:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":456,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8247:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":457,"nodeType":"ExpressionStatement","src":"8247:37:1"}]},"documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"7025:443:1","text":" @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."},"id":459,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"7482:9:1","nodeType":"FunctionDefinition","parameters":{"id":390,"nodeType":"ParameterList","parameters":[{"constant":false,"id":385,"mutability":"mutable","name":"from","nameLocation":"7509:4:1","nodeType":"VariableDeclaration","scope":459,"src":"7501:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"7501:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":387,"mutability":"mutable","name":"to","nameLocation":"7531:2:1","nodeType":"VariableDeclaration","scope":459,"src":"7523:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":386,"name":"address","nodeType":"ElementaryTypeName","src":"7523:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":389,"mutability":"mutable","name":"amount","nameLocation":"7551:6:1","nodeType":"VariableDeclaration","scope":459,"src":"7543:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":388,"name":"uint256","nodeType":"ElementaryTypeName","src":"7543:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7491:72:1"},"returnParameters":{"id":391,"nodeType":"ParameterList","parameters":[],"src":"7581:0:1"},"scope":699,"src":"7473:818:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":515,"nodeType":"Block","src":"8632:470:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":468,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8650:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":471,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8669:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":470,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8661:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"8661:7:1","typeDescriptions":{}}},"id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8661:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8650:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","id":474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8673:33:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""},"value":"ERC20: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e","typeString":"literal_string \"ERC20: mint to the zero address\""}],"id":467,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8642:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8642:65:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":476,"nodeType":"ExpressionStatement","src":"8642:65:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8747:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":479,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8739:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":478,"name":"address","nodeType":"ElementaryTypeName","src":"8739:7:1","typeDescriptions":{}}},"id":481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8739:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":482,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8751:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":483,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8760:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":477,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"8718:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":484,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8718:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":485,"nodeType":"ExpressionStatement","src":"8718:49:1"},{"expression":{"id":488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":486,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"8778:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":487,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8794:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8778:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":489,"nodeType":"ExpressionStatement","src":"8778:22:1"},{"id":496,"nodeType":"UncheckedBlock","src":"8810:175:1","statements":[{"expression":{"id":494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":490,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"8946:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":492,"indexExpression":{"id":491,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"8956:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8946:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":493,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"8968:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8946:28:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":495,"nodeType":"ExpressionStatement","src":"8946:28:1"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9016:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9008:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":498,"name":"address","nodeType":"ElementaryTypeName","src":"9008:7:1","typeDescriptions":{}}},"id":501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9008:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":502,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"9020:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":503,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"9029:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":497,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"8999:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8999:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":505,"nodeType":"EmitStatement","src":"8994:42:1"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9075:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":508,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9067:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":507,"name":"address","nodeType":"ElementaryTypeName","src":"9067:7:1","typeDescriptions":{}}},"id":510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":511,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"9079:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":512,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"9088:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":506,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"9047:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":513,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9047:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":514,"nodeType":"ExpressionStatement","src":"9047:48:1"}]},"documentation":{"id":460,"nodeType":"StructuredDocumentation","src":"8297:265:1","text":"@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."},"id":516,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8576:5:1","nodeType":"FunctionDefinition","parameters":{"id":465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"account","nameLocation":"8590:7:1","nodeType":"VariableDeclaration","scope":516,"src":"8582:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":461,"name":"address","nodeType":"ElementaryTypeName","src":"8582:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"amount","nameLocation":"8607:6:1","nodeType":"VariableDeclaration","scope":516,"src":"8599:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":463,"name":"uint256","nodeType":"ElementaryTypeName","src":"8599:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8581:33:1"},"returnParameters":{"id":466,"nodeType":"ParameterList","parameters":[],"src":"8632:0:1"},"scope":699,"src":"8567:535:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":587,"nodeType":"Block","src":"9487:594:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":525,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9505:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9524:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9516:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":526,"name":"address","nodeType":"ElementaryTypeName","src":"9516:7:1","typeDescriptions":{}}},"id":529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9516:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9505:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e2066726f6d20746865207a65726f2061646472657373","id":531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9528:35:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""},"value":"ERC20: burn from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f","typeString":"literal_string \"ERC20: burn from the zero address\""}],"id":524,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9497:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":532,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9497:67:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":533,"nodeType":"ExpressionStatement","src":"9497:67:1"},{"expression":{"arguments":[{"id":535,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9596:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":538,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9613:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":537,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9605:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":536,"name":"address","nodeType":"ElementaryTypeName","src":"9605:7:1","typeDescriptions":{}}},"id":539,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9605:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":540,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9617:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":534,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"9575:20:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9575:49:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":542,"nodeType":"ExpressionStatement","src":"9575:49:1"},{"assignments":[544],"declarations":[{"constant":false,"id":544,"mutability":"mutable","name":"accountBalance","nameLocation":"9643:14:1","nodeType":"VariableDeclaration","scope":587,"src":"9635:22:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":543,"name":"uint256","nodeType":"ElementaryTypeName","src":"9635:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":548,"initialValue":{"baseExpression":{"id":545,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"9660:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":547,"indexExpression":{"id":546,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9670:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9660:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9635:43:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":552,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":550,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"9696:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":551,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9714:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9696:24:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365","id":553,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9722:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""},"value":"ERC20: burn amount exceeds balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd","typeString":"literal_string \"ERC20: burn amount exceeds balance\""}],"id":549,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9688:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":554,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9688:71:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":555,"nodeType":"ExpressionStatement","src":"9688:71:1"},{"id":568,"nodeType":"UncheckedBlock","src":"9769:194:1","statements":[{"expression":{"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":556,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":128,"src":"9793:9:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":558,"indexExpression":{"id":557,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9803:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9793:18:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":561,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":559,"name":"accountBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":544,"src":"9814:14:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":560,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9831:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9814:23:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9793:44:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":563,"nodeType":"ExpressionStatement","src":"9793:44:1"},{"expression":{"id":566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":564,"name":"_totalSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":136,"src":"9930:12:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":565,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"9946:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9930:22:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":567,"nodeType":"ExpressionStatement","src":"9930:22:1"}]},{"eventCall":{"arguments":[{"id":570,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"9987:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10004:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":572,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9996:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":571,"name":"address","nodeType":"ElementaryTypeName","src":"9996:7:1","typeDescriptions":{}}},"id":574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9996:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":575,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"10008:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":569,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"9978:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9978:37:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":577,"nodeType":"EmitStatement","src":"9973:42:1"},{"expression":{"arguments":[{"id":579,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":519,"src":"10046:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10063:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":581,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10055:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":580,"name":"address","nodeType":"ElementaryTypeName","src":"10055:7:1","typeDescriptions":{}}},"id":583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10055:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":584,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":521,"src":"10067:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":578,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":698,"src":"10026:19:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:48:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":586,"nodeType":"ExpressionStatement","src":"10026:48:1"}]},"documentation":{"id":517,"nodeType":"StructuredDocumentation","src":"9108:309:1","text":" @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."},"id":588,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"9431:5:1","nodeType":"FunctionDefinition","parameters":{"id":522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":519,"mutability":"mutable","name":"account","nameLocation":"9445:7:1","nodeType":"VariableDeclaration","scope":588,"src":"9437:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":518,"name":"address","nodeType":"ElementaryTypeName","src":"9437:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":521,"mutability":"mutable","name":"amount","nameLocation":"9462:6:1","nodeType":"VariableDeclaration","scope":588,"src":"9454:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":520,"name":"uint256","nodeType":"ElementaryTypeName","src":"9454:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9436:33:1"},"returnParameters":{"id":523,"nodeType":"ParameterList","parameters":[],"src":"9487:0:1"},"scope":699,"src":"9422:659:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":632,"nodeType":"Block","src":"10617:257:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":599,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"10635:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10652:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":601,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10644:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":600,"name":"address","nodeType":"ElementaryTypeName","src":"10644:7:1","typeDescriptions":{}}},"id":603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10644:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10635:19:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373","id":605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10656:38:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""},"value":"ERC20: approve from the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208","typeString":"literal_string \"ERC20: approve from the zero address\""}],"id":598,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10627:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10627:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":607,"nodeType":"ExpressionStatement","src":"10627:68:1"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":614,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":609,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10713:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":612,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10732:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":611,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10724:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":610,"name":"address","nodeType":"ElementaryTypeName","src":"10724:7:1","typeDescriptions":{}}},"id":613,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10724:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10713:21:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f2061646472657373","id":615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"10736:36:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""},"value":"ERC20: approve to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029","typeString":"literal_string \"ERC20: approve to the zero address\""}],"id":608,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"10705:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":616,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10705:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":617,"nodeType":"ExpressionStatement","src":"10705:68:1"},{"expression":{"id":624,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":618,"name":"_allowances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":134,"src":"10784:11:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":621,"indexExpression":{"id":619,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"10796:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10784:18:1","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":622,"indexExpression":{"id":620,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10803:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10784:27:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":623,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"10814:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10784:36:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":625,"nodeType":"ExpressionStatement","src":"10784:36:1"},{"eventCall":{"arguments":[{"id":627,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":591,"src":"10844:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":628,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":593,"src":"10851:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":629,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":595,"src":"10860:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":626,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":720,"src":"10835:8:1","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10835:32:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":631,"nodeType":"EmitStatement","src":"10830:37:1"}]},"documentation":{"id":589,"nodeType":"StructuredDocumentation","src":"10087:412:1","text":" @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."},"id":633,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"10513:8:1","nodeType":"FunctionDefinition","parameters":{"id":596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":591,"mutability":"mutable","name":"owner","nameLocation":"10539:5:1","nodeType":"VariableDeclaration","scope":633,"src":"10531:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":590,"name":"address","nodeType":"ElementaryTypeName","src":"10531:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":593,"mutability":"mutable","name":"spender","nameLocation":"10562:7:1","nodeType":"VariableDeclaration","scope":633,"src":"10554:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":592,"name":"address","nodeType":"ElementaryTypeName","src":"10554:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":595,"mutability":"mutable","name":"amount","nameLocation":"10587:6:1","nodeType":"VariableDeclaration","scope":633,"src":"10579:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":594,"name":"uint256","nodeType":"ElementaryTypeName","src":"10579:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10521:78:1"},"returnParameters":{"id":597,"nodeType":"ParameterList","parameters":[],"src":"10617:0:1"},"scope":699,"src":"10504:370:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":675,"nodeType":"Block","src":"11275:321:1","statements":[{"assignments":[644],"declarations":[{"constant":false,"id":644,"mutability":"mutable","name":"currentAllowance","nameLocation":"11293:16:1","nodeType":"VariableDeclaration","scope":675,"src":"11285:24:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":643,"name":"uint256","nodeType":"ElementaryTypeName","src":"11285:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":649,"initialValue":{"arguments":[{"id":646,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11322:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":647,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"11329:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":645,"name":"allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"11312:9:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view returns (uint256)"}},"id":648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11312:25:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11285:52:1"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":650,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11351:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":653,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11376:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":652,"name":"uint256","nodeType":"ElementaryTypeName","src":"11376:7:1","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":651,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"11371:4:1","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11371:13:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11385:3:1","memberName":"max","nodeType":"MemberAccess","src":"11371:17:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11351:37:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":674,"nodeType":"IfStatement","src":"11347:243:1","trueBody":{"id":673,"nodeType":"Block","src":"11390:200:1","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":660,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":658,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11412:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":659,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11432:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11412:26:1","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","id":661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11440:31:1","typeDescriptions":{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""},"value":"ERC20: insufficient allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe","typeString":"literal_string \"ERC20: insufficient allowance\""}],"id":657,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11404:7:1","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":662,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11404:68:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":663,"nodeType":"ExpressionStatement","src":"11404:68:1"},{"id":672,"nodeType":"UncheckedBlock","src":"11486:94:1","statements":[{"expression":{"arguments":[{"id":665,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"11523:5:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":666,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"11530:7:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":667,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":644,"src":"11539:16:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":668,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"11558:6:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11539:25:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":664,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":633,"src":"11514:8:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11514:51:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":671,"nodeType":"ExpressionStatement","src":"11514:51:1"}]}]}}]},"documentation":{"id":634,"nodeType":"StructuredDocumentation","src":"10880:270:1","text":" @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."},"id":676,"implemented":true,"kind":"function","modifiers":[],"name":"_spendAllowance","nameLocation":"11164:15:1","nodeType":"FunctionDefinition","parameters":{"id":641,"nodeType":"ParameterList","parameters":[{"constant":false,"id":636,"mutability":"mutable","name":"owner","nameLocation":"11197:5:1","nodeType":"VariableDeclaration","scope":676,"src":"11189:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":635,"name":"address","nodeType":"ElementaryTypeName","src":"11189:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":638,"mutability":"mutable","name":"spender","nameLocation":"11220:7:1","nodeType":"VariableDeclaration","scope":676,"src":"11212:15:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"11212:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":640,"mutability":"mutable","name":"amount","nameLocation":"11245:6:1","nodeType":"VariableDeclaration","scope":676,"src":"11237:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":639,"name":"uint256","nodeType":"ElementaryTypeName","src":"11237:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11179:78:1"},"returnParameters":{"id":642,"nodeType":"ParameterList","parameters":[],"src":"11275:0:1"},"scope":699,"src":"11155:441:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":686,"nodeType":"Block","src":"12299:2:1","statements":[]},"documentation":{"id":677,"nodeType":"StructuredDocumentation","src":"11602:573:1","text":" @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":687,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"12189:20:1","nodeType":"FunctionDefinition","parameters":{"id":684,"nodeType":"ParameterList","parameters":[{"constant":false,"id":679,"mutability":"mutable","name":"from","nameLocation":"12227:4:1","nodeType":"VariableDeclaration","scope":687,"src":"12219:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":678,"name":"address","nodeType":"ElementaryTypeName","src":"12219:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":681,"mutability":"mutable","name":"to","nameLocation":"12249:2:1","nodeType":"VariableDeclaration","scope":687,"src":"12241:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"12241:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":683,"mutability":"mutable","name":"amount","nameLocation":"12269:6:1","nodeType":"VariableDeclaration","scope":687,"src":"12261:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":682,"name":"uint256","nodeType":"ElementaryTypeName","src":"12261:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12209:72:1"},"returnParameters":{"id":685,"nodeType":"ParameterList","parameters":[],"src":"12299:0:1"},"scope":699,"src":"12180:121:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":697,"nodeType":"Block","src":"13007:2:1","statements":[]},"documentation":{"id":688,"nodeType":"StructuredDocumentation","src":"12307:577:1","text":" @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":698,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"12898:19:1","nodeType":"FunctionDefinition","parameters":{"id":695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":690,"mutability":"mutable","name":"from","nameLocation":"12935:4:1","nodeType":"VariableDeclaration","scope":698,"src":"12927:12:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":689,"name":"address","nodeType":"ElementaryTypeName","src":"12927:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":692,"mutability":"mutable","name":"to","nameLocation":"12957:2:1","nodeType":"VariableDeclaration","scope":698,"src":"12949:10:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":691,"name":"address","nodeType":"ElementaryTypeName","src":"12949:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":694,"mutability":"mutable","name":"amount","nameLocation":"12977:6:1","nodeType":"VariableDeclaration","scope":698,"src":"12969:14:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":693,"name":"uint256","nodeType":"ElementaryTypeName","src":"12969:7:1","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12917:72:1"},"returnParameters":{"id":696,"nodeType":"ParameterList","parameters":[],"src":"13007:0:1"},"scope":699,"src":"12889:120:1","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":700,"src":"1401:11610:1","usedErrors":[]}],"src":"105:12907:1"},"id":1},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[777]},"id":778,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":701,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":702,"nodeType":"StructuredDocumentation","src":"131:70:2","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":777,"linearizedBaseContracts":[777],"name":"IERC20","nameLocation":"212:6:2","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":703,"nodeType":"StructuredDocumentation","src":"225:158:2","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":711,"name":"Transfer","nameLocation":"394:8:2","nodeType":"EventDefinition","parameters":{"id":710,"nodeType":"ParameterList","parameters":[{"constant":false,"id":705,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:2","nodeType":"VariableDeclaration","scope":711,"src":"403:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":704,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":707,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:2","nodeType":"VariableDeclaration","scope":711,"src":"425:18:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":706,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":709,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:2","nodeType":"VariableDeclaration","scope":711,"src":"445:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":708,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:2"},"src":"388:72:2"},{"anonymous":false,"documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"466:148:2","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":720,"name":"Approval","nameLocation":"625:8:2","nodeType":"EventDefinition","parameters":{"id":719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":714,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:2","nodeType":"VariableDeclaration","scope":720,"src":"634:21:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":716,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:2","nodeType":"VariableDeclaration","scope":720,"src":"657:23:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":718,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:2","nodeType":"VariableDeclaration","scope":720,"src":"682:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":717,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:2"},"src":"619:78:2"},{"documentation":{"id":721,"nodeType":"StructuredDocumentation","src":"703:66:2","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":726,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:2","nodeType":"FunctionDefinition","parameters":{"id":722,"nodeType":"ParameterList","parameters":[],"src":"794:2:2"},"returnParameters":{"id":725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":724,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":726,"src":"820:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":723,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:2"},"scope":777,"src":"774:55:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":727,"nodeType":"StructuredDocumentation","src":"835:72:2","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":734,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:2","nodeType":"FunctionDefinition","parameters":{"id":730,"nodeType":"ParameterList","parameters":[{"constant":false,"id":729,"mutability":"mutable","name":"account","nameLocation":"939:7:2","nodeType":"VariableDeclaration","scope":734,"src":"931:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":728,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:2"},"returnParameters":{"id":733,"nodeType":"ParameterList","parameters":[{"constant":false,"id":732,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":734,"src":"971:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":731,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:2"},"scope":777,"src":"912:68:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":735,"nodeType":"StructuredDocumentation","src":"986:202:2","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":744,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:2","nodeType":"FunctionDefinition","parameters":{"id":740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":737,"mutability":"mutable","name":"to","nameLocation":"1219:2:2","nodeType":"VariableDeclaration","scope":744,"src":"1211:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":736,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":739,"mutability":"mutable","name":"amount","nameLocation":"1231:6:2","nodeType":"VariableDeclaration","scope":744,"src":"1223:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":738,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:2"},"returnParameters":{"id":743,"nodeType":"ParameterList","parameters":[{"constant":false,"id":742,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":744,"src":"1257:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":741,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:2"},"scope":777,"src":"1193:70:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":745,"nodeType":"StructuredDocumentation","src":"1269:264:2","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":754,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:2","nodeType":"FunctionDefinition","parameters":{"id":750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":747,"mutability":"mutable","name":"owner","nameLocation":"1565:5:2","nodeType":"VariableDeclaration","scope":754,"src":"1557:13:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":746,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":749,"mutability":"mutable","name":"spender","nameLocation":"1580:7:2","nodeType":"VariableDeclaration","scope":754,"src":"1572:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":748,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:2"},"returnParameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":754,"src":"1612:7:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":751,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:2"},"scope":777,"src":"1538:83:2","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"1627:642:2","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":764,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:2","nodeType":"FunctionDefinition","parameters":{"id":760,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"spender","nameLocation":"2299:7:2","nodeType":"VariableDeclaration","scope":764,"src":"2291:15:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":759,"mutability":"mutable","name":"amount","nameLocation":"2316:6:2","nodeType":"VariableDeclaration","scope":764,"src":"2308:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":758,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:2"},"returnParameters":{"id":763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":764,"src":"2342:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":761,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:2"},"scope":777,"src":"2274:74:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":765,"nodeType":"StructuredDocumentation","src":"2354:287:2","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":776,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:2","nodeType":"FunctionDefinition","parameters":{"id":772,"nodeType":"ParameterList","parameters":[{"constant":false,"id":767,"mutability":"mutable","name":"from","nameLocation":"2685:4:2","nodeType":"VariableDeclaration","scope":776,"src":"2677:12:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":766,"name":"address","nodeType":"ElementaryTypeName","src":"2677:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":769,"mutability":"mutable","name":"to","nameLocation":"2707:2:2","nodeType":"VariableDeclaration","scope":776,"src":"2699:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":768,"name":"address","nodeType":"ElementaryTypeName","src":"2699:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":771,"mutability":"mutable","name":"amount","nameLocation":"2727:6:2","nodeType":"VariableDeclaration","scope":776,"src":"2719:14:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":770,"name":"uint256","nodeType":"ElementaryTypeName","src":"2719:7:2","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:72:2"},"returnParameters":{"id":775,"nodeType":"ParameterList","parameters":[{"constant":false,"id":774,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":776,"src":"2758:4:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":773,"name":"bool","nodeType":"ElementaryTypeName","src":"2758:4:2","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2757:6:2"},"scope":777,"src":"2646:118:2","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":778,"src":"202:2564:2","usedErrors":[]}],"src":"106:2661:2"},"id":2},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol","exportedSymbols":{"IERC20":[777],"IERC20Metadata":[802]},"id":803,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":779,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"110:23:3"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":780,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":803,"sourceUnit":778,"src":"135:23:3","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":782,"name":"IERC20","nameLocations":["305:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"305:6:3"},"id":783,"nodeType":"InheritanceSpecifier","src":"305:6:3"}],"canonicalName":"IERC20Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"160:116:3","text":" @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"},"fullyImplemented":false,"id":802,"linearizedBaseContracts":[802,777],"name":"IERC20Metadata","nameLocation":"287:14:3","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":784,"nodeType":"StructuredDocumentation","src":"318:54:3","text":" @dev Returns the name of the token."},"functionSelector":"06fdde03","id":789,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"386:4:3","nodeType":"FunctionDefinition","parameters":{"id":785,"nodeType":"ParameterList","parameters":[],"src":"390:2:3"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[{"constant":false,"id":787,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":789,"src":"416:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":786,"name":"string","nodeType":"ElementaryTypeName","src":"416:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"415:15:3"},"scope":802,"src":"377:54:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":790,"nodeType":"StructuredDocumentation","src":"437:56:3","text":" @dev Returns the symbol of the token."},"functionSelector":"95d89b41","id":795,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"507:6:3","nodeType":"FunctionDefinition","parameters":{"id":791,"nodeType":"ParameterList","parameters":[],"src":"513:2:3"},"returnParameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":793,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":795,"src":"539:13:3","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":792,"name":"string","nodeType":"ElementaryTypeName","src":"539:6:3","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"538:15:3"},"scope":802,"src":"498:56:3","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":796,"nodeType":"StructuredDocumentation","src":"560:65:3","text":" @dev Returns the decimals places of the token."},"functionSelector":"313ce567","id":801,"implemented":false,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"639:8:3","nodeType":"FunctionDefinition","parameters":{"id":797,"nodeType":"ParameterList","parameters":[],"src":"647:2:3"},"returnParameters":{"id":800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":799,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":801,"src":"673:5:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":798,"name":"uint8","nodeType":"ElementaryTypeName","src":"673:5:3","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"672:7:3"},"scope":802,"src":"630:50:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":803,"src":"277:405:3","usedErrors":[]}],"src":"110:573:3"},"id":3},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[838]},"id":839,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":804,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:4"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":805,"nodeType":"StructuredDocumentation","src":"139:480:4","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":838,"linearizedBaseContracts":[838],"name":"IERC20Permit","nameLocation":"630:12:4","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"649:792:4","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":823,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1455:6:4","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"owner","nameLocation":"1479:5:4","nodeType":"VariableDeclaration","scope":823,"src":"1471:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"1471:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"spender","nameLocation":"1502:7:4","nodeType":"VariableDeclaration","scope":823,"src":"1494:15:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":809,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"value","nameLocation":"1527:5:4","nodeType":"VariableDeclaration","scope":823,"src":"1519:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":811,"name":"uint256","nodeType":"ElementaryTypeName","src":"1519:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":814,"mutability":"mutable","name":"deadline","nameLocation":"1550:8:4","nodeType":"VariableDeclaration","scope":823,"src":"1542:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":813,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":816,"mutability":"mutable","name":"v","nameLocation":"1574:1:4","nodeType":"VariableDeclaration","scope":823,"src":"1568:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":815,"name":"uint8","nodeType":"ElementaryTypeName","src":"1568:5:4","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":818,"mutability":"mutable","name":"r","nameLocation":"1593:1:4","nodeType":"VariableDeclaration","scope":823,"src":"1585:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":817,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1585:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"s","nameLocation":"1612:1:4","nodeType":"VariableDeclaration","scope":823,"src":"1604:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":819,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1604:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1461:158:4"},"returnParameters":{"id":822,"nodeType":"ParameterList","parameters":[],"src":"1628:0:4"},"scope":838,"src":"1446:183:4","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":824,"nodeType":"StructuredDocumentation","src":"1635:294:4","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":831,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1943:6:4","nodeType":"FunctionDefinition","parameters":{"id":827,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"mutability":"mutable","name":"owner","nameLocation":"1958:5:4","nodeType":"VariableDeclaration","scope":831,"src":"1950:13:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"1950:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1949:15:4"},"returnParameters":{"id":830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":829,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":831,"src":"1988:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":828,"name":"uint256","nodeType":"ElementaryTypeName","src":"1988:7:4","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1987:9:4"},"scope":838,"src":"1934:63:4","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":832,"nodeType":"StructuredDocumentation","src":"2003:128:4","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":837,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2198:16:4","nodeType":"FunctionDefinition","parameters":{"id":833,"nodeType":"ParameterList","parameters":[],"src":"2214:2:4"},"returnParameters":{"id":836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":837,"src":"2240:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":834,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2240:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2239:9:4"},"scope":838,"src":"2189:60:4","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":839,"src":"620:1631:4","usedErrors":[]}],"src":"114:2138:4"},"id":4},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[1449],"IERC20":[777],"IERC20Permit":[838],"SafeERC20":[1119]},"id":1120,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":840,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:5"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":841,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1120,"sourceUnit":778,"src":"140:23:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol","file":"../extensions/draft-IERC20Permit.sol","id":842,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1120,"sourceUnit":839,"src":"164:46:5","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":843,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1120,"sourceUnit":1450,"src":"211:36:5","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":844,"nodeType":"StructuredDocumentation","src":"249:457:5","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":1119,"linearizedBaseContracts":[1119],"name":"SafeERC20","nameLocation":"715:9:5","nodeType":"ContractDefinition","nodes":[{"global":false,"id":847,"libraryName":{"id":845,"name":"Address","nameLocations":["737:7:5"],"nodeType":"IdentifierPath","referencedDeclaration":1449,"src":"737:7:5"},"nodeType":"UsingForDirective","src":"731:26:5","typeName":{"id":846,"name":"address","nodeType":"ElementaryTypeName","src":"749:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":869,"nodeType":"Block","src":"865:103:5","statements":[{"expression":{"arguments":[{"id":858,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"895:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":861,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":850,"src":"925:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"931:8:5","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":744,"src":"925:14:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":863,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"940:8:5","memberName":"selector","nodeType":"MemberAccess","src":"925:23:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":864,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"950:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":865,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":854,"src":"954:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":859,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"902:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":860,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"906:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"902:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":866,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"902:58:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":857,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"875:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$777_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":867,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"875:86:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":868,"nodeType":"ExpressionStatement","src":"875:86:5"}]},"id":870,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"772:12:5","nodeType":"FunctionDefinition","parameters":{"id":855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":850,"mutability":"mutable","name":"token","nameLocation":"801:5:5","nodeType":"VariableDeclaration","scope":870,"src":"794:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":849,"nodeType":"UserDefinedTypeName","pathNode":{"id":848,"name":"IERC20","nameLocations":["794:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"794:6:5"},"referencedDeclaration":777,"src":"794:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":852,"mutability":"mutable","name":"to","nameLocation":"824:2:5","nodeType":"VariableDeclaration","scope":870,"src":"816:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":851,"name":"address","nodeType":"ElementaryTypeName","src":"816:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":854,"mutability":"mutable","name":"value","nameLocation":"844:5:5","nodeType":"VariableDeclaration","scope":870,"src":"836:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":853,"name":"uint256","nodeType":"ElementaryTypeName","src":"836:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"784:71:5"},"returnParameters":{"id":856,"nodeType":"ParameterList","parameters":[],"src":"865:0:5"},"scope":1119,"src":"763:205:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":895,"nodeType":"Block","src":"1102:113:5","statements":[{"expression":{"arguments":[{"id":883,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"1132:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":886,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"1162:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1168:12:5","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":776,"src":"1162:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:8:5","memberName":"selector","nodeType":"MemberAccess","src":"1162:27:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":889,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":875,"src":"1191:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":890,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":877,"src":"1197:2:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":891,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":879,"src":"1201:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":884,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1139:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":885,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1143:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1139:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:68:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":882,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"1112:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$777_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":893,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1112:96:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":894,"nodeType":"ExpressionStatement","src":"1112:96:5"}]},"id":896,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"983:16:5","nodeType":"FunctionDefinition","parameters":{"id":880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":873,"mutability":"mutable","name":"token","nameLocation":"1016:5:5","nodeType":"VariableDeclaration","scope":896,"src":"1009:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":872,"nodeType":"UserDefinedTypeName","pathNode":{"id":871,"name":"IERC20","nameLocations":["1009:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"1009:6:5"},"referencedDeclaration":777,"src":"1009:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":875,"mutability":"mutable","name":"from","nameLocation":"1039:4:5","nodeType":"VariableDeclaration","scope":896,"src":"1031:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":874,"name":"address","nodeType":"ElementaryTypeName","src":"1031:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":877,"mutability":"mutable","name":"to","nameLocation":"1061:2:5","nodeType":"VariableDeclaration","scope":896,"src":"1053:10:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":876,"name":"address","nodeType":"ElementaryTypeName","src":"1053:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":879,"mutability":"mutable","name":"value","nameLocation":"1081:5:5","nodeType":"VariableDeclaration","scope":896,"src":"1073:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":878,"name":"uint256","nodeType":"ElementaryTypeName","src":"1073:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"999:93:5"},"returnParameters":{"id":881,"nodeType":"ParameterList","parameters":[],"src":"1102:0:5"},"scope":1119,"src":"974:241:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":939,"nodeType":"Block","src":"1581:497:5","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":923,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":908,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"1830:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1839:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1830:10:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1829:12:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":916,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1870:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1119","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1119","typeString":"library SafeERC20"}],"id":915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1862:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":914,"name":"address","nodeType":"ElementaryTypeName","src":"1862:7:5","typeDescriptions":{}}},"id":917,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1862:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":918,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"1877:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":912,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"1846:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1852:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":754,"src":"1846:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1846:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1889:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1846:44:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":922,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1845:46:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1829:62:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1905:56:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":907,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1808:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":925,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1808:163:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":926,"nodeType":"ExpressionStatement","src":"1808:163:5"},{"expression":{"arguments":[{"id":928,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2001:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":931,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":900,"src":"2031:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":932,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2037:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":764,"src":"2031:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2045:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2031:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":934,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":902,"src":"2055:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":935,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"2064:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":929,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2008:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2012:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2008:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2008:62:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":927,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"1981:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$777_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":937,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1981:90:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":938,"nodeType":"ExpressionStatement","src":"1981:90:5"}]},"documentation":{"id":897,"nodeType":"StructuredDocumentation","src":"1221:249:5","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":940,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1484:11:5","nodeType":"FunctionDefinition","parameters":{"id":905,"nodeType":"ParameterList","parameters":[{"constant":false,"id":900,"mutability":"mutable","name":"token","nameLocation":"1512:5:5","nodeType":"VariableDeclaration","scope":940,"src":"1505:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":899,"nodeType":"UserDefinedTypeName","pathNode":{"id":898,"name":"IERC20","nameLocations":["1505:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"1505:6:5"},"referencedDeclaration":777,"src":"1505:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":902,"mutability":"mutable","name":"spender","nameLocation":"1535:7:5","nodeType":"VariableDeclaration","scope":940,"src":"1527:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"1527:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":904,"mutability":"mutable","name":"value","nameLocation":"1560:5:5","nodeType":"VariableDeclaration","scope":940,"src":"1552:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":903,"name":"uint256","nodeType":"ElementaryTypeName","src":"1552:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1495:76:5"},"returnParameters":{"id":906,"nodeType":"ParameterList","parameters":[],"src":"1581:0:5"},"scope":1119,"src":"1475:603:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":975,"nodeType":"Block","src":"2200:194:5","statements":[{"assignments":[951],"declarations":[{"constant":false,"id":951,"mutability":"mutable","name":"newAllowance","nameLocation":"2218:12:5","nodeType":"VariableDeclaration","scope":975,"src":"2210:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":950,"name":"uint256","nodeType":"ElementaryTypeName","src":"2210:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":962,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":956,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2257:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1119","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1119","typeString":"library SafeERC20"}],"id":955,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2249:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":954,"name":"address","nodeType":"ElementaryTypeName","src":"2249:7:5","typeDescriptions":{}}},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2249:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":958,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2264:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":952,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"2233:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2239:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":754,"src":"2233:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":959,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2233:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":960,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":947,"src":"2275:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2233:47:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2210:70:5"},{"expression":{"arguments":[{"id":964,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"2310:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":967,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":943,"src":"2340:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2346:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":764,"src":"2340:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2354:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2340:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":970,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":945,"src":"2364:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":971,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":951,"src":"2373:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":965,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2317:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":966,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2321:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2317:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2317:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":963,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"2290:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$777_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2290:97:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":974,"nodeType":"ExpressionStatement","src":"2290:97:5"}]},"id":976,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2093:21:5","nodeType":"FunctionDefinition","parameters":{"id":948,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"token","nameLocation":"2131:5:5","nodeType":"VariableDeclaration","scope":976,"src":"2124:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":942,"nodeType":"UserDefinedTypeName","pathNode":{"id":941,"name":"IERC20","nameLocations":["2124:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"2124:6:5"},"referencedDeclaration":777,"src":"2124:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":945,"mutability":"mutable","name":"spender","nameLocation":"2154:7:5","nodeType":"VariableDeclaration","scope":976,"src":"2146:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":944,"name":"address","nodeType":"ElementaryTypeName","src":"2146:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":947,"mutability":"mutable","name":"value","nameLocation":"2179:5:5","nodeType":"VariableDeclaration","scope":976,"src":"2171:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":946,"name":"uint256","nodeType":"ElementaryTypeName","src":"2171:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2114:76:5"},"returnParameters":{"id":949,"nodeType":"ParameterList","parameters":[],"src":"2200:0:5"},"scope":1119,"src":"2084:310:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1023,"nodeType":"Block","src":"2516:370:5","statements":[{"id":1022,"nodeType":"UncheckedBlock","src":"2526:354:5","statements":[{"assignments":[987],"declarations":[{"constant":false,"id":987,"mutability":"mutable","name":"oldAllowance","nameLocation":"2558:12:5","nodeType":"VariableDeclaration","scope":1022,"src":"2550:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":986,"name":"uint256","nodeType":"ElementaryTypeName","src":"2550:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":996,"initialValue":{"arguments":[{"arguments":[{"id":992,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2597:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$1119","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$1119","typeString":"library SafeERC20"}],"id":991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2589:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":990,"name":"address","nodeType":"ElementaryTypeName","src":"2589:7:5","typeDescriptions":{}}},"id":993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2589:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":994,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2604:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":988,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"2573:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2579:9:5","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":754,"src":"2573:15:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2573:39:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2550:62:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":998,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"2634:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":999,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"2650:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2634:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":1001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2657:43:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":997,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2626:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2626:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1003,"nodeType":"ExpressionStatement","src":"2626:75:5"},{"assignments":[1005],"declarations":[{"constant":false,"id":1005,"mutability":"mutable","name":"newAllowance","nameLocation":"2723:12:5","nodeType":"VariableDeclaration","scope":1022,"src":"2715:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"2715:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1009,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1006,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":987,"src":"2738:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":1007,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":983,"src":"2753:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2738:20:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2715:43:5"},{"expression":{"arguments":[{"id":1011,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"2792:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":1014,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":979,"src":"2822:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2828:7:5","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":764,"src":"2822:13:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":1016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2836:8:5","memberName":"selector","nodeType":"MemberAccess","src":"2822:22:5","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":1017,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2846:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1018,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1005,"src":"2855:12:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1012,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2799:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1013,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2803:18:5","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2799:22:5","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2799:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1010,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"2772:19:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$777_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2772:97:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1021,"nodeType":"ExpressionStatement","src":"2772:97:5"}]}]},"id":1024,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"2409:21:5","nodeType":"FunctionDefinition","parameters":{"id":984,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"token","nameLocation":"2447:5:5","nodeType":"VariableDeclaration","scope":1024,"src":"2440:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":978,"nodeType":"UserDefinedTypeName","pathNode":{"id":977,"name":"IERC20","nameLocations":["2440:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"2440:6:5"},"referencedDeclaration":777,"src":"2440:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":981,"mutability":"mutable","name":"spender","nameLocation":"2470:7:5","nodeType":"VariableDeclaration","scope":1024,"src":"2462:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":980,"name":"address","nodeType":"ElementaryTypeName","src":"2462:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":983,"mutability":"mutable","name":"value","nameLocation":"2495:5:5","nodeType":"VariableDeclaration","scope":1024,"src":"2487:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":982,"name":"uint256","nodeType":"ElementaryTypeName","src":"2487:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:76:5"},"returnParameters":{"id":985,"nodeType":"ParameterList","parameters":[],"src":"2516:0:5"},"scope":1119,"src":"2400:486:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1079,"nodeType":"Block","src":"3107:257:5","statements":[{"assignments":[1045],"declarations":[{"constant":false,"id":1045,"mutability":"mutable","name":"nonceBefore","nameLocation":"3125:11:5","nodeType":"VariableDeclaration","scope":1079,"src":"3117:19:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1044,"name":"uint256","nodeType":"ElementaryTypeName","src":"3117:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1050,"initialValue":{"arguments":[{"id":1048,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3152:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1046,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"3139:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$838","typeString":"contract IERC20Permit"}},"id":1047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3145:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":831,"src":"3139:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1049,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3139:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3117:41:5"},{"expression":{"arguments":[{"id":1054,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3181:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1055,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1031,"src":"3188:7:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1056,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1033,"src":"3197:5:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1057,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"3204:8:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1058,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1037,"src":"3214:1:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1059,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"3217:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1060,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1041,"src":"3220:1:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1051,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"3168:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$838","typeString":"contract IERC20Permit"}},"id":1053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3174:6:5","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":823,"src":"3168:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3168:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1062,"nodeType":"ExpressionStatement","src":"3168:54:5"},{"assignments":[1064],"declarations":[{"constant":false,"id":1064,"mutability":"mutable","name":"nonceAfter","nameLocation":"3240:10:5","nodeType":"VariableDeclaration","scope":1079,"src":"3232:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1063,"name":"uint256","nodeType":"ElementaryTypeName","src":"3232:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1069,"initialValue":{"arguments":[{"id":1067,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1029,"src":"3266:5:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1065,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1027,"src":"3253:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$838","typeString":"contract IERC20Permit"}},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3259:6:5","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":831,"src":"3253:12:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":1068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3253:19:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3232:40:5"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1075,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1071,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"3290:10:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1072,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"3304:11:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3318:1:5","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3304:15:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3290:29:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":1076,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3321:35:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":1070,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3282:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3282:75:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1078,"nodeType":"ExpressionStatement","src":"3282:75:5"}]},"id":1080,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"2901:10:5","nodeType":"FunctionDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1027,"mutability":"mutable","name":"token","nameLocation":"2934:5:5","nodeType":"VariableDeclaration","scope":1080,"src":"2921:18:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$838","typeString":"contract IERC20Permit"},"typeName":{"id":1026,"nodeType":"UserDefinedTypeName","pathNode":{"id":1025,"name":"IERC20Permit","nameLocations":["2921:12:5"],"nodeType":"IdentifierPath","referencedDeclaration":838,"src":"2921:12:5"},"referencedDeclaration":838,"src":"2921:12:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$838","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":1029,"mutability":"mutable","name":"owner","nameLocation":"2957:5:5","nodeType":"VariableDeclaration","scope":1080,"src":"2949:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1028,"name":"address","nodeType":"ElementaryTypeName","src":"2949:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1031,"mutability":"mutable","name":"spender","nameLocation":"2980:7:5","nodeType":"VariableDeclaration","scope":1080,"src":"2972:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1030,"name":"address","nodeType":"ElementaryTypeName","src":"2972:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1033,"mutability":"mutable","name":"value","nameLocation":"3005:5:5","nodeType":"VariableDeclaration","scope":1080,"src":"2997:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1032,"name":"uint256","nodeType":"ElementaryTypeName","src":"2997:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1035,"mutability":"mutable","name":"deadline","nameLocation":"3028:8:5","nodeType":"VariableDeclaration","scope":1080,"src":"3020:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"3020:7:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1037,"mutability":"mutable","name":"v","nameLocation":"3052:1:5","nodeType":"VariableDeclaration","scope":1080,"src":"3046:7:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1036,"name":"uint8","nodeType":"ElementaryTypeName","src":"3046:5:5","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1039,"mutability":"mutable","name":"r","nameLocation":"3071:1:5","nodeType":"VariableDeclaration","scope":1080,"src":"3063:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1038,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3063:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1041,"mutability":"mutable","name":"s","nameLocation":"3090:1:5","nodeType":"VariableDeclaration","scope":1080,"src":"3082:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1040,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3082:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2911:186:5"},"returnParameters":{"id":1043,"nodeType":"ParameterList","parameters":[],"src":"3107:0:5"},"scope":1119,"src":"2892:472:5","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1117,"nodeType":"Block","src":"3817:636:5","statements":[{"assignments":[1090],"declarations":[{"constant":false,"id":1090,"mutability":"mutable","name":"returndata","nameLocation":"4179:10:5","nodeType":"VariableDeclaration","scope":1117,"src":"4166:23:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1089,"name":"bytes","nodeType":"ElementaryTypeName","src":"4166:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1099,"initialValue":{"arguments":[{"id":1096,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"4220:4:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":1097,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4226:34:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":1093,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1084,"src":"4200:5:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}],"id":1092,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4192:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1091,"name":"address","nodeType":"ElementaryTypeName","src":"4192:7:5","typeDescriptions":{}}},"id":1094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:14:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4207:12:5","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":1209,"src":"4192:27:5","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4192:69:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4166:95:5"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1100,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"4275:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4286:6:5","memberName":"length","nodeType":"MemberAccess","src":"4275:17:5","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1102,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4295:1:5","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"4275:21:5","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1116,"nodeType":"IfStatement","src":"4271:176:5","trueBody":{"id":1115,"nodeType":"Block","src":"4298:149:5","statements":[{"expression":{"arguments":[{"arguments":[{"id":1107,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"4370:10:5","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":1109,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4383:4:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":1108,"name":"bool","nodeType":"ElementaryTypeName","src":"4383:4:5","typeDescriptions":{}}}],"id":1110,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4382:6:5","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":1105,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4359:3:5","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1106,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4363:6:5","memberName":"decode","nodeType":"MemberAccess","src":"4359:10:5","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4359:30:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":1112,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4391:44:5","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":1104,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4351:7:5","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4351:85:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1114,"nodeType":"ExpressionStatement","src":"4351:85:5"}]}}]},"documentation":{"id":1081,"nodeType":"StructuredDocumentation","src":"3370:372:5","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":1118,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"3756:19:5","nodeType":"FunctionDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1084,"mutability":"mutable","name":"token","nameLocation":"3783:5:5","nodeType":"VariableDeclaration","scope":1118,"src":"3776:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":1083,"nodeType":"UserDefinedTypeName","pathNode":{"id":1082,"name":"IERC20","nameLocations":["3776:6:5"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"3776:6:5"},"referencedDeclaration":777,"src":"3776:6:5","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":1086,"mutability":"mutable","name":"data","nameLocation":"3803:4:5","nodeType":"VariableDeclaration","scope":1118,"src":"3790:17:5","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1085,"name":"bytes","nodeType":"ElementaryTypeName","src":"3790:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:33:5"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[],"src":"3817:0:5"},"scope":1119,"src":"3747:706:5","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":1120,"src":"707:3748:5","usedErrors":[]}],"src":"115:4341:5"},"id":5},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[1449]},"id":1450,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1121,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:6"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":1122,"nodeType":"StructuredDocumentation","src":"126:67:6","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":1449,"linearizedBaseContracts":[1449],"name":"Address","nameLocation":"202:7:6","nodeType":"ContractDefinition","nodes":[{"body":{"id":1136,"nodeType":"Block","src":"1241:254:6","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1130,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1125,"src":"1465:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1473:4:6","memberName":"code","nodeType":"MemberAccess","src":"1465:12:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1478:6:6","memberName":"length","nodeType":"MemberAccess","src":"1465:19:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1487:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1465:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1129,"id":1135,"nodeType":"Return","src":"1458:30:6"}]},"documentation":{"id":1123,"nodeType":"StructuredDocumentation","src":"216:954:6","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":1137,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1184:10:6","nodeType":"FunctionDefinition","parameters":{"id":1126,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1125,"mutability":"mutable","name":"account","nameLocation":"1203:7:6","nodeType":"VariableDeclaration","scope":1137,"src":"1195:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1124,"name":"address","nodeType":"ElementaryTypeName","src":"1195:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1194:17:6"},"returnParameters":{"id":1129,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1128,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1137,"src":"1235:4:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1127,"name":"bool","nodeType":"ElementaryTypeName","src":"1235:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1234:6:6"},"scope":1449,"src":"1175:320:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1170,"nodeType":"Block","src":"2483:241:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1148,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2509:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1449","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1449","typeString":"library Address"}],"id":1147,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2501:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1146,"name":"address","nodeType":"ElementaryTypeName","src":"2501:7:6","typeDescriptions":{}}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2501:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2515:7:6","memberName":"balance","nodeType":"MemberAccess","src":"2501:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1151,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"2526:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2501:31:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":1153,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2534:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":1145,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2493:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2493:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1155,"nodeType":"ExpressionStatement","src":"2493:73:6"},{"assignments":[1157,null],"declarations":[{"constant":false,"id":1157,"mutability":"mutable","name":"success","nameLocation":"2583:7:6","nodeType":"VariableDeclaration","scope":1170,"src":"2578:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1156,"name":"bool","nodeType":"ElementaryTypeName","src":"2578:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":1164,"initialValue":{"arguments":[{"hexValue":"","id":1162,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2626:2:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":1158,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"2596:9:6","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1159,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2606:4:6","memberName":"call","nodeType":"MemberAccess","src":"2596:14:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1160,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1142,"src":"2618:6:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2596:29:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2596:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2577:52:6"},{"expression":{"arguments":[{"id":1166,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1157,"src":"2647:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2656:60:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":1165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2639:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2639:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1169,"nodeType":"ExpressionStatement","src":"2639:78:6"}]},"documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"1501:906:6","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":1171,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2421:9:6","nodeType":"FunctionDefinition","parameters":{"id":1143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"recipient","nameLocation":"2447:9:6","nodeType":"VariableDeclaration","scope":1171,"src":"2431:25:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1139,"name":"address","nodeType":"ElementaryTypeName","src":"2431:15:6","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":1142,"mutability":"mutable","name":"amount","nameLocation":"2466:6:6","nodeType":"VariableDeclaration","scope":1171,"src":"2458:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1141,"name":"uint256","nodeType":"ElementaryTypeName","src":"2458:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2430:43:6"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[],"src":"2483:0:6"},"scope":1449,"src":"2412:312:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1188,"nodeType":"Block","src":"3555:96:6","statements":[{"expression":{"arguments":[{"id":1182,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1174,"src":"3594:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1183,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"3602:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1184,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3608:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3611:32:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":1181,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1229,1273],"referencedDeclaration":1273,"src":"3572:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3572:72:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1180,"id":1187,"nodeType":"Return","src":"3565:79:6"}]},"documentation":{"id":1172,"nodeType":"StructuredDocumentation","src":"2730:731:6","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":1189,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3475:12:6","nodeType":"FunctionDefinition","parameters":{"id":1177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1174,"mutability":"mutable","name":"target","nameLocation":"3496:6:6","nodeType":"VariableDeclaration","scope":1189,"src":"3488:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1173,"name":"address","nodeType":"ElementaryTypeName","src":"3488:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1176,"mutability":"mutable","name":"data","nameLocation":"3517:4:6","nodeType":"VariableDeclaration","scope":1189,"src":"3504:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1175,"name":"bytes","nodeType":"ElementaryTypeName","src":"3504:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3487:35:6"},"returnParameters":{"id":1180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1179,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1189,"src":"3541:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1178,"name":"bytes","nodeType":"ElementaryTypeName","src":"3541:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3540:14:6"},"scope":1449,"src":"3466:185:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1208,"nodeType":"Block","src":"4020:76:6","statements":[{"expression":{"arguments":[{"id":1202,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1192,"src":"4059:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1203,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1194,"src":"4067:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":1204,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4073:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":1205,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1196,"src":"4076:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1201,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1229,1273],"referencedDeclaration":1273,"src":"4037:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4037:52:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1200,"id":1207,"nodeType":"Return","src":"4030:59:6"}]},"documentation":{"id":1190,"nodeType":"StructuredDocumentation","src":"3657:211:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1209,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3882:12:6","nodeType":"FunctionDefinition","parameters":{"id":1197,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1192,"mutability":"mutable","name":"target","nameLocation":"3912:6:6","nodeType":"VariableDeclaration","scope":1209,"src":"3904:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1191,"name":"address","nodeType":"ElementaryTypeName","src":"3904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1194,"mutability":"mutable","name":"data","nameLocation":"3941:4:6","nodeType":"VariableDeclaration","scope":1209,"src":"3928:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1193,"name":"bytes","nodeType":"ElementaryTypeName","src":"3928:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1196,"mutability":"mutable","name":"errorMessage","nameLocation":"3969:12:6","nodeType":"VariableDeclaration","scope":1209,"src":"3955:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1195,"name":"string","nodeType":"ElementaryTypeName","src":"3955:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3894:93:6"},"returnParameters":{"id":1200,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1199,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1209,"src":"4006:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1198,"name":"bytes","nodeType":"ElementaryTypeName","src":"4006:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4005:14:6"},"scope":1449,"src":"3873:223:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1228,"nodeType":"Block","src":"4601:111:6","statements":[{"expression":{"arguments":[{"id":1222,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1212,"src":"4640:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1223,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1214,"src":"4648:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1224,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1216,"src":"4654:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":1225,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4661:43:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":1221,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[1229,1273],"referencedDeclaration":1273,"src":"4618:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":1226,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:87:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1220,"id":1227,"nodeType":"Return","src":"4611:94:6"}]},"documentation":{"id":1210,"nodeType":"StructuredDocumentation","src":"4102:351:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":1229,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4467:21:6","nodeType":"FunctionDefinition","parameters":{"id":1217,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1212,"mutability":"mutable","name":"target","nameLocation":"4506:6:6","nodeType":"VariableDeclaration","scope":1229,"src":"4498:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1211,"name":"address","nodeType":"ElementaryTypeName","src":"4498:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1214,"mutability":"mutable","name":"data","nameLocation":"4535:4:6","nodeType":"VariableDeclaration","scope":1229,"src":"4522:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1213,"name":"bytes","nodeType":"ElementaryTypeName","src":"4522:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1216,"mutability":"mutable","name":"value","nameLocation":"4557:5:6","nodeType":"VariableDeclaration","scope":1229,"src":"4549:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1215,"name":"uint256","nodeType":"ElementaryTypeName","src":"4549:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4488:80:6"},"returnParameters":{"id":1220,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1219,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1229,"src":"4587:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1218,"name":"bytes","nodeType":"ElementaryTypeName","src":"4587:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4586:14:6"},"scope":1449,"src":"4458:254:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1272,"nodeType":"Block","src":"5139:267:6","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1246,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5165:4:6","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$1449","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$1449","typeString":"library Address"}],"id":1245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5157:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1244,"name":"address","nodeType":"ElementaryTypeName","src":"5157:7:6","typeDescriptions":{}}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5157:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5171:7:6","memberName":"balance","nodeType":"MemberAccess","src":"5157:21:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1249,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5182:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5157:30:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":1251,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5189:40:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":1243,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5149:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5149:81:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1253,"nodeType":"ExpressionStatement","src":"5149:81:6"},{"assignments":[1255,1257],"declarations":[{"constant":false,"id":1255,"mutability":"mutable","name":"success","nameLocation":"5246:7:6","nodeType":"VariableDeclaration","scope":1272,"src":"5241:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1254,"name":"bool","nodeType":"ElementaryTypeName","src":"5241:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1257,"mutability":"mutable","name":"returndata","nameLocation":"5268:10:6","nodeType":"VariableDeclaration","scope":1272,"src":"5255:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1256,"name":"bytes","nodeType":"ElementaryTypeName","src":"5255:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1264,"initialValue":{"arguments":[{"id":1262,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1234,"src":"5308:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1258,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"5282:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5289:4:6","memberName":"call","nodeType":"MemberAccess","src":"5282:11:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":1260,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"5301:5:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5282:25:6","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":1263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5282:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5240:73:6"},{"expression":{"arguments":[{"id":1266,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1232,"src":"5357:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1267,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1255,"src":"5365:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1268,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1257,"src":"5374:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1269,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"5386:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1265,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"5330:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5330:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1242,"id":1271,"nodeType":"Return","src":"5323:76:6"}]},"documentation":{"id":1230,"nodeType":"StructuredDocumentation","src":"4718:237:6","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":1273,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4969:21:6","nodeType":"FunctionDefinition","parameters":{"id":1239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1232,"mutability":"mutable","name":"target","nameLocation":"5008:6:6","nodeType":"VariableDeclaration","scope":1273,"src":"5000:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1231,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1234,"mutability":"mutable","name":"data","nameLocation":"5037:4:6","nodeType":"VariableDeclaration","scope":1273,"src":"5024:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1233,"name":"bytes","nodeType":"ElementaryTypeName","src":"5024:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1236,"mutability":"mutable","name":"value","nameLocation":"5059:5:6","nodeType":"VariableDeclaration","scope":1273,"src":"5051:13:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1235,"name":"uint256","nodeType":"ElementaryTypeName","src":"5051:7:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1238,"mutability":"mutable","name":"errorMessage","nameLocation":"5088:12:6","nodeType":"VariableDeclaration","scope":1273,"src":"5074:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1237,"name":"string","nodeType":"ElementaryTypeName","src":"5074:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4990:116:6"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1273,"src":"5125:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1240,"name":"bytes","nodeType":"ElementaryTypeName","src":"5125:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5124:14:6"},"scope":1449,"src":"4960:446:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1289,"nodeType":"Block","src":"5683:97:6","statements":[{"expression":{"arguments":[{"id":1284,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1276,"src":"5719:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1285,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1278,"src":"5727:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":1286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5733:39:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":1283,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[1290,1319],"referencedDeclaration":1319,"src":"5700:18:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5700:73:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1282,"id":1288,"nodeType":"Return","src":"5693:80:6"}]},"documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"5412:166:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1290,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5592:18:6","nodeType":"FunctionDefinition","parameters":{"id":1279,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"mutability":"mutable","name":"target","nameLocation":"5619:6:6","nodeType":"VariableDeclaration","scope":1290,"src":"5611:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"5611:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1278,"mutability":"mutable","name":"data","nameLocation":"5640:4:6","nodeType":"VariableDeclaration","scope":1290,"src":"5627:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1277,"name":"bytes","nodeType":"ElementaryTypeName","src":"5627:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5610:35:6"},"returnParameters":{"id":1282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1281,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1290,"src":"5669:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1280,"name":"bytes","nodeType":"ElementaryTypeName","src":"5669:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5668:14:6"},"scope":1449,"src":"5583:197:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1318,"nodeType":"Block","src":"6122:168:6","statements":[{"assignments":[1303,1305],"declarations":[{"constant":false,"id":1303,"mutability":"mutable","name":"success","nameLocation":"6138:7:6","nodeType":"VariableDeclaration","scope":1318,"src":"6133:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1302,"name":"bool","nodeType":"ElementaryTypeName","src":"6133:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1305,"mutability":"mutable","name":"returndata","nameLocation":"6160:10:6","nodeType":"VariableDeclaration","scope":1318,"src":"6147:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1304,"name":"bytes","nodeType":"ElementaryTypeName","src":"6147:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1310,"initialValue":{"arguments":[{"id":1308,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1295,"src":"6192:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1306,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"6174:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6181:10:6","memberName":"staticcall","nodeType":"MemberAccess","src":"6174:17:6","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":1309,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6132:65:6"},{"expression":{"arguments":[{"id":1312,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1293,"src":"6241:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1313,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1303,"src":"6249:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1314,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1305,"src":"6258:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1315,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1297,"src":"6270:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1311,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"6214:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6214:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1301,"id":1317,"nodeType":"Return","src":"6207:76:6"}]},"documentation":{"id":1291,"nodeType":"StructuredDocumentation","src":"5786:173:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":1319,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5973:18:6","nodeType":"FunctionDefinition","parameters":{"id":1298,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1293,"mutability":"mutable","name":"target","nameLocation":"6009:6:6","nodeType":"VariableDeclaration","scope":1319,"src":"6001:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1292,"name":"address","nodeType":"ElementaryTypeName","src":"6001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1295,"mutability":"mutable","name":"data","nameLocation":"6038:4:6","nodeType":"VariableDeclaration","scope":1319,"src":"6025:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1294,"name":"bytes","nodeType":"ElementaryTypeName","src":"6025:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1297,"mutability":"mutable","name":"errorMessage","nameLocation":"6066:12:6","nodeType":"VariableDeclaration","scope":1319,"src":"6052:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1296,"name":"string","nodeType":"ElementaryTypeName","src":"6052:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5991:93:6"},"returnParameters":{"id":1301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1319,"src":"6108:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1299,"name":"bytes","nodeType":"ElementaryTypeName","src":"6108:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6107:14:6"},"scope":1449,"src":"5964:326:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1335,"nodeType":"Block","src":"6566:101:6","statements":[{"expression":{"arguments":[{"id":1330,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1322,"src":"6604:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1331,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1324,"src":"6612:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":1332,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6618:41:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":1329,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[1336,1365],"referencedDeclaration":1365,"src":"6583:20:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":1333,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6583:77:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1328,"id":1334,"nodeType":"Return","src":"6576:84:6"}]},"documentation":{"id":1320,"nodeType":"StructuredDocumentation","src":"6296:168:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1336,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6478:20:6","nodeType":"FunctionDefinition","parameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1322,"mutability":"mutable","name":"target","nameLocation":"6507:6:6","nodeType":"VariableDeclaration","scope":1336,"src":"6499:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"6499:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1324,"mutability":"mutable","name":"data","nameLocation":"6528:4:6","nodeType":"VariableDeclaration","scope":1336,"src":"6515:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1323,"name":"bytes","nodeType":"ElementaryTypeName","src":"6515:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6498:35:6"},"returnParameters":{"id":1328,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1327,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1336,"src":"6552:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1326,"name":"bytes","nodeType":"ElementaryTypeName","src":"6552:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6551:14:6"},"scope":1449,"src":"6469:198:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1364,"nodeType":"Block","src":"7008:170:6","statements":[{"assignments":[1349,1351],"declarations":[{"constant":false,"id":1349,"mutability":"mutable","name":"success","nameLocation":"7024:7:6","nodeType":"VariableDeclaration","scope":1364,"src":"7019:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1348,"name":"bool","nodeType":"ElementaryTypeName","src":"7019:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1351,"mutability":"mutable","name":"returndata","nameLocation":"7046:10:6","nodeType":"VariableDeclaration","scope":1364,"src":"7033:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1350,"name":"bytes","nodeType":"ElementaryTypeName","src":"7033:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1356,"initialValue":{"arguments":[{"id":1354,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1341,"src":"7080:4:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1352,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"7060:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7067:12:6","memberName":"delegatecall","nodeType":"MemberAccess","src":"7060:19:6","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":1355,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7060:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7018:67:6"},{"expression":{"arguments":[{"id":1358,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1339,"src":"7129:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1359,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1349,"src":"7137:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":1360,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"7146:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1361,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1343,"src":"7158:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1357,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"7102:26:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":1362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7102:69:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1347,"id":1363,"nodeType":"Return","src":"7095:76:6"}]},"documentation":{"id":1337,"nodeType":"StructuredDocumentation","src":"6673:175:6","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6862:20:6","nodeType":"FunctionDefinition","parameters":{"id":1344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"target","nameLocation":"6900:6:6","nodeType":"VariableDeclaration","scope":1365,"src":"6892:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1338,"name":"address","nodeType":"ElementaryTypeName","src":"6892:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1341,"mutability":"mutable","name":"data","nameLocation":"6929:4:6","nodeType":"VariableDeclaration","scope":1365,"src":"6916:17:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1340,"name":"bytes","nodeType":"ElementaryTypeName","src":"6916:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1343,"mutability":"mutable","name":"errorMessage","nameLocation":"6957:12:6","nodeType":"VariableDeclaration","scope":1365,"src":"6943:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1342,"name":"string","nodeType":"ElementaryTypeName","src":"6943:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6882:93:6"},"returnParameters":{"id":1347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1365,"src":"6994:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1345,"name":"bytes","nodeType":"ElementaryTypeName","src":"6994:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6993:14:6"},"scope":1449,"src":"6853:325:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1403,"nodeType":"Block","src":"7660:434:6","statements":[{"condition":{"id":1379,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"7674:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1401,"nodeType":"Block","src":"8030:58:6","statements":[{"expression":{"arguments":[{"id":1397,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"8052:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1398,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"8064:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1396,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"8044:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1399,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8044:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1400,"nodeType":"ExpressionStatement","src":"8044:33:6"}]},"id":1402,"nodeType":"IfStatement","src":"7670:418:6","trueBody":{"id":1395,"nodeType":"Block","src":"7683:341:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1380,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"7701:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7712:6:6","memberName":"length","nodeType":"MemberAccess","src":"7701:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7722:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7701:22:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1392,"nodeType":"IfStatement","src":"7697:286:6","trueBody":{"id":1391,"nodeType":"Block","src":"7725:258:6","statements":[{"expression":{"arguments":[{"arguments":[{"id":1386,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"7927:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1385,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1137,"src":"7916:10:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":1387,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7916:18:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":1388,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7936:31:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":1384,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"7908:7:6","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:60:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1390,"nodeType":"ExpressionStatement","src":"7908:60:6"}]}},{"expression":{"id":1393,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"8003:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1378,"id":1394,"nodeType":"Return","src":"7996:17:6"}]}}]},"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"7184:277:6","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":1404,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7475:26:6","nodeType":"FunctionDefinition","parameters":{"id":1375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"target","nameLocation":"7519:6:6","nodeType":"VariableDeclaration","scope":1404,"src":"7511:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"7511:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"success","nameLocation":"7540:7:6","nodeType":"VariableDeclaration","scope":1404,"src":"7535:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1369,"name":"bool","nodeType":"ElementaryTypeName","src":"7535:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1372,"mutability":"mutable","name":"returndata","nameLocation":"7570:10:6","nodeType":"VariableDeclaration","scope":1404,"src":"7557:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1371,"name":"bytes","nodeType":"ElementaryTypeName","src":"7557:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"errorMessage","nameLocation":"7604:12:6","nodeType":"VariableDeclaration","scope":1404,"src":"7590:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1373,"name":"string","nodeType":"ElementaryTypeName","src":"7590:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7501:121:6"},"returnParameters":{"id":1378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1377,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1404,"src":"7646:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1376,"name":"bytes","nodeType":"ElementaryTypeName","src":"7646:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7645:14:6"},"scope":1449,"src":"7466:628:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1427,"nodeType":"Block","src":"8475:135:6","statements":[{"condition":{"id":1416,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"8489:7:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1425,"nodeType":"Block","src":"8546:58:6","statements":[{"expression":{"arguments":[{"id":1421,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"8568:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":1422,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"8580:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1420,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1448,"src":"8560:7:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8560:33:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1424,"nodeType":"ExpressionStatement","src":"8560:33:6"}]},"id":1426,"nodeType":"IfStatement","src":"8485:119:6","trueBody":{"id":1419,"nodeType":"Block","src":"8498:42:6","statements":[{"expression":{"id":1417,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"8519:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":1415,"id":1418,"nodeType":"Return","src":"8512:17:6"}]}}]},"documentation":{"id":1405,"nodeType":"StructuredDocumentation","src":"8100:210:6","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":1428,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8324:16:6","nodeType":"FunctionDefinition","parameters":{"id":1412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1407,"mutability":"mutable","name":"success","nameLocation":"8355:7:6","nodeType":"VariableDeclaration","scope":1428,"src":"8350:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1406,"name":"bool","nodeType":"ElementaryTypeName","src":"8350:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":1409,"mutability":"mutable","name":"returndata","nameLocation":"8385:10:6","nodeType":"VariableDeclaration","scope":1428,"src":"8372:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1408,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"errorMessage","nameLocation":"8419:12:6","nodeType":"VariableDeclaration","scope":1428,"src":"8405:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1410,"name":"string","nodeType":"ElementaryTypeName","src":"8405:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8340:97:6"},"returnParameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1428,"src":"8461:12:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1413,"name":"bytes","nodeType":"ElementaryTypeName","src":"8461:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8460:14:6"},"scope":1449,"src":"8315:295:6","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1447,"nodeType":"Block","src":"8699:457:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1435,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"8775:10:6","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8786:6:6","memberName":"length","nodeType":"MemberAccess","src":"8775:17:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8795:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8775:21:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1445,"nodeType":"Block","src":"9105:45:6","statements":[{"expression":{"arguments":[{"id":1442,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"9126:12:6","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1441,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9119:6:6","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9119:20:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1444,"nodeType":"ExpressionStatement","src":"9119:20:6"}]},"id":1446,"nodeType":"IfStatement","src":"8771:379:6","trueBody":{"id":1440,"nodeType":"Block","src":"8798:301:6","statements":[{"AST":{"nodeType":"YulBlock","src":"8956:133:6","statements":[{"nodeType":"YulVariableDeclaration","src":"8974:40:6","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9003:10:6"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8997:5:6"},"nodeType":"YulFunctionCall","src":"8997:17:6"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"8978:15:6","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9042:2:6","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9046:10:6"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9038:3:6"},"nodeType":"YulFunctionCall","src":"9038:19:6"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9059:15:6"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9031:6:6"},"nodeType":"YulFunctionCall","src":"9031:44:6"},"nodeType":"YulExpressionStatement","src":"9031:44:6"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1430,"isOffset":false,"isSlot":false,"src":"9003:10:6","valueSize":1},{"declaration":1430,"isOffset":false,"isSlot":false,"src":"9046:10:6","valueSize":1}],"id":1439,"nodeType":"InlineAssembly","src":"8947:142:6"}]}}]},"id":1448,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8625:7:6","nodeType":"FunctionDefinition","parameters":{"id":1433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"returndata","nameLocation":"8646:10:6","nodeType":"VariableDeclaration","scope":1448,"src":"8633:23:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1429,"name":"bytes","nodeType":"ElementaryTypeName","src":"8633:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"errorMessage","nameLocation":"8672:12:6","nodeType":"VariableDeclaration","scope":1448,"src":"8658:26:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1431,"name":"string","nodeType":"ElementaryTypeName","src":"8658:6:6","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8632:53:6"},"returnParameters":{"id":1434,"nodeType":"ParameterList","parameters":[],"src":"8699:0:6"},"scope":1449,"src":"8616:540:6","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":1450,"src":"194:8964:6","usedErrors":[]}],"src":"101:9058:6"},"id":6},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[1471]},"id":1472,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1451,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:7"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":1452,"nodeType":"StructuredDocumentation","src":"111:496:7","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":1471,"linearizedBaseContracts":[1471],"name":"Context","nameLocation":"626:7:7","nodeType":"ContractDefinition","nodes":[{"body":{"id":1460,"nodeType":"Block","src":"702:34:7","statements":[{"expression":{"expression":{"id":1457,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:7","memberName":"sender","nodeType":"MemberAccess","src":"719:10:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1456,"id":1459,"nodeType":"Return","src":"712:17:7"}]},"id":1461,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:7","nodeType":"FunctionDefinition","parameters":{"id":1453,"nodeType":"ParameterList","parameters":[],"src":"659:2:7"},"returnParameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1455,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1461,"src":"693:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1454,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:7"},"scope":1471,"src":"640:96:7","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1469,"nodeType":"Block","src":"809:32:7","statements":[{"expression":{"expression":{"id":1466,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:7","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:7","memberName":"data","nodeType":"MemberAccess","src":"826:8:7","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1465,"id":1468,"nodeType":"Return","src":"819:15:7"}]},"id":1470,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:7","nodeType":"FunctionDefinition","parameters":{"id":1462,"nodeType":"ParameterList","parameters":[],"src":"759:2:7"},"returnParameters":{"id":1465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1464,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1470,"src":"793:14:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1463,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:7"},"scope":1471,"src":"742:99:7","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1472,"src":"608:235:7","usedErrors":[]}],"src":"86:758:7"},"id":7},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2872],"Strings":[1646]},"id":1647,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1473,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:8"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1474,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1647,"sourceUnit":2873,"src":"126:25:8","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1475,"nodeType":"StructuredDocumentation","src":"153:34:8","text":" @dev String operations."},"fullyImplemented":true,"id":1646,"linearizedBaseContracts":[1646],"name":"Strings","nameLocation":"196:7:8","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1478,"mutability":"constant","name":"_SYMBOLS","nameLocation":"235:8:8","nodeType":"VariableDeclaration","scope":1646,"src":"210:54:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1476,"name":"bytes16","nodeType":"ElementaryTypeName","src":"210:7:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"246:18:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1481,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"293:15:8","nodeType":"VariableDeclaration","scope":1646,"src":"270:43:8","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1479,"name":"uint8","nodeType":"ElementaryTypeName","src":"270:5:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1480,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"311:2:8","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1528,"nodeType":"Block","src":"486:625:8","statements":[{"id":1527,"nodeType":"UncheckedBlock","src":"496:609:8","statements":[{"assignments":[1490],"declarations":[{"constant":false,"id":1490,"mutability":"mutable","name":"length","nameLocation":"528:6:8","nodeType":"VariableDeclaration","scope":1527,"src":"520:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1489,"name":"uint256","nodeType":"ElementaryTypeName","src":"520:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1497,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"548:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1491,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"537:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2872_$","typeString":"type(library Math)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"542:5:8","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2709,"src":"537:10:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1494,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"537:17:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"557:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"537:21:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"520:38:8"},{"assignments":[1499],"declarations":[{"constant":false,"id":1499,"mutability":"mutable","name":"buffer","nameLocation":"586:6:8","nodeType":"VariableDeclaration","scope":1527,"src":"572:20:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1498,"name":"string","nodeType":"ElementaryTypeName","src":"572:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1504,"initialValue":{"arguments":[{"id":1502,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"606:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"595:10:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1500,"name":"string","nodeType":"ElementaryTypeName","src":"599:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"595:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"572:41:8"},{"assignments":[1506],"declarations":[{"constant":false,"id":1506,"mutability":"mutable","name":"ptr","nameLocation":"635:3:8","nodeType":"VariableDeclaration","scope":1527,"src":"627:11:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1505,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1507,"nodeType":"VariableDeclarationStatement","src":"627:11:8"},{"AST":{"nodeType":"YulBlock","src":"708:67:8","statements":[{"nodeType":"YulAssignment","src":"726:35:8","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"737:6:8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"749:2:8","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"753:6:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"745:3:8"},"nodeType":"YulFunctionCall","src":"745:15:8"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"733:3:8"},"nodeType":"YulFunctionCall","src":"733:28:8"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"726:3:8"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1499,"isOffset":false,"isSlot":false,"src":"737:6:8","valueSize":1},{"declaration":1490,"isOffset":false,"isSlot":false,"src":"753:6:8","valueSize":1},{"declaration":1506,"isOffset":false,"isSlot":false,"src":"726:3:8","valueSize":1}],"id":1508,"nodeType":"InlineAssembly","src":"699:76:8"},{"body":{"id":1523,"nodeType":"Block","src":"801:267:8","statements":[{"expression":{"id":1511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"819:5:8","subExpression":{"id":1510,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1506,"src":"819:3:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1512,"nodeType":"ExpressionStatement","src":"819:5:8"},{"AST":{"nodeType":"YulBlock","src":"902:84:8","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"932:3:8"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"946:5:8"},{"kind":"number","nodeType":"YulLiteral","src":"953:2:8","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"942:3:8"},"nodeType":"YulFunctionCall","src":"942:14:8"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"958:8:8"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"937:4:8"},"nodeType":"YulFunctionCall","src":"937:30:8"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"924:7:8"},"nodeType":"YulFunctionCall","src":"924:44:8"},"nodeType":"YulExpressionStatement","src":"924:44:8"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1478,"isOffset":false,"isSlot":false,"src":"958:8:8","valueSize":1},{"declaration":1506,"isOffset":false,"isSlot":false,"src":"932:3:8","valueSize":1},{"declaration":1484,"isOffset":false,"isSlot":false,"src":"946:5:8","valueSize":1}],"id":1513,"nodeType":"InlineAssembly","src":"893:93:8"},{"expression":{"id":1516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"1003:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1012:2:8","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1003:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1517,"nodeType":"ExpressionStatement","src":"1003:11:8"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1518,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"1036:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1519,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1045:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1036:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1522,"nodeType":"IfStatement","src":"1032:21:8","trueBody":{"id":1521,"nodeType":"Break","src":"1048:5:8"}}]},"condition":{"hexValue":"74727565","id":1509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"795:4:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1524,"nodeType":"WhileStatement","src":"788:280:8"},{"expression":{"id":1525,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1499,"src":"1088:6:8","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1488,"id":1526,"nodeType":"Return","src":"1081:13:8"}]}]},"documentation":{"id":1482,"nodeType":"StructuredDocumentation","src":"320:90:8","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1529,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"424:8:8","nodeType":"FunctionDefinition","parameters":{"id":1485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"value","nameLocation":"441:5:8","nodeType":"VariableDeclaration","scope":1529,"src":"433:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1483,"name":"uint256","nodeType":"ElementaryTypeName","src":"433:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"432:15:8"},"returnParameters":{"id":1488,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1487,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1529,"src":"471:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1486,"name":"string","nodeType":"ElementaryTypeName","src":"471:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"470:15:8"},"scope":1646,"src":"415:696:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1548,"nodeType":"Block","src":"1290:100:8","statements":[{"id":1547,"nodeType":"UncheckedBlock","src":"1300:84:8","statements":[{"expression":{"arguments":[{"id":1538,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"1343:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1541,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1532,"src":"1362:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1539,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"1350:4:8","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2872_$","typeString":"type(library Math)"}},"id":1540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1355:6:8","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2832,"src":"1350:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1542,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1350:18:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1543,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1371:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1350:22:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1537,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1549,1625,1645],"referencedDeclaration":1625,"src":"1331:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1331:42:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1536,"id":1546,"nodeType":"Return","src":"1324:49:8"}]}]},"documentation":{"id":1530,"nodeType":"StructuredDocumentation","src":"1117:94:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1549,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1225:11:8","nodeType":"FunctionDefinition","parameters":{"id":1533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1532,"mutability":"mutable","name":"value","nameLocation":"1245:5:8","nodeType":"VariableDeclaration","scope":1549,"src":"1237:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1531,"name":"uint256","nodeType":"ElementaryTypeName","src":"1237:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1236:15:8"},"returnParameters":{"id":1536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1549,"src":"1275:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1534,"name":"string","nodeType":"ElementaryTypeName","src":"1275:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1274:15:8"},"scope":1646,"src":"1216:174:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1624,"nodeType":"Block","src":"1603:347:8","statements":[{"assignments":[1560],"declarations":[{"constant":false,"id":1560,"mutability":"mutable","name":"buffer","nameLocation":"1626:6:8","nodeType":"VariableDeclaration","scope":1624,"src":"1613:19:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1559,"name":"bytes","nodeType":"ElementaryTypeName","src":"1613:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1569,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1567,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1563,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1645:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1564,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"1649:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1645:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1658:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1645:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1562,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1635:9:8","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1561,"name":"bytes","nodeType":"ElementaryTypeName","src":"1639:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1635:25:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1613:47:8"},{"expression":{"id":1574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1570,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1670:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1572,"indexExpression":{"hexValue":"30","id":1571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1677:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1670:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1682:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1670:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1575,"nodeType":"ExpressionStatement","src":"1670:15:8"},{"expression":{"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1576,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1695:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1578,"indexExpression":{"hexValue":"31","id":1577,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1702:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1695:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1707:3:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"1695:15:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1581,"nodeType":"ExpressionStatement","src":"1695:15:8"},{"body":{"id":1610,"nodeType":"Block","src":"1765:83:8","statements":[{"expression":{"id":1604,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1596,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1779:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1598,"indexExpression":{"id":1597,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1786:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1779:9:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1599,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1478,"src":"1791:8:8","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1603,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1600,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1800:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1808:3:8","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"1800:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1791:21:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"1779:33:8","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1605,"nodeType":"ExpressionStatement","src":"1779:33:8"},{"expression":{"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1826:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1607,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1836:1:8","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"1826:11:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1609,"nodeType":"ExpressionStatement","src":"1826:11:8"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1590,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1753:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1591,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1757:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1753:5:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1611,"initializationExpression":{"assignments":[1583],"declarations":[{"constant":false,"id":1583,"mutability":"mutable","name":"i","nameLocation":"1733:1:8","nodeType":"VariableDeclaration","scope":1611,"src":"1725:9:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"1725:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1589,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1588,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1586,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1737:1:8","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1585,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"1741:6:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1737:10:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1750:1:8","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1737:14:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1725:26:8"},"loopExpression":{"expression":{"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"1760:3:8","subExpression":{"id":1593,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"1762:1:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1595,"nodeType":"ExpressionStatement","src":"1760:3:8"},"nodeType":"ForStatement","src":"1720:128:8"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1615,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1613,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"1865:5:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1614,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1874:1:8","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1865:10:8","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1877:34:8","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1612,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1857:7:8","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1857:55:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1618,"nodeType":"ExpressionStatement","src":"1857:55:8"},{"expression":{"arguments":[{"id":1621,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1560,"src":"1936:6:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1620,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1929:6:8","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1619,"name":"string","nodeType":"ElementaryTypeName","src":"1929:6:8","typeDescriptions":{}}},"id":1622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1929:14:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1558,"id":1623,"nodeType":"Return","src":"1922:21:8"}]},"documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"1396:112:8","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1625,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1522:11:8","nodeType":"FunctionDefinition","parameters":{"id":1555,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1552,"mutability":"mutable","name":"value","nameLocation":"1542:5:8","nodeType":"VariableDeclaration","scope":1625,"src":"1534:13:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1551,"name":"uint256","nodeType":"ElementaryTypeName","src":"1534:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"length","nameLocation":"1557:6:8","nodeType":"VariableDeclaration","scope":1625,"src":"1549:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1553,"name":"uint256","nodeType":"ElementaryTypeName","src":"1549:7:8","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1533:31:8"},"returnParameters":{"id":1558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1557,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1625,"src":"1588:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1556,"name":"string","nodeType":"ElementaryTypeName","src":"1588:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1587:15:8"},"scope":1646,"src":"1513:437:8","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1644,"nodeType":"Block","src":"2175:76:8","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1638,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"2220:4:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1637,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2212:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1636,"name":"uint160","nodeType":"ElementaryTypeName","src":"2212:7:8","typeDescriptions":{}}},"id":1639,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2212:13:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1635,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2204:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1634,"name":"uint256","nodeType":"ElementaryTypeName","src":"2204:7:8","typeDescriptions":{}}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2204:22:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1641,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"2228:15:8","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1633,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1549,1625,1645],"referencedDeclaration":1625,"src":"2192:11:8","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2192:52:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1632,"id":1643,"nodeType":"Return","src":"2185:59:8"}]},"documentation":{"id":1626,"nodeType":"StructuredDocumentation","src":"1956:141:8","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1645,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2111:11:8","nodeType":"FunctionDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1628,"mutability":"mutable","name":"addr","nameLocation":"2131:4:8","nodeType":"VariableDeclaration","scope":1645,"src":"2123:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1627,"name":"address","nodeType":"ElementaryTypeName","src":"2123:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2122:14:8"},"returnParameters":{"id":1632,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1631,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1645,"src":"2160:13:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1630,"name":"string","nodeType":"ElementaryTypeName","src":"2160:6:8","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2159:15:8"},"scope":1646,"src":"2102:149:8","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1647,"src":"188:2065:8","usedErrors":[]}],"src":"101:2153:8"},"id":8},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[2007],"Math":[2872],"Strings":[1646]},"id":2008,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1648,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1649,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2008,"sourceUnit":1647,"src":"137:24:9","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1650,"nodeType":"StructuredDocumentation","src":"163:205:9","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":2007,"linearizedBaseContracts":[2007],"name":"ECDSA","nameLocation":"377:5:9","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1656,"members":[{"id":1651,"name":"NoError","nameLocation":"417:7:9","nodeType":"EnumValue","src":"417:7:9"},{"id":1652,"name":"InvalidSignature","nameLocation":"434:16:9","nodeType":"EnumValue","src":"434:16:9"},{"id":1653,"name":"InvalidSignatureLength","nameLocation":"460:22:9","nodeType":"EnumValue","src":"460:22:9"},{"id":1654,"name":"InvalidSignatureS","nameLocation":"492:17:9","nodeType":"EnumValue","src":"492:17:9"},{"id":1655,"name":"InvalidSignatureV","nameLocation":"519:17:9","nodeType":"EnumValue","src":"519:17:9"}],"name":"RecoverError","nameLocation":"394:12:9","nodeType":"EnumDefinition","src":"389:175:9"},{"body":{"id":1699,"nodeType":"Block","src":"624:457:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1662,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"638:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1663,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"647:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1664,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1651,"src":"647:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"id":1671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1668,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"734:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1669,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"743:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1652,"src":"743:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1677,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"843:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1678,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"852:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"852:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"id":1689,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1686,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"965:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1687,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"974:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1654,"src":"974:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1695,"nodeType":"IfStatement","src":"961:114:9","trueBody":{"id":1694,"nodeType":"Block","src":"1006:69:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1690,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1693,"nodeType":"ExpressionStatement","src":"1020:44:9"}]}},"id":1696,"nodeType":"IfStatement","src":"839:236:9","trueBody":{"id":1685,"nodeType":"Block","src":"889:66:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1682,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1681,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1684,"nodeType":"ExpressionStatement","src":"903:41:9"}]}},"id":1697,"nodeType":"IfStatement","src":"730:345:9","trueBody":{"id":1676,"nodeType":"Block","src":"774:59:9","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1672,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:9","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1674,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1675,"nodeType":"ExpressionStatement","src":"788:34:9"}]}},"id":1698,"nodeType":"IfStatement","src":"634:441:9","trueBody":{"id":1667,"nodeType":"Block","src":"669:55:9","statements":[{"functionReturnParameters":1661,"id":1666,"nodeType":"Return","src":"683:7:9"}]}}]},"id":1700,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:9","nodeType":"FunctionDefinition","parameters":{"id":1660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1659,"mutability":"mutable","name":"error","nameLocation":"604:5:9","nodeType":"VariableDeclaration","scope":1700,"src":"591:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1658,"nodeType":"UserDefinedTypeName","pathNode":{"id":1657,"name":"RecoverError","nameLocations":["591:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"591:12:9"},"referencedDeclaration":1656,"src":"591:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:9"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[],"src":"624:0:9"},"scope":2007,"src":"570:511:9","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1745,"nodeType":"Block","src":"2249:626:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1713,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1705,"src":"2263:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:9","memberName":"length","nodeType":"MemberAccess","src":"2263:16:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1715,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:9","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1743,"nodeType":"Block","src":"2788:81:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1736,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1735,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:9","typeDescriptions":{}}},"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1739,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"2822:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1740,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:9","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1653,"src":"2822:35:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"id":1741,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1712,"id":1742,"nodeType":"Return","src":"2802:56:9"}]},"id":1744,"nodeType":"IfStatement","src":"2259:610:9","trueBody":{"id":1734,"nodeType":"Block","src":"2287:495:9","statements":[{"assignments":[1718],"declarations":[{"constant":false,"id":1718,"mutability":"mutable","name":"r","nameLocation":"2309:1:9","nodeType":"VariableDeclaration","scope":1734,"src":"2301:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1717,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1719,"nodeType":"VariableDeclarationStatement","src":"2301:9:9"},{"assignments":[1721],"declarations":[{"constant":false,"id":1721,"mutability":"mutable","name":"s","nameLocation":"2332:1:9","nodeType":"VariableDeclaration","scope":1734,"src":"2324:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1720,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1722,"nodeType":"VariableDeclarationStatement","src":"2324:9:9"},{"assignments":[1724],"declarations":[{"constant":false,"id":1724,"mutability":"mutable","name":"v","nameLocation":"2353:1:9","nodeType":"VariableDeclaration","scope":1734,"src":"2347:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1723,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1725,"nodeType":"VariableDeclarationStatement","src":"2347:7:9"},{"AST":{"nodeType":"YulBlock","src":"2555:171:9","statements":[{"nodeType":"YulAssignment","src":"2573:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2588:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2599:4:9","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2584:3:9"},"nodeType":"YulFunctionCall","src":"2584:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2578:5:9"},"nodeType":"YulFunctionCall","src":"2578:27:9"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"2573:1:9"}]},{"nodeType":"YulAssignment","src":"2622:32:9","value":{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2637:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2648:4:9","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2633:3:9"},"nodeType":"YulFunctionCall","src":"2633:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2627:5:9"},"nodeType":"YulFunctionCall","src":"2627:27:9"},"variableNames":[{"name":"s","nodeType":"YulIdentifier","src":"2622:1:9"}]},{"nodeType":"YulAssignment","src":"2671:41:9","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2681:1:9","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nodeType":"YulIdentifier","src":"2694:9:9"},{"kind":"number","nodeType":"YulLiteral","src":"2705:4:9","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2690:3:9"},"nodeType":"YulFunctionCall","src":"2690:20:9"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2684:5:9"},"nodeType":"YulFunctionCall","src":"2684:27:9"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"2676:4:9"},"nodeType":"YulFunctionCall","src":"2676:36:9"},"variableNames":[{"name":"v","nodeType":"YulIdentifier","src":"2671:1:9"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1718,"isOffset":false,"isSlot":false,"src":"2573:1:9","valueSize":1},{"declaration":1721,"isOffset":false,"isSlot":false,"src":"2622:1:9","valueSize":1},{"declaration":1705,"isOffset":false,"isSlot":false,"src":"2588:9:9","valueSize":1},{"declaration":1705,"isOffset":false,"isSlot":false,"src":"2637:9:9","valueSize":1},{"declaration":1705,"isOffset":false,"isSlot":false,"src":"2694:9:9","valueSize":1},{"declaration":1724,"isOffset":false,"isSlot":false,"src":"2671:1:9","valueSize":1}],"id":1726,"nodeType":"InlineAssembly","src":"2546:180:9"},{"expression":{"arguments":[{"id":1728,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1703,"src":"2757:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1729,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1724,"src":"2763:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1730,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1718,"src":"2766:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1731,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1721,"src":"2769:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1727,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1746,1820,1914],"referencedDeclaration":1914,"src":"2746:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1712,"id":1733,"nodeType":"Return","src":"2739:32:9"}]}}]},"documentation":{"id":1701,"nodeType":"StructuredDocumentation","src":"1087:1053:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1746,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:9","nodeType":"FunctionDefinition","parameters":{"id":1706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1703,"mutability":"mutable","name":"hash","nameLocation":"2173:4:9","nodeType":"VariableDeclaration","scope":1746,"src":"2165:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1705,"mutability":"mutable","name":"signature","nameLocation":"2192:9:9","nodeType":"VariableDeclaration","scope":1746,"src":"2179:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1704,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:9"},"returnParameters":{"id":1712,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1746,"src":"2226:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1707,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1711,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1746,"src":"2235:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1710,"nodeType":"UserDefinedTypeName","pathNode":{"id":1709,"name":"RecoverError","nameLocations":["2235:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"2235:12:9"},"referencedDeclaration":1656,"src":"2235:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:9"},"scope":2007,"src":"2145:730:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1772,"nodeType":"Block","src":"3748:140:9","statements":[{"assignments":[1757,1760],"declarations":[{"constant":false,"id":1757,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:9","nodeType":"VariableDeclaration","scope":1772,"src":"3759:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1756,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1760,"mutability":"mutable","name":"error","nameLocation":"3791:5:9","nodeType":"VariableDeclaration","scope":1772,"src":"3778:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1759,"nodeType":"UserDefinedTypeName","pathNode":{"id":1758,"name":"RecoverError","nameLocations":["3778:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"3778:12:9"},"referencedDeclaration":1656,"src":"3778:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1765,"initialValue":{"arguments":[{"id":1762,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"3811:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1763,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1751,"src":"3817:9:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1761,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1746,1820,1914],"referencedDeclaration":1746,"src":"3800:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":1764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:9"},{"expression":{"arguments":[{"id":1767,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1760,"src":"3849:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}],"id":1766,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"3837:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1656_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1769,"nodeType":"ExpressionStatement","src":"3837:18:9"},{"expression":{"id":1770,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1757,"src":"3872:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1755,"id":1771,"nodeType":"Return","src":"3865:16:9"}]},"documentation":{"id":1747,"nodeType":"StructuredDocumentation","src":"2881:775:9","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1773,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:9","nodeType":"FunctionDefinition","parameters":{"id":1752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1749,"mutability":"mutable","name":"hash","nameLocation":"3686:4:9","nodeType":"VariableDeclaration","scope":1773,"src":"3678:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1748,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1751,"mutability":"mutable","name":"signature","nameLocation":"3705:9:9","nodeType":"VariableDeclaration","scope":1773,"src":"3692:22:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1750,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:9"},"returnParameters":{"id":1755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1754,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1773,"src":"3739:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1753,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:9"},"scope":2007,"src":"3661:227:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1819,"nodeType":"Block","src":"4275:203:9","statements":[{"assignments":[1789],"declarations":[{"constant":false,"id":1789,"mutability":"mutable","name":"s","nameLocation":"4293:1:9","nodeType":"VariableDeclaration","scope":1819,"src":"4285:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1788,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4285:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1796,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1795,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1790,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"4297:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4310:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1792,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4302:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1791,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4302:7:9","typeDescriptions":{}}},"id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4302:75:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4297:80:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4285:92:9"},{"assignments":[1798],"declarations":[{"constant":false,"id":1798,"mutability":"mutable","name":"v","nameLocation":"4393:1:9","nodeType":"VariableDeclaration","scope":1819,"src":"4387:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1797,"name":"uint8","nodeType":"ElementaryTypeName","src":"4387:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1811,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1803,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1780,"src":"4412:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1802,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4404:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1801,"name":"uint256","nodeType":"ElementaryTypeName","src":"4404:7:9","typeDescriptions":{}}},"id":1804,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4404:11:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4419:3:9","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4404:18:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1807,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4403:20:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4426:2:9","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4403:25:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1800,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4397:5:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1799,"name":"uint8","nodeType":"ElementaryTypeName","src":"4397:5:9","typeDescriptions":{}}},"id":1810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4397:32:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4387:42:9"},{"expression":{"arguments":[{"id":1813,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"4457:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1814,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1798,"src":"4463:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1815,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1778,"src":"4466:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1816,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"4469:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1812,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1746,1820,1914],"referencedDeclaration":1914,"src":"4446:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1817,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4446:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1787,"id":1818,"nodeType":"Return","src":"4439:32:9"}]},"documentation":{"id":1774,"nodeType":"StructuredDocumentation","src":"3894:243:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1820,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:9","nodeType":"FunctionDefinition","parameters":{"id":1781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1776,"mutability":"mutable","name":"hash","nameLocation":"4179:4:9","nodeType":"VariableDeclaration","scope":1820,"src":"4171:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1775,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4171:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1778,"mutability":"mutable","name":"r","nameLocation":"4201:1:9","nodeType":"VariableDeclaration","scope":1820,"src":"4193:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1777,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4193:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1780,"mutability":"mutable","name":"vs","nameLocation":"4220:2:9","nodeType":"VariableDeclaration","scope":1820,"src":"4212:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1779,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4212:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:67:9"},"returnParameters":{"id":1787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1783,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1820,"src":"4252:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1782,"name":"address","nodeType":"ElementaryTypeName","src":"4252:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1786,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1820,"src":"4261:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1785,"nodeType":"UserDefinedTypeName","pathNode":{"id":1784,"name":"RecoverError","nameLocations":["4261:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"4261:12:9"},"referencedDeclaration":1656,"src":"4261:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4251:23:9"},"scope":2007,"src":"4142:336:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1849,"nodeType":"Block","src":"4759:136:9","statements":[{"assignments":[1833,1836],"declarations":[{"constant":false,"id":1833,"mutability":"mutable","name":"recovered","nameLocation":"4778:9:9","nodeType":"VariableDeclaration","scope":1849,"src":"4770:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"4770:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1836,"mutability":"mutable","name":"error","nameLocation":"4802:5:9","nodeType":"VariableDeclaration","scope":1849,"src":"4789:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1835,"nodeType":"UserDefinedTypeName","pathNode":{"id":1834,"name":"RecoverError","nameLocations":["4789:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"4789:12:9"},"referencedDeclaration":1656,"src":"4789:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1842,"initialValue":{"arguments":[{"id":1838,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1823,"src":"4822:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1839,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"4828:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1840,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1827,"src":"4831:2:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1837,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1746,1820,1914],"referencedDeclaration":1820,"src":"4811:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1841,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4811:23:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4769:65:9"},{"expression":{"arguments":[{"id":1844,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1836,"src":"4856:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}],"id":1843,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"4844:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1656_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4844:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1846,"nodeType":"ExpressionStatement","src":"4844:18:9"},{"expression":{"id":1847,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1833,"src":"4879:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1831,"id":1848,"nodeType":"Return","src":"4872:16:9"}]},"documentation":{"id":1821,"nodeType":"StructuredDocumentation","src":"4484:154:9","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1850,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4652:7:9","nodeType":"FunctionDefinition","parameters":{"id":1828,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1823,"mutability":"mutable","name":"hash","nameLocation":"4677:4:9","nodeType":"VariableDeclaration","scope":1850,"src":"4669:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1822,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4669:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1825,"mutability":"mutable","name":"r","nameLocation":"4699:1:9","nodeType":"VariableDeclaration","scope":1850,"src":"4691:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1824,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4691:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1827,"mutability":"mutable","name":"vs","nameLocation":"4718:2:9","nodeType":"VariableDeclaration","scope":1850,"src":"4710:10:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4710:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4659:67:9"},"returnParameters":{"id":1831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1830,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1850,"src":"4750:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1829,"name":"address","nodeType":"ElementaryTypeName","src":"4750:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4749:9:9"},"scope":2007,"src":"4643:252:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1913,"nodeType":"Block","src":"5218:1345:9","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1872,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1869,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"6114:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1868,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6106:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1867,"name":"uint256","nodeType":"ElementaryTypeName","src":"6106:7:9","typeDescriptions":{}}},"id":1870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6106:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1871,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:66:9","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6106:79:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1882,"nodeType":"IfStatement","src":"6102:161:9","trueBody":{"id":1881,"nodeType":"Block","src":"6187:76:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1875,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6217:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1874,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6209:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1873,"name":"address","nodeType":"ElementaryTypeName","src":"6209:7:9","typeDescriptions":{}}},"id":1876,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6209:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1877,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"6221:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1878,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6234:17:9","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1654,"src":"6221:30:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"id":1879,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6208:44:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1866,"id":1880,"nodeType":"Return","src":"6201:51:9"}]}},{"assignments":[1884],"declarations":[{"constant":false,"id":1884,"mutability":"mutable","name":"signer","nameLocation":"6365:6:9","nodeType":"VariableDeclaration","scope":1913,"src":"6357:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1883,"name":"address","nodeType":"ElementaryTypeName","src":"6357:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1891,"initialValue":{"arguments":[{"id":1886,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1853,"src":"6384:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1887,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1855,"src":"6390:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1888,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1857,"src":"6393:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1889,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1859,"src":"6396:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1885,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6374:9:9","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6374:24:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6357:41:9"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1892,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"6412:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6430:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6422:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1893,"name":"address","nodeType":"ElementaryTypeName","src":"6422:7:9","typeDescriptions":{}}},"id":1896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6422:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6412:20:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1907,"nodeType":"IfStatement","src":"6408:101:9","trueBody":{"id":1906,"nodeType":"Block","src":"6434:75:9","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6464:1:9","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1899,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6456:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1898,"name":"address","nodeType":"ElementaryTypeName","src":"6456:7:9","typeDescriptions":{}}},"id":1901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6456:10:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1902,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"6468:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6481:16:9","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1652,"src":"6468:29:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"id":1904,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6455:43:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1866,"id":1905,"nodeType":"Return","src":"6448:50:9"}]}},{"expression":{"components":[{"id":1908,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1884,"src":"6527:6:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1909,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1656,"src":"6535:12:9","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1656_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6548:7:9","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1651,"src":"6535:20:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"id":1911,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6526:30:9","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1866,"id":1912,"nodeType":"Return","src":"6519:37:9"}]},"documentation":{"id":1851,"nodeType":"StructuredDocumentation","src":"4901:163:9","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1914,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5078:10:9","nodeType":"FunctionDefinition","parameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1853,"mutability":"mutable","name":"hash","nameLocation":"5106:4:9","nodeType":"VariableDeclaration","scope":1914,"src":"5098:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5098:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1855,"mutability":"mutable","name":"v","nameLocation":"5126:1:9","nodeType":"VariableDeclaration","scope":1914,"src":"5120:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1854,"name":"uint8","nodeType":"ElementaryTypeName","src":"5120:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1857,"mutability":"mutable","name":"r","nameLocation":"5145:1:9","nodeType":"VariableDeclaration","scope":1914,"src":"5137:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1856,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5137:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1859,"mutability":"mutable","name":"s","nameLocation":"5164:1:9","nodeType":"VariableDeclaration","scope":1914,"src":"5156:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1858,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5156:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5088:83:9"},"returnParameters":{"id":1866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1914,"src":"5195:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1861,"name":"address","nodeType":"ElementaryTypeName","src":"5195:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1865,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1914,"src":"5204:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1864,"nodeType":"UserDefinedTypeName","pathNode":{"id":1863,"name":"RecoverError","nameLocations":["5204:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"5204:12:9"},"referencedDeclaration":1656,"src":"5204:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5194:23:9"},"scope":2007,"src":"5069:1494:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1946,"nodeType":"Block","src":"6828:138:9","statements":[{"assignments":[1929,1932],"declarations":[{"constant":false,"id":1929,"mutability":"mutable","name":"recovered","nameLocation":"6847:9:9","nodeType":"VariableDeclaration","scope":1946,"src":"6839:17:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1928,"name":"address","nodeType":"ElementaryTypeName","src":"6839:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1932,"mutability":"mutable","name":"error","nameLocation":"6871:5:9","nodeType":"VariableDeclaration","scope":1946,"src":"6858:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1931,"nodeType":"UserDefinedTypeName","pathNode":{"id":1930,"name":"RecoverError","nameLocations":["6858:12:9"],"nodeType":"IdentifierPath","referencedDeclaration":1656,"src":"6858:12:9"},"referencedDeclaration":1656,"src":"6858:12:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1939,"initialValue":{"arguments":[{"id":1934,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1917,"src":"6891:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1935,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"6897:1:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1936,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1921,"src":"6900:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1937,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1923,"src":"6903:1:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1933,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1746,1820,1914],"referencedDeclaration":1914,"src":"6880:10:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6880:25:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1656_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6838:67:9"},{"expression":{"arguments":[{"id":1941,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1932,"src":"6927:5:9","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1656","typeString":"enum ECDSA.RecoverError"}],"id":1940,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"6915:11:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1656_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6915:18:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1943,"nodeType":"ExpressionStatement","src":"6915:18:9"},{"expression":{"id":1944,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1929,"src":"6950:9:9","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1927,"id":1945,"nodeType":"Return","src":"6943:16:9"}]},"documentation":{"id":1915,"nodeType":"StructuredDocumentation","src":"6569:122:9","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1947,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6705:7:9","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1917,"mutability":"mutable","name":"hash","nameLocation":"6730:4:9","nodeType":"VariableDeclaration","scope":1947,"src":"6722:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1916,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6722:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1919,"mutability":"mutable","name":"v","nameLocation":"6750:1:9","nodeType":"VariableDeclaration","scope":1947,"src":"6744:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1918,"name":"uint8","nodeType":"ElementaryTypeName","src":"6744:5:9","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1921,"mutability":"mutable","name":"r","nameLocation":"6769:1:9","nodeType":"VariableDeclaration","scope":1947,"src":"6761:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1920,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6761:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1923,"mutability":"mutable","name":"s","nameLocation":"6788:1:9","nodeType":"VariableDeclaration","scope":1947,"src":"6780:9:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1922,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6780:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6712:83:9"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1947,"src":"6819:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1925,"name":"address","nodeType":"ElementaryTypeName","src":"6819:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6818:9:9"},"scope":2007,"src":"6696:270:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1963,"nodeType":"Block","src":"7334:187:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7472:34:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},"value":"\u0019Ethereum Signed Message:\n32"},{"id":1959,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1950,"src":"7508:4:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a3332\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1956,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7455:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7459:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"7455:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7455:58:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1955,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7445:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1961,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7445:69:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1954,"id":1962,"nodeType":"Return","src":"7438:76:9"}]},"documentation":{"id":1948,"nodeType":"StructuredDocumentation","src":"6972:279:9","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1964,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7265:22:9","nodeType":"FunctionDefinition","parameters":{"id":1951,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1950,"mutability":"mutable","name":"hash","nameLocation":"7296:4:9","nodeType":"VariableDeclaration","scope":1964,"src":"7288:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1949,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7288:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7287:14:9"},"returnParameters":{"id":1954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1964,"src":"7325:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1952,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7325:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7324:9:9"},"scope":2007,"src":"7256:265:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1985,"nodeType":"Block","src":"7886:116:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1975,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7930:32:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1978,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"7981:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7983:6:9","memberName":"length","nodeType":"MemberAccess","src":"7981:8:9","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1976,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1646,"src":"7964:7:9","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1646_$","typeString":"type(library Strings)"}},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7972:8:9","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1529,"src":"7964:16:9","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7964:26:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1981,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"7992:1:9","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1973,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7913:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7917:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"7913:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7913:81:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1972,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7903:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7903:92:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1971,"id":1984,"nodeType":"Return","src":"7896:99:9"}]},"documentation":{"id":1965,"nodeType":"StructuredDocumentation","src":"7527:274:9","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1986,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7815:22:9","nodeType":"FunctionDefinition","parameters":{"id":1968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"s","nameLocation":"7851:1:9","nodeType":"VariableDeclaration","scope":1986,"src":"7838:14:9","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1966,"name":"bytes","nodeType":"ElementaryTypeName","src":"7838:5:9","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7837:16:9"},"returnParameters":{"id":1971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1970,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1986,"src":"7877:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7877:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7876:9:9"},"scope":2007,"src":"7806:196:9","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2005,"nodeType":"Block","src":"8443:92:9","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1901","id":1999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8487:10:9","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"id":2000,"name":"domainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1989,"src":"8499:15:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2001,"name":"structHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1991,"src":"8516:10:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1997,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"8470:3:9","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1998,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8474:12:9","memberName":"encodePacked","nodeType":"MemberAccess","src":"8470:16:9","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2002,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8470:57:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1996,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"8460:9:9","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8460:68:9","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1995,"id":2004,"nodeType":"Return","src":"8453:75:9"}]},"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"8008:328:9","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":2006,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8350:15:9","nodeType":"FunctionDefinition","parameters":{"id":1992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"mutability":"mutable","name":"domainSeparator","nameLocation":"8374:15:9","nodeType":"VariableDeclaration","scope":2006,"src":"8366:23:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1988,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8366:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1991,"mutability":"mutable","name":"structHash","nameLocation":"8399:10:9","nodeType":"VariableDeclaration","scope":2006,"src":"8391:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1990,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8391:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8365:45:9"},"returnParameters":{"id":1995,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1994,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2006,"src":"8434:7:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8434:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8433:9:9"},"scope":2007,"src":"8341:194:9","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2008,"src":"369:8168:9","usedErrors":[]}],"src":"112:8426:9"},"id":9},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2872]},"id":2873,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2009,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":2010,"nodeType":"StructuredDocumentation","src":"128:73:10","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2872,"linearizedBaseContracts":[2872],"name":"Math","nameLocation":"210:4:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":2014,"members":[{"id":2011,"name":"Down","nameLocation":"245:4:10","nodeType":"EnumValue","src":"245:4:10"},{"id":2012,"name":"Up","nameLocation":"287:2:10","nodeType":"EnumValue","src":"287:2:10"},{"id":2013,"name":"Zero","nameLocation":"318:4:10","nodeType":"EnumValue","src":"318:4:10"}],"name":"Rounding","nameLocation":"226:8:10","nodeType":"EnumDefinition","src":"221:122:10"},{"body":{"id":2031,"nodeType":"Block","src":"480:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2024,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"497:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2025,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"501:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2028,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2019,"src":"509:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:10","trueExpression":{"id":2027,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"505:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2023,"id":2030,"nodeType":"Return","src":"490:20:10"}]},"documentation":{"id":2015,"nodeType":"StructuredDocumentation","src":"349:59:10","text":" @dev Returns the largest of two numbers."},"id":2032,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:10","nodeType":"FunctionDefinition","parameters":{"id":2020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2017,"mutability":"mutable","name":"a","nameLocation":"434:1:10","nodeType":"VariableDeclaration","scope":2032,"src":"426:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2019,"mutability":"mutable","name":"b","nameLocation":"445:1:10","nodeType":"VariableDeclaration","scope":2032,"src":"437:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2018,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:10"},"returnParameters":{"id":2023,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2022,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2032,"src":"471:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2021,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:10"},"scope":2872,"src":"413:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2049,"nodeType":"Block","src":"655:37:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2042,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"672:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2043,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"676:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2046,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2037,"src":"684:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:10","trueExpression":{"id":2045,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"680:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2041,"id":2048,"nodeType":"Return","src":"665:20:10"}]},"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"523:60:10","text":" @dev Returns the smallest of two numbers."},"id":2050,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:10","nodeType":"FunctionDefinition","parameters":{"id":2038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"mutability":"mutable","name":"a","nameLocation":"609:1:10","nodeType":"VariableDeclaration","scope":2050,"src":"601:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2034,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2037,"mutability":"mutable","name":"b","nameLocation":"620:1:10","nodeType":"VariableDeclaration","scope":2050,"src":"612:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2036,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:10"},"returnParameters":{"id":2041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2040,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2050,"src":"646:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2039,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:10"},"scope":2872,"src":"588:104:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2072,"nodeType":"Block","src":"876:82:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2060,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"931:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2061,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"935:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2064,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2053,"src":"941:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2065,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2055,"src":"945:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2067,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":2068,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2059,"id":2071,"nodeType":"Return","src":"923:28:10"}]},"documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"698:102:10","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":2073,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:10","nodeType":"FunctionDefinition","parameters":{"id":2056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"a","nameLocation":"830:1:10","nodeType":"VariableDeclaration","scope":2073,"src":"822:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2055,"mutability":"mutable","name":"b","nameLocation":"841:1:10","nodeType":"VariableDeclaration","scope":2073,"src":"833:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2054,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:10"},"returnParameters":{"id":2059,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2058,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2073,"src":"867:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2057,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:10"},"scope":2872,"src":"805:153:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2097,"nodeType":"Block","src":"1228:123:10","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2083,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"1316:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2094,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2087,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"1330:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2090,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2091,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2078,"src":"1339:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2093,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:10","trueExpression":{"hexValue":"30","id":2086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2082,"id":2096,"nodeType":"Return","src":"1309:35:10"}]},"documentation":{"id":2074,"nodeType":"StructuredDocumentation","src":"964:188:10","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":2098,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:10","nodeType":"FunctionDefinition","parameters":{"id":2079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2076,"mutability":"mutable","name":"a","nameLocation":"1182:1:10","nodeType":"VariableDeclaration","scope":2098,"src":"1174:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2078,"mutability":"mutable","name":"b","nameLocation":"1193:1:10","nodeType":"VariableDeclaration","scope":2098,"src":"1185:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2077,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:10"},"returnParameters":{"id":2082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2098,"src":"1219:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:10"},"scope":2872,"src":"1157:194:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2219,"nodeType":"Block","src":"1795:3797:10","statements":[{"id":2218,"nodeType":"UncheckedBlock","src":"1805:3781:10","statements":[{"assignments":[2111],"declarations":[{"constant":false,"id":2111,"mutability":"mutable","name":"prod0","nameLocation":"2134:5:10","nodeType":"VariableDeclaration","scope":2218,"src":"2126:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2110,"name":"uint256","nodeType":"ElementaryTypeName","src":"2126:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2112,"nodeType":"VariableDeclarationStatement","src":"2126:13:10"},{"assignments":[2114],"declarations":[{"constant":false,"id":2114,"mutability":"mutable","name":"prod1","nameLocation":"2206:5:10","nodeType":"VariableDeclaration","scope":2218,"src":"2198:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2113,"name":"uint256","nodeType":"ElementaryTypeName","src":"2198:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2115,"nodeType":"VariableDeclarationStatement","src":"2198:13:10"},{"AST":{"nodeType":"YulBlock","src":"2278:157:10","statements":[{"nodeType":"YulVariableDeclaration","src":"2296:30:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2313:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2316:1:10"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2323:1:10","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2319:3:10"},"nodeType":"YulFunctionCall","src":"2319:6:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2306:6:10"},"nodeType":"YulFunctionCall","src":"2306:20:10"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2300:2:10","type":""}]},{"nodeType":"YulAssignment","src":"2343:18:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2356:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"2359:1:10"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2352:3:10"},"nodeType":"YulFunctionCall","src":"2352:9:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2343:5:10"}]},{"nodeType":"YulAssignment","src":"2378:43:10","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2395:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2399:5:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2391:3:10"},"nodeType":"YulFunctionCall","src":"2391:14:10"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2410:2:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"2414:5:10"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2407:2:10"},"nodeType":"YulFunctionCall","src":"2407:13:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2387:3:10"},"nodeType":"YulFunctionCall","src":"2387:34:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2378:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2111,"isOffset":false,"isSlot":false,"src":"2343:5:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"2399:5:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"2414:5:10","valueSize":1},{"declaration":2114,"isOffset":false,"isSlot":false,"src":"2378:5:10","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"2313:1:10","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"2356:1:10","valueSize":1},{"declaration":2103,"isOffset":false,"isSlot":false,"src":"2316:1:10","valueSize":1},{"declaration":2103,"isOffset":false,"isSlot":false,"src":"2359:1:10","valueSize":1}],"id":2116,"nodeType":"InlineAssembly","src":"2269:166:10"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2117,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"2516:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2516:10:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2125,"nodeType":"IfStatement","src":"2512:75:10","trueBody":{"id":2124,"nodeType":"Block","src":"2528:59:10","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2120,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"2553:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2121,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"2561:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2553:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2109,"id":2123,"nodeType":"Return","src":"2546:26:10"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"2697:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2128,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"2711:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2697:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"}],"id":2126,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2689:7:10","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$returns$__$","typeString":"function (bool) pure"}},"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:28:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2131,"nodeType":"ExpressionStatement","src":"2689:28:10"},{"assignments":[2133],"declarations":[{"constant":false,"id":2133,"mutability":"mutable","name":"remainder","nameLocation":"2981:9:10","nodeType":"VariableDeclaration","scope":2218,"src":"2973:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2132,"name":"uint256","nodeType":"ElementaryTypeName","src":"2973:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2134,"nodeType":"VariableDeclarationStatement","src":"2973:17:10"},{"AST":{"nodeType":"YulBlock","src":"3013:291:10","statements":[{"nodeType":"YulAssignment","src":"3082:38:10","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3102:1:10"},{"name":"y","nodeType":"YulIdentifier","src":"3105:1:10"},{"name":"denominator","nodeType":"YulIdentifier","src":"3108:11:10"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3095:6:10"},"nodeType":"YulFunctionCall","src":"3095:25:10"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3082:9:10"}]},{"nodeType":"YulAssignment","src":"3202:41:10","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3215:5:10"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3225:9:10"},{"name":"prod0","nodeType":"YulIdentifier","src":"3236:5:10"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3222:2:10"},"nodeType":"YulFunctionCall","src":"3222:20:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3211:3:10"},"nodeType":"YulFunctionCall","src":"3211:32:10"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3202:5:10"}]},{"nodeType":"YulAssignment","src":"3260:30:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3273:5:10"},{"name":"remainder","nodeType":"YulIdentifier","src":"3280:9:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3269:3:10"},"nodeType":"YulFunctionCall","src":"3269:21:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3260:5:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2105,"isOffset":false,"isSlot":false,"src":"3108:11:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"3236:5:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"3260:5:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"3273:5:10","valueSize":1},{"declaration":2114,"isOffset":false,"isSlot":false,"src":"3202:5:10","valueSize":1},{"declaration":2114,"isOffset":false,"isSlot":false,"src":"3215:5:10","valueSize":1},{"declaration":2133,"isOffset":false,"isSlot":false,"src":"3082:9:10","valueSize":1},{"declaration":2133,"isOffset":false,"isSlot":false,"src":"3225:9:10","valueSize":1},{"declaration":2133,"isOffset":false,"isSlot":false,"src":"3280:9:10","valueSize":1},{"declaration":2101,"isOffset":false,"isSlot":false,"src":"3102:1:10","valueSize":1},{"declaration":2103,"isOffset":false,"isSlot":false,"src":"3105:1:10","valueSize":1}],"id":2135,"nodeType":"InlineAssembly","src":"3004:300:10"},{"assignments":[2137],"declarations":[{"constant":false,"id":2137,"mutability":"mutable","name":"twos","nameLocation":"3619:4:10","nodeType":"VariableDeclaration","scope":2218,"src":"3611:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2136,"name":"uint256","nodeType":"ElementaryTypeName","src":"3611:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2145,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2138,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"3626:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3641:12:10","subExpression":{"id":2139,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"3642:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3641:16:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2143,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3640:18:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3626:32:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3611:47:10"},{"AST":{"nodeType":"YulBlock","src":"3681:362:10","statements":[{"nodeType":"YulAssignment","src":"3746:37:10","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"3765:11:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3778:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3761:3:10"},"nodeType":"YulFunctionCall","src":"3761:22:10"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"3746:11:10"}]},{"nodeType":"YulAssignment","src":"3850:25:10","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3863:5:10"},{"name":"twos","nodeType":"YulIdentifier","src":"3870:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3859:3:10"},"nodeType":"YulFunctionCall","src":"3859:16:10"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3850:5:10"}]},{"nodeType":"YulAssignment","src":"3990:39:10","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:10","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4013:4:10"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4006:3:10"},"nodeType":"YulFunctionCall","src":"4006:12:10"},{"name":"twos","nodeType":"YulIdentifier","src":"4020:4:10"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4002:3:10"},"nodeType":"YulFunctionCall","src":"4002:23:10"},{"kind":"number","nodeType":"YulLiteral","src":"4027:1:10","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:10"},"nodeType":"YulFunctionCall","src":"3998:31:10"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"3990:4:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2105,"isOffset":false,"isSlot":false,"src":"3746:11:10","valueSize":1},{"declaration":2105,"isOffset":false,"isSlot":false,"src":"3765:11:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"3850:5:10","valueSize":1},{"declaration":2111,"isOffset":false,"isSlot":false,"src":"3863:5:10","valueSize":1},{"declaration":2137,"isOffset":false,"isSlot":false,"src":"3778:4:10","valueSize":1},{"declaration":2137,"isOffset":false,"isSlot":false,"src":"3870:4:10","valueSize":1},{"declaration":2137,"isOffset":false,"isSlot":false,"src":"3990:4:10","valueSize":1},{"declaration":2137,"isOffset":false,"isSlot":false,"src":"4013:4:10","valueSize":1},{"declaration":2137,"isOffset":false,"isSlot":false,"src":"4020:4:10","valueSize":1}],"id":2146,"nodeType":"InlineAssembly","src":"3672:371:10"},{"expression":{"id":2151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"4109:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2148,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2114,"src":"4118:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2149,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2137,"src":"4126:4:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4118:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4109:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2152,"nodeType":"ExpressionStatement","src":"4109:21:10"},{"assignments":[2154],"declarations":[{"constant":false,"id":2154,"mutability":"mutable","name":"inverse","nameLocation":"4456:7:10","nodeType":"VariableDeclaration","scope":2218,"src":"4448:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2153,"name":"uint256","nodeType":"ElementaryTypeName","src":"4448:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2161,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":2155,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4467:1:10","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2156,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4471:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4467:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2158,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4466:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4486:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4466:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4448:39:10"},{"expression":{"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2162,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4704:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4715:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2166,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2164,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2165,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4733:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4719:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4715:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2169,"nodeType":"ExpressionStatement","src":"4704:36:10"},{"expression":{"id":2176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2170,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4773:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4784:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2174,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2172,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4788:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2173,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4802:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4788:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4784:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4773:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2177,"nodeType":"ExpressionStatement","src":"4773:36:10"},{"expression":{"id":2184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2178,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4843:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2180,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4858:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2181,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4872:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4858:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4854:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4843:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2185,"nodeType":"ExpressionStatement","src":"4843:36:10"},{"expression":{"id":2192,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2186,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4913:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4924:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2188,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4928:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2189,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4928:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4924:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4913:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2193,"nodeType":"ExpressionStatement","src":"4913:36:10"},{"expression":{"id":2200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2194,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"4983:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4994:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2196,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"4998:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2197,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"5012:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4998:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4994:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4983:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2201,"nodeType":"ExpressionStatement","src":"4983:36:10"},{"expression":{"id":2208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2202,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"5054:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2203,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5065:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2204,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"5069:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2205,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"5083:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5069:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5065:25:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5054:36:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2209,"nodeType":"ExpressionStatement","src":"5054:36:10"},{"expression":{"id":2214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2210,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"5524:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2211,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2111,"src":"5533:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2212,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2154,"src":"5541:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5533:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5524:24:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2215,"nodeType":"ExpressionStatement","src":"5524:24:10"},{"expression":{"id":2216,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2108,"src":"5569:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2109,"id":2217,"nodeType":"Return","src":"5562:13:10"}]}]},"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"1357:305:10","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":2220,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:10","nodeType":"FunctionDefinition","parameters":{"id":2106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"x","nameLocation":"1700:1:10","nodeType":"VariableDeclaration","scope":2220,"src":"1692:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2100,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"y","nameLocation":"1719:1:10","nodeType":"VariableDeclaration","scope":2220,"src":"1711:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"1711:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2105,"mutability":"mutable","name":"denominator","nameLocation":"1738:11:10","nodeType":"VariableDeclaration","scope":2220,"src":"1730:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2104,"name":"uint256","nodeType":"ElementaryTypeName","src":"1730:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:73:10"},"returnParameters":{"id":2109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2108,"mutability":"mutable","name":"result","nameLocation":"1787:6:10","nodeType":"VariableDeclaration","scope":2220,"src":"1779:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2107,"name":"uint256","nodeType":"ElementaryTypeName","src":"1779:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1778:16:10"},"scope":2872,"src":"1667:3925:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2263,"nodeType":"Block","src":"5872:189:10","statements":[{"assignments":[2236],"declarations":[{"constant":false,"id":2236,"mutability":"mutable","name":"result","nameLocation":"5890:6:10","nodeType":"VariableDeclaration","scope":2263,"src":"5882:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2235,"name":"uint256","nodeType":"ElementaryTypeName","src":"5882:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2242,"initialValue":{"arguments":[{"id":2238,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"5906:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2239,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"5909:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2240,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"5912:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2237,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[2220,2264],"referencedDeclaration":2220,"src":"5899:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5899:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5882:42:10"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"id":2246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2243,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2230,"src":"5938:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2244,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"5950:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2014_$","typeString":"type(enum Math.Rounding)"}},"id":2245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5959:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2012,"src":"5950:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"src":"5938:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2248,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2223,"src":"5972:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2249,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2225,"src":"5975:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2250,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2227,"src":"5978:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2247,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"5965:6:10","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":2251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5965:25:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2252,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5965:29:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5938:56:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2260,"nodeType":"IfStatement","src":"5934:98:10","trueBody":{"id":2259,"nodeType":"Block","src":"5996:36:10","statements":[{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2255,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"6010:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2256,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6020:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6010:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"6010:11:10"}]}},{"expression":{"id":2261,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2236,"src":"6048:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2234,"id":2262,"nodeType":"Return","src":"6041:13:10"}]},"documentation":{"id":2221,"nodeType":"StructuredDocumentation","src":"5598:121:10","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":2264,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"5733:6:10","nodeType":"FunctionDefinition","parameters":{"id":2231,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2223,"mutability":"mutable","name":"x","nameLocation":"5757:1:10","nodeType":"VariableDeclaration","scope":2264,"src":"5749:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2222,"name":"uint256","nodeType":"ElementaryTypeName","src":"5749:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2225,"mutability":"mutable","name":"y","nameLocation":"5776:1:10","nodeType":"VariableDeclaration","scope":2264,"src":"5768:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"5768:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2227,"mutability":"mutable","name":"denominator","nameLocation":"5795:11:10","nodeType":"VariableDeclaration","scope":2264,"src":"5787:19:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2226,"name":"uint256","nodeType":"ElementaryTypeName","src":"5787:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2230,"mutability":"mutable","name":"rounding","nameLocation":"5825:8:10","nodeType":"VariableDeclaration","scope":2264,"src":"5816:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"typeName":{"id":2229,"nodeType":"UserDefinedTypeName","pathNode":{"id":2228,"name":"Rounding","nameLocations":["5816:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"5816:8:10"},"referencedDeclaration":2014,"src":"5816:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"5739:100:10"},"returnParameters":{"id":2234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2233,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2264,"src":"5863:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2232,"name":"uint256","nodeType":"ElementaryTypeName","src":"5863:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5862:9:10"},"scope":2872,"src":"5724:337:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2375,"nodeType":"Block","src":"6337:1585:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2272,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"6351:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6356:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6351:6:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2278,"nodeType":"IfStatement","src":"6347:45:10","trueBody":{"id":2277,"nodeType":"Block","src":"6359:33:10","statements":[{"expression":{"hexValue":"30","id":2275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6380:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":2271,"id":2276,"nodeType":"Return","src":"6373:8:10"}]}},{"assignments":[2280],"declarations":[{"constant":false,"id":2280,"mutability":"mutable","name":"result","nameLocation":"7079:6:10","nodeType":"VariableDeclaration","scope":2375,"src":"7071:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2279,"name":"uint256","nodeType":"ElementaryTypeName","src":"7071:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2289,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2288,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2281,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7088:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2283,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7099:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2282,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2544,2580],"referencedDeclaration":2544,"src":"7094:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2284,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7094:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7105:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7094:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2287,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7093:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7088:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7071:36:10"},{"id":2374,"nodeType":"UncheckedBlock","src":"7508:408:10","statements":[{"expression":{"id":2299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2290,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7532:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2291,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7542:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2292,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7551:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2293,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7555:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7551:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7542:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2296,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7541:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7566:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7541:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7532:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2300,"nodeType":"ExpressionStatement","src":"7532:35:10"},{"expression":{"id":2310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2301,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7581:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2302,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7591:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2305,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2303,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7600:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2304,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7604:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7600:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7591:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2307,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7590:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7615:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7590:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7581:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2311,"nodeType":"ExpressionStatement","src":"7581:35:10"},{"expression":{"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2312,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7630:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2313,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7640:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2314,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7649:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2315,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7653:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7649:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7640:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2318,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7639:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2319,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7664:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7639:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7630:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2322,"nodeType":"ExpressionStatement","src":"7630:35:10"},{"expression":{"id":2332,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2323,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7679:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2324,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7689:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2325,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7698:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2326,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7702:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7698:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7689:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2329,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7688:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2330,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7713:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7688:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7679:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2333,"nodeType":"ExpressionStatement","src":"7679:35:10"},{"expression":{"id":2343,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2334,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7728:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2339,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2335,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7738:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2338,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2336,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7747:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2337,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7751:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7747:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7738:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2340,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7737:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2341,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7762:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7737:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7728:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2344,"nodeType":"ExpressionStatement","src":"7728:35:10"},{"expression":{"id":2354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7777:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2353,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2346,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7787:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2347,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7796:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2348,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7800:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7796:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7787:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2351,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7786:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7811:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7786:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7777:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2355,"nodeType":"ExpressionStatement","src":"7777:35:10"},{"expression":{"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2356,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7826:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2361,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2357,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7836:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2358,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7845:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2359,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7849:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7845:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7836:19:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2362,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7835:21:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7860:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7835:26:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7826:35:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2366,"nodeType":"ExpressionStatement","src":"7826:35:10"},{"expression":{"arguments":[{"id":2368,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7886:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2369,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2267,"src":"7894:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2370,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2280,"src":"7898:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7894:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2367,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"7882:3:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7882:23:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2271,"id":2373,"nodeType":"Return","src":"7875:30:10"}]}]},"documentation":{"id":2265,"nodeType":"StructuredDocumentation","src":"6067:208:10","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2376,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6289:4:10","nodeType":"FunctionDefinition","parameters":{"id":2268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2267,"mutability":"mutable","name":"a","nameLocation":"6302:1:10","nodeType":"VariableDeclaration","scope":2376,"src":"6294:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2266,"name":"uint256","nodeType":"ElementaryTypeName","src":"6294:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6293:11:10"},"returnParameters":{"id":2271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2376,"src":"6328:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2269,"name":"uint256","nodeType":"ElementaryTypeName","src":"6328:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6327:9:10"},"scope":2872,"src":"6280:1642:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2411,"nodeType":"Block","src":"8098:161:10","statements":[{"id":2410,"nodeType":"UncheckedBlock","src":"8108:145:10","statements":[{"assignments":[2388],"declarations":[{"constant":false,"id":2388,"mutability":"mutable","name":"result","nameLocation":"8140:6:10","nodeType":"VariableDeclaration","scope":2410,"src":"8132:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2387,"name":"uint256","nodeType":"ElementaryTypeName","src":"8132:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2392,"initialValue":{"arguments":[{"id":2390,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"8154:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2389,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2376,2412],"referencedDeclaration":2376,"src":"8149:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2391,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8149:7:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8132:24:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2408,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2393,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8177:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"id":2397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2394,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"8187:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2395,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"8199:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2014_$","typeString":"type(enum Math.Rounding)"}},"id":2396,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8208:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2012,"src":"8199:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"src":"8187:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2402,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2398,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8214:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2399,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2388,"src":"8223:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2401,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2379,"src":"8232:1:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8214:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8187:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2405,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8240:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8187:54:10","trueExpression":{"hexValue":"31","id":2404,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8236:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2407,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8186:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8177:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2386,"id":2409,"nodeType":"Return","src":"8170:72:10"}]}]},"documentation":{"id":2377,"nodeType":"StructuredDocumentation","src":"7928:89:10","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2412,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8031:4:10","nodeType":"FunctionDefinition","parameters":{"id":2383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2379,"mutability":"mutable","name":"a","nameLocation":"8044:1:10","nodeType":"VariableDeclaration","scope":2412,"src":"8036:9:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2378,"name":"uint256","nodeType":"ElementaryTypeName","src":"8036:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2382,"mutability":"mutable","name":"rounding","nameLocation":"8056:8:10","nodeType":"VariableDeclaration","scope":2412,"src":"8047:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"typeName":{"id":2381,"nodeType":"UserDefinedTypeName","pathNode":{"id":2380,"name":"Rounding","nameLocations":["8047:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"8047:8:10"},"referencedDeclaration":2014,"src":"8047:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8035:30:10"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2385,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2412,"src":"8089:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2384,"name":"uint256","nodeType":"ElementaryTypeName","src":"8089:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8088:9:10"},"scope":2872,"src":"8022:237:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2543,"nodeType":"Block","src":"8444:922:10","statements":[{"assignments":[2421],"declarations":[{"constant":false,"id":2421,"mutability":"mutable","name":"result","nameLocation":"8462:6:10","nodeType":"VariableDeclaration","scope":2543,"src":"8454:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2420,"name":"uint256","nodeType":"ElementaryTypeName","src":"8454:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2423,"initialValue":{"hexValue":"30","id":2422,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8471:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8454:18:10"},{"id":2540,"nodeType":"UncheckedBlock","src":"8482:855:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2426,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2424,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8510:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2425,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8519:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8510:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8525:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8510:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2438,"nodeType":"IfStatement","src":"8506:99:10","trueBody":{"id":2437,"nodeType":"Block","src":"8528:77:10","statements":[{"expression":{"id":2431,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2429,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8546:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2430,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8556:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8546:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2432,"nodeType":"ExpressionStatement","src":"8546:13:10"},{"expression":{"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2433,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8577:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2434,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8587:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8577:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2436,"nodeType":"ExpressionStatement","src":"8577:13:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8622:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8631:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8622:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8636:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8622:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2453,"nodeType":"IfStatement","src":"8618:96:10","trueBody":{"id":2452,"nodeType":"Block","src":"8639:75:10","statements":[{"expression":{"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2444,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8657:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8667:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8657:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2447,"nodeType":"ExpressionStatement","src":"8657:12:10"},{"expression":{"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2448,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8687:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8697:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8687:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2451,"nodeType":"ExpressionStatement","src":"8687:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2454,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8731:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2455,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8740:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8731:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8731:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2468,"nodeType":"IfStatement","src":"8727:96:10","trueBody":{"id":2467,"nodeType":"Block","src":"8748:75:10","statements":[{"expression":{"id":2461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2459,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8766:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2460,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8776:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8766:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2462,"nodeType":"ExpressionStatement","src":"8766:12:10"},{"expression":{"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2463,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8796:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8796:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2466,"nodeType":"ExpressionStatement","src":"8796:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2469,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8840:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8849:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8840:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8854:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8840:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2483,"nodeType":"IfStatement","src":"8836:96:10","trueBody":{"id":2482,"nodeType":"Block","src":"8857:75:10","statements":[{"expression":{"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2474,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8875:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2475,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8885:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8875:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2477,"nodeType":"ExpressionStatement","src":"8875:12:10"},{"expression":{"id":2480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2478,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"8905:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2479,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8915:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"8905:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2481,"nodeType":"ExpressionStatement","src":"8905:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2484,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8949:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2485,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8958:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8949:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8962:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8949:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2498,"nodeType":"IfStatement","src":"8945:93:10","trueBody":{"id":2497,"nodeType":"Block","src":"8965:73:10","statements":[{"expression":{"id":2491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2489,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"8983:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8993:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"8983:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2492,"nodeType":"ExpressionStatement","src":"8983:11:10"},{"expression":{"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2493,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"9012:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9022:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9012:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2496,"nodeType":"ExpressionStatement","src":"9012:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9055:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9064:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9055:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9068:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9055:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2513,"nodeType":"IfStatement","src":"9051:93:10","trueBody":{"id":2512,"nodeType":"Block","src":"9071:73:10","statements":[{"expression":{"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2504,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9089:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2505,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9089:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2507,"nodeType":"ExpressionStatement","src":"9089:11:10"},{"expression":{"id":2510,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2508,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"9118:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9128:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9118:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2511,"nodeType":"ExpressionStatement","src":"9118:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2514,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9161:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9170:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9161:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2517,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9174:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9161:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2528,"nodeType":"IfStatement","src":"9157:93:10","trueBody":{"id":2527,"nodeType":"Block","src":"9177:73:10","statements":[{"expression":{"id":2521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2519,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9195:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2520,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9205:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9195:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2522,"nodeType":"ExpressionStatement","src":"9195:11:10"},{"expression":{"id":2525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2523,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"9224:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9234:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9224:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2526,"nodeType":"ExpressionStatement","src":"9224:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2529,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2415,"src":"9267:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9276:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9267:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9280:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9267:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2539,"nodeType":"IfStatement","src":"9263:64:10","trueBody":{"id":2538,"nodeType":"Block","src":"9283:44:10","statements":[{"expression":{"id":2536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2534,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"9301:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2535,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9311:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9301:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2537,"nodeType":"ExpressionStatement","src":"9301:11:10"}]}}]},{"expression":{"id":2541,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2421,"src":"9353:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2419,"id":2542,"nodeType":"Return","src":"9346:13:10"}]},"documentation":{"id":2413,"nodeType":"StructuredDocumentation","src":"8265:113:10","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2544,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8392:4:10","nodeType":"FunctionDefinition","parameters":{"id":2416,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2415,"mutability":"mutable","name":"value","nameLocation":"8405:5:10","nodeType":"VariableDeclaration","scope":2544,"src":"8397:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2414,"name":"uint256","nodeType":"ElementaryTypeName","src":"8397:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8396:15:10"},"returnParameters":{"id":2419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2418,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2544,"src":"8435:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2417,"name":"uint256","nodeType":"ElementaryTypeName","src":"8435:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8434:9:10"},"scope":2872,"src":"8383:983:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2579,"nodeType":"Block","src":"9599:165:10","statements":[{"id":2578,"nodeType":"UncheckedBlock","src":"9609:149:10","statements":[{"assignments":[2556],"declarations":[{"constant":false,"id":2556,"mutability":"mutable","name":"result","nameLocation":"9641:6:10","nodeType":"VariableDeclaration","scope":2578,"src":"9633:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2555,"name":"uint256","nodeType":"ElementaryTypeName","src":"9633:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2560,"initialValue":{"arguments":[{"id":2558,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"9655:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2557,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2544,2580],"referencedDeclaration":2544,"src":"9650:4:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9650:11:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9633:28:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2561,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"9682:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"9692:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2563,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"9704:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2014_$","typeString":"type(enum Math.Rounding)"}},"id":2564,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9713:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2012,"src":"9704:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"src":"9692:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2566,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9719:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2567,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"9724:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2569,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2547,"src":"9733:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9719:19:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9692:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2573,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2574,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9692:54:10","trueExpression":{"hexValue":"31","id":2572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9741:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2575,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9691:56:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9682:65:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2554,"id":2577,"nodeType":"Return","src":"9675:72:10"}]}]},"documentation":{"id":2545,"nodeType":"StructuredDocumentation","src":"9372:142:10","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2580,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9528:4:10","nodeType":"FunctionDefinition","parameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2547,"mutability":"mutable","name":"value","nameLocation":"9541:5:10","nodeType":"VariableDeclaration","scope":2580,"src":"9533:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2546,"name":"uint256","nodeType":"ElementaryTypeName","src":"9533:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2550,"mutability":"mutable","name":"rounding","nameLocation":"9557:8:10","nodeType":"VariableDeclaration","scope":2580,"src":"9548:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"typeName":{"id":2549,"nodeType":"UserDefinedTypeName","pathNode":{"id":2548,"name":"Rounding","nameLocations":["9548:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"9548:8:10"},"referencedDeclaration":2014,"src":"9548:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9532:34:10"},"returnParameters":{"id":2554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2580,"src":"9590:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2552,"name":"uint256","nodeType":"ElementaryTypeName","src":"9590:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9589:9:10"},"scope":2872,"src":"9519:245:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2708,"nodeType":"Block","src":"9951:828:10","statements":[{"assignments":[2589],"declarations":[{"constant":false,"id":2589,"mutability":"mutable","name":"result","nameLocation":"9969:6:10","nodeType":"VariableDeclaration","scope":2708,"src":"9961:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"9961:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2591,"initialValue":{"hexValue":"30","id":2590,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9978:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"9961:18:10"},{"id":2705,"nodeType":"UncheckedBlock","src":"9989:761:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2592,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10017:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2595,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2593,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10026:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2594,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10030:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10026:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10017:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2608,"nodeType":"IfStatement","src":"10013:99:10","trueBody":{"id":2607,"nodeType":"Block","src":"10034:78:10","statements":[{"expression":{"id":2601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2597,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10052:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10061:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10065:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10061:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10052:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2602,"nodeType":"ExpressionStatement","src":"10052:15:10"},{"expression":{"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2603,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10085:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10095:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10085:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2606,"nodeType":"ExpressionStatement","src":"10085:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2613,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2609,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10129:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2612,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10138:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2611,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10142:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10138:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10129:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2625,"nodeType":"IfStatement","src":"10125:99:10","trueBody":{"id":2624,"nodeType":"Block","src":"10146:78:10","statements":[{"expression":{"id":2618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2614,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10164:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2615,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10173:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10177:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10173:6:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10164:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2619,"nodeType":"ExpressionStatement","src":"10164:15:10"},{"expression":{"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2620,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10197:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2621,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10207:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10197:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2623,"nodeType":"ExpressionStatement","src":"10197:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2626,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10241:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2629,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10250:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10254:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10250:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10241:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2642,"nodeType":"IfStatement","src":"10237:99:10","trueBody":{"id":2641,"nodeType":"Block","src":"10258:78:10","statements":[{"expression":{"id":2635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2631,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10276:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10285:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10289:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10285:6:10","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10276:15:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2636,"nodeType":"ExpressionStatement","src":"10276:15:10"},{"expression":{"id":2639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2637,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10309:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2638,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10309:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2640,"nodeType":"ExpressionStatement","src":"10309:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2643,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10353:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2646,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10362:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10366:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10362:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10353:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2659,"nodeType":"IfStatement","src":"10349:96:10","trueBody":{"id":2658,"nodeType":"Block","src":"10369:76:10","statements":[{"expression":{"id":2652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2648,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10396:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10400:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10396:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10387:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2653,"nodeType":"ExpressionStatement","src":"10387:14:10"},{"expression":{"id":2656,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2654,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10419:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10419:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2657,"nodeType":"ExpressionStatement","src":"10419:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2660,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10462:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2663,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10471:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10475:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10471:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10462:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2676,"nodeType":"IfStatement","src":"10458:96:10","trueBody":{"id":2675,"nodeType":"Block","src":"10478:76:10","statements":[{"expression":{"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2665,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10496:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10505:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10509:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10505:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10496:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2670,"nodeType":"ExpressionStatement","src":"10496:14:10"},{"expression":{"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2671,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10528:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2672,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10538:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10528:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2674,"nodeType":"ExpressionStatement","src":"10528:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2681,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2677,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10571:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10580:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2679,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10584:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10580:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10571:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2693,"nodeType":"IfStatement","src":"10567:96:10","trueBody":{"id":2692,"nodeType":"Block","src":"10587:76:10","statements":[{"expression":{"id":2686,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2682,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10605:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10614:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10618:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10614:5:10","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10605:14:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2687,"nodeType":"ExpressionStatement","src":"10605:14:10"},{"expression":{"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2688,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10637:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10647:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10637:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2691,"nodeType":"ExpressionStatement","src":"10637:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2698,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2694,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"10680:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2697,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10689:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2696,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10693:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10689:5:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10680:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2704,"nodeType":"IfStatement","src":"10676:64:10","trueBody":{"id":2703,"nodeType":"Block","src":"10696:44:10","statements":[{"expression":{"id":2701,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2699,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10714:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2700,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10724:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10714:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2702,"nodeType":"ExpressionStatement","src":"10714:11:10"}]}}]},{"expression":{"id":2706,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"10766:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2587,"id":2707,"nodeType":"Return","src":"10759:13:10"}]},"documentation":{"id":2581,"nodeType":"StructuredDocumentation","src":"9770:114:10","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2709,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"9898:5:10","nodeType":"FunctionDefinition","parameters":{"id":2584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"value","nameLocation":"9912:5:10","nodeType":"VariableDeclaration","scope":2709,"src":"9904:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"9904:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9903:15:10"},"returnParameters":{"id":2587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2586,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2709,"src":"9942:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2585,"name":"uint256","nodeType":"ElementaryTypeName","src":"9942:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9941:9:10"},"scope":2872,"src":"9889:890:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2744,"nodeType":"Block","src":"11014:165:10","statements":[{"id":2743,"nodeType":"UncheckedBlock","src":"11024:149:10","statements":[{"assignments":[2721],"declarations":[{"constant":false,"id":2721,"mutability":"mutable","name":"result","nameLocation":"11056:6:10","nodeType":"VariableDeclaration","scope":2743,"src":"11048:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2720,"name":"uint256","nodeType":"ElementaryTypeName","src":"11048:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2725,"initialValue":{"arguments":[{"id":2723,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"11071:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2722,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2709,2745],"referencedDeclaration":2709,"src":"11065:5:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2724,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11065:12:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11048:29:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2726,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11098:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"id":2730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2727,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2715,"src":"11108:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2728,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"11120:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2014_$","typeString":"type(enum Math.Rounding)"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11129:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2012,"src":"11120:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"src":"11108:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11135:2:10","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2732,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"11139:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2734,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2712,"src":"11148:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11135:18:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11108:45:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2738,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11160:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2739,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11108:53:10","trueExpression":{"hexValue":"31","id":2737,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11156:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2740,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11107:55:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11098:64:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2719,"id":2742,"nodeType":"Return","src":"11091:71:10"}]}]},"documentation":{"id":2710,"nodeType":"StructuredDocumentation","src":"10785:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2745,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10942:5:10","nodeType":"FunctionDefinition","parameters":{"id":2716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2712,"mutability":"mutable","name":"value","nameLocation":"10956:5:10","nodeType":"VariableDeclaration","scope":2745,"src":"10948:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2711,"name":"uint256","nodeType":"ElementaryTypeName","src":"10948:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2715,"mutability":"mutable","name":"rounding","nameLocation":"10972:8:10","nodeType":"VariableDeclaration","scope":2745,"src":"10963:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"typeName":{"id":2714,"nodeType":"UserDefinedTypeName","pathNode":{"id":2713,"name":"Rounding","nameLocations":["10963:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"10963:8:10"},"referencedDeclaration":2014,"src":"10963:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"10947:34:10"},"returnParameters":{"id":2719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2718,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2745,"src":"11005:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2717,"name":"uint256","nodeType":"ElementaryTypeName","src":"11005:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11004:9:10"},"scope":2872,"src":"10933:246:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2831,"nodeType":"Block","src":"11493:600:10","statements":[{"assignments":[2754],"declarations":[{"constant":false,"id":2754,"mutability":"mutable","name":"result","nameLocation":"11511:6:10","nodeType":"VariableDeclaration","scope":2831,"src":"11503:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2753,"name":"uint256","nodeType":"ElementaryTypeName","src":"11503:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2756,"initialValue":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11520:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11503:18:10"},{"id":2828,"nodeType":"UncheckedBlock","src":"11531:533:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2759,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2757,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11559:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2758,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11568:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11559:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2760,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11574:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11559:16:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2771,"nodeType":"IfStatement","src":"11555:98:10","trueBody":{"id":2770,"nodeType":"Block","src":"11577:76:10","statements":[{"expression":{"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11595:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11605:3:10","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11595:13:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2765,"nodeType":"ExpressionStatement","src":"11595:13:10"},{"expression":{"id":2768,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2766,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"11626:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2767,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11636:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11626:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2769,"nodeType":"ExpressionStatement","src":"11626:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2772,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11670:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2773,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11679:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11670:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11684:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11670:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2786,"nodeType":"IfStatement","src":"11666:95:10","trueBody":{"id":2785,"nodeType":"Block","src":"11687:74:10","statements":[{"expression":{"id":2779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11705:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11715:2:10","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11705:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2780,"nodeType":"ExpressionStatement","src":"11705:12:10"},{"expression":{"id":2783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2781,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"11735:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11745:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11735:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2784,"nodeType":"ExpressionStatement","src":"11735:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2791,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2787,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11778:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2788,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11787:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11778:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2790,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11792:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11778:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2801,"nodeType":"IfStatement","src":"11774:95:10","trueBody":{"id":2800,"nodeType":"Block","src":"11795:74:10","statements":[{"expression":{"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11813:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11823:2:10","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"11813:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2795,"nodeType":"ExpressionStatement","src":"11813:12:10"},{"expression":{"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2796,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"11843:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2797,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11853:1:10","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"11843:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2799,"nodeType":"ExpressionStatement","src":"11843:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2802,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11886:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2803,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11895:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11886:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2805,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11900:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11886:15:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2816,"nodeType":"IfStatement","src":"11882:95:10","trueBody":{"id":2815,"nodeType":"Block","src":"11903:74:10","statements":[{"expression":{"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11921:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11931:2:10","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11921:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2810,"nodeType":"ExpressionStatement","src":"11921:12:10"},{"expression":{"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2811,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"11951:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2812,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11961:1:10","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"11951:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2814,"nodeType":"ExpressionStatement","src":"11951:11:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2819,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2817,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"11994:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12003:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"11994:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2820,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12007:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11994:14:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2827,"nodeType":"IfStatement","src":"11990:64:10","trueBody":{"id":2826,"nodeType":"Block","src":"12010:44:10","statements":[{"expression":{"id":2824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2822,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"12028:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12038:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12028:11:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2825,"nodeType":"ExpressionStatement","src":"12028:11:10"}]}}]},{"expression":{"id":2829,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2754,"src":"12080:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2752,"id":2830,"nodeType":"Return","src":"12073:13:10"}]},"documentation":{"id":2746,"nodeType":"StructuredDocumentation","src":"11185:240:10","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2832,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11439:6:10","nodeType":"FunctionDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2748,"mutability":"mutable","name":"value","nameLocation":"11454:5:10","nodeType":"VariableDeclaration","scope":2832,"src":"11446:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2747,"name":"uint256","nodeType":"ElementaryTypeName","src":"11446:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11445:15:10"},"returnParameters":{"id":2752,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2751,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2832,"src":"11484:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2750,"name":"uint256","nodeType":"ElementaryTypeName","src":"11484:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11483:9:10"},"scope":2872,"src":"11430:663:10","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2870,"nodeType":"Block","src":"12329:173:10","statements":[{"id":2869,"nodeType":"UncheckedBlock","src":"12339:157:10","statements":[{"assignments":[2844],"declarations":[{"constant":false,"id":2844,"mutability":"mutable","name":"result","nameLocation":"12371:6:10","nodeType":"VariableDeclaration","scope":2869,"src":"12363:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2843,"name":"uint256","nodeType":"ElementaryTypeName","src":"12363:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2848,"initialValue":{"arguments":[{"id":2846,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"12387:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2845,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2832,2871],"referencedDeclaration":2832,"src":"12380:6:10","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12380:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12363:30:10"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"12414:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"id":2853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2850,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2838,"src":"12424:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2851,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2014,"src":"12436:8:10","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$2014_$","typeString":"type(enum Math.Rounding)"}},"id":2852,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12445:2:10","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":2012,"src":"12436:11:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"src":"12424:23:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2861,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2854,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2855,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2844,"src":"12457:6:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"hexValue":"38","id":2856,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12466:1:10","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12457:10:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2858,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12456:12:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:17:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2860,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2835,"src":"12471:5:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12451:25:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12424:52:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12483:1:10","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2865,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12424:60:10","trueExpression":{"hexValue":"31","id":2863,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12479:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2866,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12423:62:10","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12414:71:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2842,"id":2868,"nodeType":"Return","src":"12407:78:10"}]}]},"documentation":{"id":2833,"nodeType":"StructuredDocumentation","src":"12099:143:10","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2871,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12256:6:10","nodeType":"FunctionDefinition","parameters":{"id":2839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2835,"mutability":"mutable","name":"value","nameLocation":"12271:5:10","nodeType":"VariableDeclaration","scope":2871,"src":"12263:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2834,"name":"uint256","nodeType":"ElementaryTypeName","src":"12263:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2838,"mutability":"mutable","name":"rounding","nameLocation":"12287:8:10","nodeType":"VariableDeclaration","scope":2871,"src":"12278:17:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"},"typeName":{"id":2837,"nodeType":"UserDefinedTypeName","pathNode":{"id":2836,"name":"Rounding","nameLocations":["12278:8:10"],"nodeType":"IdentifierPath","referencedDeclaration":2014,"src":"12278:8:10"},"referencedDeclaration":2014,"src":"12278:8:10","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$2014","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12262:34:10"},"returnParameters":{"id":2842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2841,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2871,"src":"12320:7:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2840,"name":"uint256","nodeType":"ElementaryTypeName","src":"12320:7:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12319:9:10"},"scope":2872,"src":"12247:255:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2873,"src":"202:12302:10","usedErrors":[]}],"src":"103:12402:10"},"id":10},"account-abstraction/contracts/core/BasePaymaster.sol":{"ast":{"absolutePath":"account-abstraction/contracts/core/BasePaymaster.sol","exportedSymbols":{"BasePaymaster":[3092],"Context":[1471],"IAggregator":[3364],"IEntryPoint":[3568],"INonceManager":[3587],"IPaymaster":[3622],"IStakeManager":[3727],"Ownable":[112],"UserOperation":[3754],"UserOperationLib":[3924],"ValidationData":[3101],"_intersectTimeRange":[3245],"_packValidationData":[3282,3320],"_parseValidationData":[3160],"calldataKeccak":[3330]},"id":3093,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":2874,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:11"},{"absolutePath":"@openzeppelin/contracts/access/Ownable.sol","file":"@openzeppelin/contracts/access/Ownable.sol","id":2875,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3093,"sourceUnit":113,"src":"100:52:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/IPaymaster.sol","file":"../interfaces/IPaymaster.sol","id":2876,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3093,"sourceUnit":3623,"src":"153:38:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/IEntryPoint.sol","file":"../interfaces/IEntryPoint.sol","id":2877,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3093,"sourceUnit":3569,"src":"192:39:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/core/Helpers.sol","file":"./Helpers.sol","id":2878,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3093,"sourceUnit":3331,"src":"232:23:11","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2880,"name":"IPaymaster","nameLocations":["444:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":3622,"src":"444:10:11"},"id":2881,"nodeType":"InheritanceSpecifier","src":"444:10:11"},{"baseName":{"id":2882,"name":"Ownable","nameLocations":["456:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":112,"src":"456:7:11"},"id":2883,"nodeType":"InheritanceSpecifier","src":"456:7:11"}],"canonicalName":"BasePaymaster","contractDependencies":[],"contractKind":"contract","documentation":{"id":2879,"nodeType":"StructuredDocumentation","src":"257:151:11","text":" Helper class for creating a paymaster.\n provides helper methods for staking.\n validates that the postOp is called only by the entryPoint"},"fullyImplemented":false,"id":3092,"linearizedBaseContracts":[3092,112,1471,3622],"name":"BasePaymaster","nameLocation":"427:13:11","nodeType":"ContractDefinition","nodes":[{"constant":false,"functionSelector":"b0d691fe","id":2886,"mutability":"immutable","name":"entryPoint","nameLocation":"500:10:11","nodeType":"VariableDeclaration","scope":3092,"src":"471:39:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"},"typeName":{"id":2885,"nodeType":"UserDefinedTypeName","pathNode":{"id":2884,"name":"IEntryPoint","nameLocations":["471:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":3568,"src":"471:11:11"},"referencedDeclaration":3568,"src":"471:11:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"visibility":"public"},{"body":{"id":2896,"nodeType":"Block","src":"554:41:11","statements":[{"expression":{"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2892,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"564:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2893,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"577:11:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"src":"564:24:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":2895,"nodeType":"ExpressionStatement","src":"564:24:11"}]},"id":2897,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"_entryPoint","nameLocation":"541:11:11","nodeType":"VariableDeclaration","scope":2897,"src":"529:23:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"},"typeName":{"id":2888,"nodeType":"UserDefinedTypeName","pathNode":{"id":2887,"name":"IEntryPoint","nameLocations":["529:11:11"],"nodeType":"IdentifierPath","referencedDeclaration":3568,"src":"529:11:11"},"referencedDeclaration":3568,"src":"529:11:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"visibility":"internal"}],"src":"528:25:11"},"returnParameters":{"id":2891,"nodeType":"ParameterList","parameters":[],"src":"554:0:11"},"scope":3092,"src":"517:78:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3610],"body":{"id":2922,"nodeType":"Block","src":"810:112:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2913,"name":"_requireFromEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"821:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"821:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2915,"nodeType":"ExpressionStatement","src":"821:24:11"},{"expression":{"arguments":[{"id":2917,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2901,"src":"887:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},{"id":2918,"name":"userOpHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2903,"src":"895:10:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2919,"name":"maxCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2905,"src":"907:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2916,"name":"_validatePaymasterUserOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2937,"src":"862:24:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_UserOperation_$3754_calldata_ptr_$_t_bytes32_$_t_uint256_$returns$_t_bytes_memory_ptr_$_t_uint256_$","typeString":"function (struct UserOperation calldata,bytes32,uint256) returns (bytes memory,uint256)"}},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"862:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes memory,uint256)"}},"functionReturnParameters":2912,"id":2921,"nodeType":"Return","src":"855:60:11"}]},"documentation":{"id":2898,"nodeType":"StructuredDocumentation","src":"601:26:11","text":"@inheritdoc IPaymaster"},"functionSelector":"f465c77e","id":2923,"implemented":true,"kind":"function","modifiers":[],"name":"validatePaymasterUserOp","nameLocation":"641:23:11","nodeType":"FunctionDefinition","overrides":{"id":2907,"nodeType":"OverrideSpecifier","overrides":[],"src":"746:8:11"},"parameters":{"id":2906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2901,"mutability":"mutable","name":"userOp","nameLocation":"688:6:11","nodeType":"VariableDeclaration","scope":2923,"src":"665:29:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":2900,"nodeType":"UserDefinedTypeName","pathNode":{"id":2899,"name":"UserOperation","nameLocations":["665:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"665:13:11"},"referencedDeclaration":3754,"src":"665:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":2903,"mutability":"mutable","name":"userOpHash","nameLocation":"704:10:11","nodeType":"VariableDeclaration","scope":2923,"src":"696:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2902,"name":"bytes32","nodeType":"ElementaryTypeName","src":"696:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2905,"mutability":"mutable","name":"maxCost","nameLocation":"724:7:11","nodeType":"VariableDeclaration","scope":2923,"src":"716:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2904,"name":"uint256","nodeType":"ElementaryTypeName","src":"716:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"664:68:11"},"returnParameters":{"id":2912,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2909,"mutability":"mutable","name":"context","nameLocation":"777:7:11","nodeType":"VariableDeclaration","scope":2923,"src":"764:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2908,"name":"bytes","nodeType":"ElementaryTypeName","src":"764:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2911,"mutability":"mutable","name":"validationData","nameLocation":"794:14:11","nodeType":"VariableDeclaration","scope":2923,"src":"786:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2910,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"763:46:11"},"scope":3092,"src":"632:290:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"id":2937,"implemented":false,"kind":"function","modifiers":[],"name":"_validatePaymasterUserOp","nameLocation":"937:24:11","nodeType":"FunctionDefinition","parameters":{"id":2931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2926,"mutability":"mutable","name":"userOp","nameLocation":"985:6:11","nodeType":"VariableDeclaration","scope":2937,"src":"962:29:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":2925,"nodeType":"UserDefinedTypeName","pathNode":{"id":2924,"name":"UserOperation","nameLocations":["962:13:11"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"962:13:11"},"referencedDeclaration":3754,"src":"962:13:11","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":2928,"mutability":"mutable","name":"userOpHash","nameLocation":"1001:10:11","nodeType":"VariableDeclaration","scope":2937,"src":"993:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2927,"name":"bytes32","nodeType":"ElementaryTypeName","src":"993:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2930,"mutability":"mutable","name":"maxCost","nameLocation":"1021:7:11","nodeType":"VariableDeclaration","scope":2937,"src":"1013:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2929,"name":"uint256","nodeType":"ElementaryTypeName","src":"1013:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"961:68:11"},"returnParameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2933,"mutability":"mutable","name":"context","nameLocation":"1073:7:11","nodeType":"VariableDeclaration","scope":2937,"src":"1060:20:11","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2932,"name":"bytes","nodeType":"ElementaryTypeName","src":"1060:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2935,"mutability":"mutable","name":"validationData","nameLocation":"1090:14:11","nodeType":"VariableDeclaration","scope":2937,"src":"1082:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2934,"name":"uint256","nodeType":"ElementaryTypeName","src":"1082:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1059:46:11"},"scope":3092,"src":"928:178:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[3621],"body":{"id":2958,"nodeType":"Block","src":"1241:88:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2949,"name":"_requireFromEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3091,"src":"1251:22:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2950,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1251:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2951,"nodeType":"ExpressionStatement","src":"1251:24:11"},{"expression":{"arguments":[{"id":2953,"name":"mode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2941,"src":"1293:4:11","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},{"id":2954,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2943,"src":"1299:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":2955,"name":"actualGasCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2945,"src":"1308:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2952,"name":"_postOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"1285:7:11","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_enum$_PostOpMode_$3595_$_t_bytes_calldata_ptr_$_t_uint256_$returns$__$","typeString":"function (enum IPaymaster.PostOpMode,bytes calldata,uint256)"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1285:37:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2957,"nodeType":"ExpressionStatement","src":"1285:37:11"}]},"documentation":{"id":2938,"nodeType":"StructuredDocumentation","src":"1112:26:11","text":"@inheritdoc IPaymaster"},"functionSelector":"a9a23409","id":2959,"implemented":true,"kind":"function","modifiers":[],"name":"postOp","nameLocation":"1152:6:11","nodeType":"FunctionDefinition","overrides":{"id":2947,"nodeType":"OverrideSpecifier","overrides":[],"src":"1232:8:11"},"parameters":{"id":2946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"mode","nameLocation":"1170:4:11","nodeType":"VariableDeclaration","scope":2959,"src":"1159:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"},"typeName":{"id":2940,"nodeType":"UserDefinedTypeName","pathNode":{"id":2939,"name":"PostOpMode","nameLocations":["1159:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":3595,"src":"1159:10:11"},"referencedDeclaration":3595,"src":"1159:10:11","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},"visibility":"internal"},{"constant":false,"id":2943,"mutability":"mutable","name":"context","nameLocation":"1191:7:11","nodeType":"VariableDeclaration","scope":2959,"src":"1176:22:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2942,"name":"bytes","nodeType":"ElementaryTypeName","src":"1176:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2945,"mutability":"mutable","name":"actualGasCost","nameLocation":"1208:13:11","nodeType":"VariableDeclaration","scope":2959,"src":"1200:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2944,"name":"uint256","nodeType":"ElementaryTypeName","src":"1200:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1158:64:11"},"returnParameters":{"id":2948,"nodeType":"ParameterList","parameters":[],"src":"1241:0:11"},"scope":3092,"src":"1143:186:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2979,"nodeType":"Block","src":"2187:187:11","statements":[{"expression":{"components":[{"id":2970,"name":"mode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2963,"src":"2199:4:11","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},{"id":2971,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2965,"src":"2204:7:11","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"id":2972,"name":"actualGasCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2967,"src":"2212:13:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2973,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2198:28:11","typeDescriptions":{"typeIdentifier":"t_tuple$_t_enum$_PostOpMode_$3595_$_t_bytes_calldata_ptr_$_t_uint256_$","typeString":"tuple(enum IPaymaster.PostOpMode,bytes calldata,uint256)"}},"id":2974,"nodeType":"ExpressionStatement","src":"2198:28:11"},{"expression":{"arguments":[{"hexValue":"6d757374206f76657272696465","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2351:15:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_cfebc7a599a78eb43bf12fd80d02a05464d681b0cdda54c5b6b39e95676c7f1d","typeString":"literal_string \"must override\""},"value":"must override"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_cfebc7a599a78eb43bf12fd80d02a05464d681b0cdda54c5b6b39e95676c7f1d","typeString":"literal_string \"must override\""}],"id":2975,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"2344:6:11","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2344:23:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2978,"nodeType":"ExpressionStatement","src":"2344:23:11"}]},"documentation":{"id":2960,"nodeType":"StructuredDocumentation","src":"1335:749:11","text":" post-operation handler.\n (verified to be called only through the entryPoint)\n @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\n @param mode enum with the following options:\n      opSucceeded - user operation succeeded.\n      opReverted  - user op reverted. still has to pay for gas.\n      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\n                       Now this is the 2nd call, after user's op was deliberately reverted.\n @param context - the context value returned by validatePaymasterUserOp\n @param actualGasCost - actual gas used so far (without this postOp call)."},"id":2980,"implemented":true,"kind":"function","modifiers":[],"name":"_postOp","nameLocation":"2098:7:11","nodeType":"FunctionDefinition","parameters":{"id":2968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"mode","nameLocation":"2117:4:11","nodeType":"VariableDeclaration","scope":2980,"src":"2106:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"},"typeName":{"id":2962,"nodeType":"UserDefinedTypeName","pathNode":{"id":2961,"name":"PostOpMode","nameLocations":["2106:10:11"],"nodeType":"IdentifierPath","referencedDeclaration":3595,"src":"2106:10:11"},"referencedDeclaration":3595,"src":"2106:10:11","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},"visibility":"internal"},{"constant":false,"id":2965,"mutability":"mutable","name":"context","nameLocation":"2138:7:11","nodeType":"VariableDeclaration","scope":2980,"src":"2123:22:11","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2964,"name":"bytes","nodeType":"ElementaryTypeName","src":"2123:5:11","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2967,"mutability":"mutable","name":"actualGasCost","nameLocation":"2155:13:11","nodeType":"VariableDeclaration","scope":2980,"src":"2147:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2966,"name":"uint256","nodeType":"ElementaryTypeName","src":"2147:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2105:64:11"},"returnParameters":{"id":2969,"nodeType":"ParameterList","parameters":[],"src":"2187:0:11"},"scope":3092,"src":"2089:285:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2996,"nodeType":"Block","src":"2508:71:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":2992,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2566:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaymaster_$3092","typeString":"contract BasePaymaster"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BasePaymaster_$3092","typeString":"contract BasePaymaster"}],"id":2991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2558:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2990,"name":"address","nodeType":"ElementaryTypeName","src":"2558:7:11","typeDescriptions":{}}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2558:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2984,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"2518:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2529:9:11","memberName":"depositTo","nodeType":"MemberAccess","referencedDeclaration":3702,"src":"2518:20:11","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$returns$__$","typeString":"function (address) payable external"}},"id":2989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":2987,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2547:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2551:5:11","memberName":"value","nodeType":"MemberAccess","src":"2547:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2518:39:11","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_address_$returns$__$value","typeString":"function (address) payable external"}},"id":2994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2518:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2995,"nodeType":"ExpressionStatement","src":"2518:54:11"}]},"documentation":{"id":2981,"nodeType":"StructuredDocumentation","src":"2380:89:11","text":" add a deposit for this paymaster, used for paying for transaction fees"},"functionSelector":"d0e30db0","id":2997,"implemented":true,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"2483:7:11","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[],"src":"2490:2:11"},"returnParameters":{"id":2983,"nodeType":"ParameterList","parameters":[],"src":"2508:0:11"},"scope":3092,"src":"2474:105:11","stateMutability":"payable","virtual":false,"visibility":"public"},{"body":{"id":3014,"nodeType":"Block","src":"2807:63:11","statements":[{"expression":{"arguments":[{"id":3010,"name":"withdrawAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3000,"src":"2839:15:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":3011,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3002,"src":"2856:6:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3007,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"2817:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":3009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2828:10:11","memberName":"withdrawTo","nodeType":"MemberAccess","referencedDeclaration":3726,"src":"2817:21:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_payable_$_t_uint256_$returns$__$","typeString":"function (address payable,uint256) external"}},"id":3012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2817:46:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3013,"nodeType":"ExpressionStatement","src":"2817:46:11"}]},"documentation":{"id":2998,"nodeType":"StructuredDocumentation","src":"2585:131:11","text":" withdraw value from the deposit\n @param withdrawAddress target to send to\n @param amount to withdraw"},"functionSelector":"205c2878","id":3015,"implemented":true,"kind":"function","modifiers":[{"id":3005,"kind":"modifierInvocation","modifierName":{"id":3004,"name":"onlyOwner","nameLocations":["2797:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"2797:9:11"},"nodeType":"ModifierInvocation","src":"2797:9:11"}],"name":"withdrawTo","nameLocation":"2730:10:11","nodeType":"FunctionDefinition","parameters":{"id":3003,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3000,"mutability":"mutable","name":"withdrawAddress","nameLocation":"2757:15:11","nodeType":"VariableDeclaration","scope":3015,"src":"2741:31:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2999,"name":"address","nodeType":"ElementaryTypeName","src":"2741:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3002,"mutability":"mutable","name":"amount","nameLocation":"2782:6:11","nodeType":"VariableDeclaration","scope":3015,"src":"2774:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3001,"name":"uint256","nodeType":"ElementaryTypeName","src":"2774:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2740:49:11"},"returnParameters":{"id":3006,"nodeType":"ParameterList","parameters":[],"src":"2807:0:11"},"scope":3092,"src":"2721:149:11","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":3032,"nodeType":"Block","src":"3163:72:11","statements":[{"expression":{"arguments":[{"id":3029,"name":"unstakeDelaySec","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3018,"src":"3212:15:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint32","typeString":"uint32"}],"expression":{"id":3023,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"3173:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":3025,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3184:8:11","memberName":"addStake","nodeType":"MemberAccess","referencedDeclaration":3708,"src":"3173:19:11","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint32_$returns$__$","typeString":"function (uint32) payable external"}},"id":3028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"expression":{"id":3026,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3201:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3205:5:11","memberName":"value","nodeType":"MemberAccess","src":"3201:9:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"3173:38:11","typeDescriptions":{"typeIdentifier":"t_function_external_payable$_t_uint32_$returns$__$value","typeString":"function (uint32) payable external"}},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3173:55:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3031,"nodeType":"ExpressionStatement","src":"3173:55:11"}]},"documentation":{"id":3016,"nodeType":"StructuredDocumentation","src":"2875:214:11","text":" add stake for this paymaster.\n This method can also carry eth value to add to the current stake.\n @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased."},"functionSelector":"0396cb60","id":3033,"implemented":true,"kind":"function","modifiers":[{"id":3021,"kind":"modifierInvocation","modifierName":{"id":3020,"name":"onlyOwner","nameLocations":["3153:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3153:9:11"},"nodeType":"ModifierInvocation","src":"3153:9:11"}],"name":"addStake","nameLocation":"3103:8:11","nodeType":"FunctionDefinition","parameters":{"id":3019,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3018,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"3119:15:11","nodeType":"VariableDeclaration","scope":3033,"src":"3112:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3017,"name":"uint32","nodeType":"ElementaryTypeName","src":"3112:6:11","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"3111:24:11"},"returnParameters":{"id":3022,"nodeType":"ParameterList","parameters":[],"src":"3163:0:11"},"scope":3092,"src":"3094:141:11","stateMutability":"payable","virtual":false,"visibility":"external"},{"body":{"id":3047,"nodeType":"Block","src":"3370:59:11","statements":[{"expression":{"arguments":[{"arguments":[{"id":3043,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3416:4:11","typeDescriptions":{"typeIdentifier":"t_contract$_BasePaymaster_$3092","typeString":"contract BasePaymaster"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_BasePaymaster_$3092","typeString":"contract BasePaymaster"}],"id":3042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3408:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3041,"name":"address","nodeType":"ElementaryTypeName","src":"3408:7:11","typeDescriptions":{}}},"id":3044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3408:13:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3039,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"3387:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":3040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3398:9:11","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3696,"src":"3387:20:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3387:35:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3038,"id":3046,"nodeType":"Return","src":"3380:42:11"}]},"documentation":{"id":3034,"nodeType":"StructuredDocumentation","src":"3241:72:11","text":" return current paymaster's deposit on the entryPoint."},"functionSelector":"c399ec88","id":3048,"implemented":true,"kind":"function","modifiers":[],"name":"getDeposit","nameLocation":"3327:10:11","nodeType":"FunctionDefinition","parameters":{"id":3035,"nodeType":"ParameterList","parameters":[],"src":"3337:2:11"},"returnParameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3037,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3048,"src":"3361:7:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3036,"name":"uint256","nodeType":"ElementaryTypeName","src":"3361:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3360:9:11"},"scope":3092,"src":"3318:111:11","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":3059,"nodeType":"Block","src":"3630:41:11","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3054,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"3640:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":3056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3651:11:11","memberName":"unlockStake","nodeType":"MemberAccess","referencedDeclaration":3712,"src":"3640:22:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3640:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3058,"nodeType":"ExpressionStatement","src":"3640:24:11"}]},"documentation":{"id":3049,"nodeType":"StructuredDocumentation","src":"3435:148:11","text":" unlock the stake, in order to withdraw it.\n The paymaster can't serve requests once unlocked, until it calls addStake again"},"functionSelector":"bb9fe6bf","id":3060,"implemented":true,"kind":"function","modifiers":[{"id":3052,"kind":"modifierInvocation","modifierName":{"id":3051,"name":"onlyOwner","nameLocations":["3620:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3620:9:11"},"nodeType":"ModifierInvocation","src":"3620:9:11"}],"name":"unlockStake","nameLocation":"3597:11:11","nodeType":"FunctionDefinition","parameters":{"id":3050,"nodeType":"ParameterList","parameters":[],"src":"3608:2:11"},"returnParameters":{"id":3053,"nodeType":"ParameterList","parameters":[],"src":"3630:0:11"},"scope":3092,"src":"3588:83:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3074,"nodeType":"Block","src":"3965:58:11","statements":[{"expression":{"arguments":[{"id":3071,"name":"withdrawAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3063,"src":"4000:15:11","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":3068,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"3975:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3986:13:11","memberName":"withdrawStake","nodeType":"MemberAccess","referencedDeclaration":3718,"src":"3975:24:11","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_payable_$returns$__$","typeString":"function (address payable) external"}},"id":3072,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3975:41:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3073,"nodeType":"ExpressionStatement","src":"3975:41:11"}]},"documentation":{"id":3061,"nodeType":"StructuredDocumentation","src":"3677:208:11","text":" withdraw the entire paymaster's stake.\n stake must be unlocked first (and then wait for the unstakeDelay to be over)\n @param withdrawAddress the address to send withdrawn value."},"functionSelector":"c23a5cea","id":3075,"implemented":true,"kind":"function","modifiers":[{"id":3066,"kind":"modifierInvocation","modifierName":{"id":3065,"name":"onlyOwner","nameLocations":["3955:9:11"],"nodeType":"IdentifierPath","referencedDeclaration":31,"src":"3955:9:11"},"nodeType":"ModifierInvocation","src":"3955:9:11"}],"name":"withdrawStake","nameLocation":"3899:13:11","nodeType":"FunctionDefinition","parameters":{"id":3064,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3063,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3929:15:11","nodeType":"VariableDeclaration","scope":3075,"src":"3913:31:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3062,"name":"address","nodeType":"ElementaryTypeName","src":"3913:15:11","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3912:33:11"},"returnParameters":{"id":3067,"nodeType":"ParameterList","parameters":[],"src":"3965:0:11"},"scope":3092,"src":"3890:133:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":3090,"nodeType":"Block","src":"4138:84:11","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3080,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4156:3:11","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4160:6:11","memberName":"sender","nodeType":"MemberAccess","src":"4156:10:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":3084,"name":"entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2886,"src":"4178:10:11","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}],"id":3083,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4170:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3082,"name":"address","nodeType":"ElementaryTypeName","src":"4170:7:11","typeDescriptions":{}}},"id":3085,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4170:19:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4156:33:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"53656e646572206e6f7420456e747279506f696e74","id":3087,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4191:23:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_4f1183fece38266d89bbd94d1c93e02d713970166951c4c8f2c10a21e7cddae9","typeString":"literal_string \"Sender not EntryPoint\""},"value":"Sender not EntryPoint"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4f1183fece38266d89bbd94d1c93e02d713970166951c4c8f2c10a21e7cddae9","typeString":"literal_string \"Sender not EntryPoint\""}],"id":3079,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4148:7:11","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4148:67:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3089,"nodeType":"ExpressionStatement","src":"4148:67:11"}]},"documentation":{"id":3076,"nodeType":"StructuredDocumentation","src":"4029:53:11","text":"validate the call is made from a valid entrypoint"},"id":3091,"implemented":true,"kind":"function","modifiers":[],"name":"_requireFromEntryPoint","nameLocation":"4096:22:11","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[],"src":"4118:2:11"},"returnParameters":{"id":3078,"nodeType":"ParameterList","parameters":[],"src":"4138:0:11"},"scope":3092,"src":"4087:135:11","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":3093,"src":"409:3815:11","usedErrors":[]}],"src":"36:4189:11"},"id":11},"account-abstraction/contracts/core/Helpers.sol":{"ast":{"absolutePath":"account-abstraction/contracts/core/Helpers.sol","exportedSymbols":{"ValidationData":[3101],"_intersectTimeRange":[3245],"_packValidationData":[3282,3320],"_parseValidationData":[3160],"calldataKeccak":[3330]},"id":3331,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3094,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:12"},{"canonicalName":"ValidationData","id":3101,"members":[{"constant":false,"id":3096,"mutability":"mutable","name":"aggregator","nameLocation":"730:10:12","nodeType":"VariableDeclaration","scope":3101,"src":"722:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3095,"name":"address","nodeType":"ElementaryTypeName","src":"722:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3098,"mutability":"mutable","name":"validAfter","nameLocation":"757:10:12","nodeType":"VariableDeclaration","scope":3101,"src":"750:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3097,"name":"uint48","nodeType":"ElementaryTypeName","src":"750:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":3100,"mutability":"mutable","name":"validUntil","nameLocation":"784:10:12","nodeType":"VariableDeclaration","scope":3101,"src":"777:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3099,"name":"uint48","nodeType":"ElementaryTypeName","src":"777:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"ValidationData","nameLocation":"697:14:12","nodeType":"StructDefinition","scope":3331,"src":"690:111:12","visibility":"public"},{"body":{"id":3159,"nodeType":"Block","src":"997:346:12","statements":[{"assignments":[3110],"declarations":[{"constant":false,"id":3110,"mutability":"mutable","name":"aggregator","nameLocation":"1015:10:12","nodeType":"VariableDeclaration","scope":3159,"src":"1007:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3109,"name":"address","nodeType":"ElementaryTypeName","src":"1007:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3118,"initialValue":{"arguments":[{"arguments":[{"id":3115,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"1044:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1036:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3113,"name":"uint160","nodeType":"ElementaryTypeName","src":"1036:7:12","typeDescriptions":{}}},"id":3116,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1036:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3112,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1028:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3111,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:12","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1028:32:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1007:53:12"},{"assignments":[3120],"declarations":[{"constant":false,"id":3120,"mutability":"mutable","name":"validUntil","nameLocation":"1077:10:12","nodeType":"VariableDeclaration","scope":3159,"src":"1070:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3119,"name":"uint48","nodeType":"ElementaryTypeName","src":"1070:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":3127,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3123,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"1097:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313630","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1115:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1097:21:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3122,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1090:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3121,"name":"uint48","nodeType":"ElementaryTypeName","src":"1090:6:12","typeDescriptions":{}}},"id":3126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1090:29:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1070:49:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":3130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3128,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"1133:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1147:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1133:15:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3140,"nodeType":"IfStatement","src":"1129:75:12","trueBody":{"id":3139,"nodeType":"Block","src":"1150:54:12","statements":[{"expression":{"id":3137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3131,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"1164:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"arguments":[{"id":3134,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1182:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3133,"name":"uint48","nodeType":"ElementaryTypeName","src":"1182:6:12","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"}],"id":3132,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1177:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:12:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint48","typeString":"type(uint48)"}},"id":3136,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1190:3:12","memberName":"max","nodeType":"MemberAccess","src":"1177:16:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"1164:29:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":3138,"nodeType":"ExpressionStatement","src":"1164:29:12"}]}},{"assignments":[3142],"declarations":[{"constant":false,"id":3142,"mutability":"mutable","name":"validAfter","nameLocation":"1220:10:12","nodeType":"VariableDeclaration","scope":3159,"src":"1213:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3141,"name":"uint48","nodeType":"ElementaryTypeName","src":"1213:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":3152,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3145,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"1240:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":3148,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3438","id":3146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1259:2:12","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"313630","id":3147,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1264:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"1259:8:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":3149,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"1258:10:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"1240:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1233:6:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":3143,"name":"uint48","nodeType":"ElementaryTypeName","src":"1233:6:12","typeDescriptions":{}}},"id":3151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1233:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1213:56:12"},{"expression":{"arguments":[{"id":3154,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"1301:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3155,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3142,"src":"1313:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":3156,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3120,"src":"1325:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":3153,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"1286:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$3101_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":3157,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1286:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":3108,"id":3158,"nodeType":"Return","src":"1279:57:12"}]},"id":3160,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_parseValidationData","nameLocation":"913:20:12","nodeType":"FunctionDefinition","parameters":{"id":3104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3103,"mutability":"mutable","name":"validationData","nameLocation":"939:14:12","nodeType":"VariableDeclaration","scope":3160,"src":"934:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3102,"name":"uint","nodeType":"ElementaryTypeName","src":"934:4:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"933:21:12"},"returnParameters":{"id":3108,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3107,"mutability":"mutable","name":"data","nameLocation":"991:4:12","nodeType":"VariableDeclaration","scope":3160,"src":"969:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":3106,"nodeType":"UserDefinedTypeName","pathNode":{"id":3105,"name":"ValidationData","nameLocations":["969:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3101,"src":"969:14:12"},"referencedDeclaration":3101,"src":"969:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"968:28:12"},"scope":3331,"src":"904:439:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3244,"nodeType":"Block","src":"1515:804:12","statements":[{"assignments":[3172],"declarations":[{"constant":false,"id":3172,"mutability":"mutable","name":"accountValidationData","nameLocation":"1547:21:12","nodeType":"VariableDeclaration","scope":3244,"src":"1525:43:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":3171,"nodeType":"UserDefinedTypeName","pathNode":{"id":3170,"name":"ValidationData","nameLocations":["1525:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3101,"src":"1525:14:12"},"referencedDeclaration":3101,"src":"1525:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":3176,"initialValue":{"arguments":[{"id":3174,"name":"validationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"1592:14:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3173,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"1571:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$3101_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":3175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1571:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1525:82:12"},{"assignments":[3179],"declarations":[{"constant":false,"id":3179,"mutability":"mutable","name":"pmValidationData","nameLocation":"1639:16:12","nodeType":"VariableDeclaration","scope":3244,"src":"1617:38:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":3178,"nodeType":"UserDefinedTypeName","pathNode":{"id":3177,"name":"ValidationData","nameLocations":["1617:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3101,"src":"1617:14:12"},"referencedDeclaration":3101,"src":"1617:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"id":3183,"initialValue":{"arguments":[{"id":3181,"name":"paymasterValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3164,"src":"1679:23:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3180,"name":"_parseValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3160,"src":"1658:20:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_struct$_ValidationData_$3101_memory_ptr_$","typeString":"function (uint256) pure returns (struct ValidationData memory)"}},"id":3182,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1658:45:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"nodeType":"VariableDeclarationStatement","src":"1617:86:12"},{"assignments":[3185],"declarations":[{"constant":false,"id":3185,"mutability":"mutable","name":"aggregator","nameLocation":"1721:10:12","nodeType":"VariableDeclaration","scope":3244,"src":"1713:18:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3184,"name":"address","nodeType":"ElementaryTypeName","src":"1713:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3188,"initialValue":{"expression":{"id":3186,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"1734:21:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3187,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1756:10:12","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"1734:32:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1713:53:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3189,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1780:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1802:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3191,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1794:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3190,"name":"address","nodeType":"ElementaryTypeName","src":"1794:7:12","typeDescriptions":{}}},"id":3193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1794:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1780:24:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3201,"nodeType":"IfStatement","src":"1776:95:12","trueBody":{"id":3200,"nodeType":"Block","src":"1806:65:12","statements":[{"expression":{"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3195,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"1820:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":3196,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"1833:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3197,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1850:10:12","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"1833:27:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1820:40:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3199,"nodeType":"ExpressionStatement","src":"1820:40:12"}]}},{"assignments":[3203],"declarations":[{"constant":false,"id":3203,"mutability":"mutable","name":"validAfter","nameLocation":"1887:10:12","nodeType":"VariableDeclaration","scope":3244,"src":"1880:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3202,"name":"uint48","nodeType":"ElementaryTypeName","src":"1880:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":3206,"initialValue":{"expression":{"id":3204,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"1900:21:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1922:10:12","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":3098,"src":"1900:32:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1880:52:12"},{"assignments":[3208],"declarations":[{"constant":false,"id":3208,"mutability":"mutable","name":"validUntil","nameLocation":"1949:10:12","nodeType":"VariableDeclaration","scope":3244,"src":"1942:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3207,"name":"uint48","nodeType":"ElementaryTypeName","src":"1942:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":3211,"initialValue":{"expression":{"id":3209,"name":"accountValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3172,"src":"1962:21:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3210,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1984:10:12","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":3100,"src":"1962:32:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"1942:52:12"},{"assignments":[3213],"declarations":[{"constant":false,"id":3213,"mutability":"mutable","name":"pmValidAfter","nameLocation":"2011:12:12","nodeType":"VariableDeclaration","scope":3244,"src":"2004:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3212,"name":"uint48","nodeType":"ElementaryTypeName","src":"2004:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":3216,"initialValue":{"expression":{"id":3214,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2026:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3215,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2043:10:12","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":3098,"src":"2026:27:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2004:49:12"},{"assignments":[3218],"declarations":[{"constant":false,"id":3218,"mutability":"mutable","name":"pmValidUntil","nameLocation":"2070:12:12","nodeType":"VariableDeclaration","scope":3244,"src":"2063:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3217,"name":"uint48","nodeType":"ElementaryTypeName","src":"2063:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"id":3221,"initialValue":{"expression":{"id":3219,"name":"pmValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2085:16:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3220,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2102:10:12","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":3100,"src":"2085:27:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"VariableDeclarationStatement","src":"2063:49:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":3224,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3222,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2127:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3223,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"2140:12:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2127:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3229,"nodeType":"IfStatement","src":"2123:56:12","trueBody":{"expression":{"id":3227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3225,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2154:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3226,"name":"pmValidAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3213,"src":"2167:12:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2154:25:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":3228,"nodeType":"ExpressionStatement","src":"2154:25:12"}},{"condition":{"commonType":{"typeIdentifier":"t_uint48","typeString":"uint48"},"id":3232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3230,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"2193:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3231,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"2206:12:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2193:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3237,"nodeType":"IfStatement","src":"2189:56:12","trueBody":{"expression":{"id":3235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3233,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"2220:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3234,"name":"pmValidUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3218,"src":"2233:12:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"src":"2220:25:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"id":3236,"nodeType":"ExpressionStatement","src":"2220:25:12"}},{"expression":{"arguments":[{"id":3239,"name":"aggregator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"2277:10:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3240,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3203,"src":"2289:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":3241,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3208,"src":"2301:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":3238,"name":"ValidationData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3101,"src":"2262:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_ValidationData_$3101_storage_ptr_$","typeString":"type(struct ValidationData storage pointer)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:50:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"functionReturnParameters":3169,"id":3243,"nodeType":"Return","src":"2255:57:12"}]},"id":3245,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_intersectTimeRange","nameLocation":"1401:19:12","nodeType":"FunctionDefinition","parameters":{"id":3165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3162,"mutability":"mutable","name":"validationData","nameLocation":"1429:14:12","nodeType":"VariableDeclaration","scope":3245,"src":"1421:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3161,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3164,"mutability":"mutable","name":"paymasterValidationData","nameLocation":"1453:23:12","nodeType":"VariableDeclaration","scope":3245,"src":"1445:31:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3163,"name":"uint256","nodeType":"ElementaryTypeName","src":"1445:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1420:57:12"},"returnParameters":{"id":3169,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3168,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3245,"src":"1492:21:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":3167,"nodeType":"UserDefinedTypeName","pathNode":{"id":3166,"name":"ValidationData","nameLocations":["1492:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3101,"src":"1492:14:12"},"referencedDeclaration":3101,"src":"1492:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"1491:23:12"},"scope":3331,"src":"1392:927:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3281,"nodeType":"Block","src":"2511:127:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3256,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2536:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2541:10:12","memberName":"aggregator","nodeType":"MemberAccess","referencedDeclaration":3096,"src":"2536:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3255,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2528:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3254,"name":"uint160","nodeType":"ElementaryTypeName","src":"2528:7:12","typeDescriptions":{}}},"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2528:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3261,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2564:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3262,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2569:10:12","memberName":"validUntil","nodeType":"MemberAccess","referencedDeclaration":3100,"src":"2564:15:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":3260,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2556:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3259,"name":"uint256","nodeType":"ElementaryTypeName","src":"2556:7:12","typeDescriptions":{}}},"id":3263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2556:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":3264,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2584:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2556:31:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3266,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2555:33:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:60:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":3270,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"2600:4:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData memory"}},"id":3271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2605:10:12","memberName":"validAfter","nodeType":"MemberAccess","referencedDeclaration":3098,"src":"2600:15:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":3269,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2592:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3268,"name":"uint256","nodeType":"ElementaryTypeName","src":"2592:7:12","typeDescriptions":{}}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2592:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":3275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":3273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2621:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":3274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2627:2:12","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"2621:8:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":3276,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2620:10:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"2592:38:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3278,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2591:40:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2528:103:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3253,"id":3280,"nodeType":"Return","src":"2521:110:12"}]},"documentation":{"id":3246,"nodeType":"StructuredDocumentation","src":"2321:105:12","text":" helper to pack the return value for validateUserOp\n @param data - the ValidationData to pack"},"id":3282,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2440:19:12","nodeType":"FunctionDefinition","parameters":{"id":3250,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3249,"mutability":"mutable","name":"data","nameLocation":"2482:4:12","nodeType":"VariableDeclaration","scope":3282,"src":"2460:26:12","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_memory_ptr","typeString":"struct ValidationData"},"typeName":{"id":3248,"nodeType":"UserDefinedTypeName","pathNode":{"id":3247,"name":"ValidationData","nameLocations":["2460:14:12"],"nodeType":"IdentifierPath","referencedDeclaration":3101,"src":"2460:14:12"},"referencedDeclaration":3101,"src":"2460:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_ValidationData_$3101_storage_ptr","typeString":"struct ValidationData"}},"visibility":"internal"}],"src":"2459:28:12"},"returnParameters":{"id":3253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3282,"src":"2502:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3251,"name":"uint256","nodeType":"ElementaryTypeName","src":"2502:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2501:9:12"},"scope":3331,"src":"2431:207:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3319,"nodeType":"Block","src":"3062:112:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"condition":{"id":3294,"name":"sigFailed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3285,"src":"3080:9:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3096:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3080:17:12","trueExpression":{"hexValue":"31","id":3295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3092:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3298,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3079:19:12","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3301,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"3110:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":3300,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3102:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3299,"name":"uint256","nodeType":"ElementaryTypeName","src":"3102:7:12","typeDescriptions":{}}},"id":3302,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3102:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":3303,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3125:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"3102:26:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3305,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3101:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:50:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3309,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3289,"src":"3141:10:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint48","typeString":"uint48"}],"id":3308,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3133:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3307,"name":"uint256","nodeType":"ElementaryTypeName","src":"3133:7:12","typeDescriptions":{}}},"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3133:19:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"},"id":3313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"313630","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3157:3:12","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3438","id":3312,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3163:2:12","typeDescriptions":{"typeIdentifier":"t_rational_48_by_1","typeString":"int_const 48"},"value":"48"},"src":"3157:8:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}}],"id":3314,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"3156:10:12","typeDescriptions":{"typeIdentifier":"t_rational_208_by_1","typeString":"int_const 208"}},"src":"3133:33:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3316,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3132:35:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3079:88:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3293,"id":3318,"nodeType":"Return","src":"3072:95:12"}]},"documentation":{"id":3283,"nodeType":"StructuredDocumentation","src":"2640:311:12","text":" helper to pack the return value for validateUserOp, when not using an aggregator\n @param sigFailed - true for signature failure, false for success\n @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\n @param validAfter first timestamp this UserOperation is valid"},"id":3320,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_packValidationData","nameLocation":"2965:19:12","nodeType":"FunctionDefinition","parameters":{"id":3290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3285,"mutability":"mutable","name":"sigFailed","nameLocation":"2990:9:12","nodeType":"VariableDeclaration","scope":3320,"src":"2985:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3284,"name":"bool","nodeType":"ElementaryTypeName","src":"2985:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3287,"mutability":"mutable","name":"validUntil","nameLocation":"3008:10:12","nodeType":"VariableDeclaration","scope":3320,"src":"3001:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3286,"name":"uint48","nodeType":"ElementaryTypeName","src":"3001:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":3289,"mutability":"mutable","name":"validAfter","nameLocation":"3027:10:12","nodeType":"VariableDeclaration","scope":3320,"src":"3020:17:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3288,"name":"uint48","nodeType":"ElementaryTypeName","src":"3020:6:12","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"src":"2984:54:12"},"returnParameters":{"id":3293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3292,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3320,"src":"3053:7:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint256","nodeType":"ElementaryTypeName","src":"3053:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3052:9:12"},"scope":3331,"src":"2956:218:12","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3329,"nodeType":"Block","src":"3429:193:12","statements":[{"AST":{"nodeType":"YulBlock","src":"3448:168:12","statements":[{"nodeType":"YulVariableDeclaration","src":"3462:22:12","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3479:4:12","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:12"},"nodeType":"YulFunctionCall","src":"3473:11:12"},"variables":[{"name":"mem","nodeType":"YulTypedName","src":"3466:3:12","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3497:22:12","value":{"name":"data.length","nodeType":"YulIdentifier","src":"3508:11:12"},"variables":[{"name":"len","nodeType":"YulTypedName","src":"3501:3:12","type":""}]},{"expression":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"3545:3:12"},{"name":"data.offset","nodeType":"YulIdentifier","src":"3550:11:12"},{"name":"len","nodeType":"YulIdentifier","src":"3563:3:12"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3532:12:12"},"nodeType":"YulFunctionCall","src":"3532:35:12"},"nodeType":"YulExpressionStatement","src":"3532:35:12"},{"nodeType":"YulAssignment","src":"3580:26:12","value":{"arguments":[{"name":"mem","nodeType":"YulIdentifier","src":"3597:3:12"},{"name":"len","nodeType":"YulIdentifier","src":"3602:3:12"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3587:9:12"},"nodeType":"YulFunctionCall","src":"3587:19:12"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"3580:3:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3323,"isOffset":false,"isSlot":false,"src":"3508:11:12","suffix":"length","valueSize":1},{"declaration":3323,"isOffset":true,"isSlot":false,"src":"3550:11:12","suffix":"offset","valueSize":1},{"declaration":3326,"isOffset":false,"isSlot":false,"src":"3580:3:12","valueSize":1}],"id":3328,"nodeType":"InlineAssembly","src":"3439:177:12"}]},"documentation":{"id":3321,"nodeType":"StructuredDocumentation","src":"3176:176:12","text":" keccak function over calldata.\n @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it."},"id":3330,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"calldataKeccak","nameLocation":"3366:14:12","nodeType":"FunctionDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"data","nameLocation":"3396:4:12","nodeType":"VariableDeclaration","scope":3330,"src":"3381:19:12","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3322,"name":"bytes","nodeType":"ElementaryTypeName","src":"3381:5:12","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3380:21:12"},"returnParameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"ret","nameLocation":"3424:3:12","nodeType":"VariableDeclaration","scope":3330,"src":"3416:11:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3325,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3416:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3415:13:12"},"scope":3331,"src":"3357:265:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"src":"36:3588:12"},"id":12},"account-abstraction/contracts/interfaces/IAggregator.sol":{"ast":{"absolutePath":"account-abstraction/contracts/interfaces/IAggregator.sol","exportedSymbols":{"IAggregator":[3364],"UserOperation":[3754],"UserOperationLib":[3924],"calldataKeccak":[3330]},"id":3365,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3332,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:13"},{"absolutePath":"account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":3333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3365,"sourceUnit":3925,"src":"62:29:13","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IAggregator","contractDependencies":[],"contractKind":"interface","documentation":{"id":3334,"nodeType":"StructuredDocumentation","src":"93:43:13","text":" Aggregated Signatures validator."},"fullyImplemented":false,"id":3364,"linearizedBaseContracts":[3364],"name":"IAggregator","nameLocation":"147:11:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3335,"nodeType":"StructuredDocumentation","src":"166:136:13","text":" validate aggregated signature.\n revert if the aggregated signature does not match the given list of operations."},"functionSelector":"e3563a4f","id":3344,"implemented":false,"kind":"function","modifiers":[],"name":"validateSignatures","nameLocation":"316:18:13","nodeType":"FunctionDefinition","parameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3339,"mutability":"mutable","name":"userOps","nameLocation":"360:7:13","nodeType":"VariableDeclaration","scope":3344,"src":"335:32:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":3337,"nodeType":"UserDefinedTypeName","pathNode":{"id":3336,"name":"UserOperation","nameLocations":["335:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"335:13:13"},"referencedDeclaration":3754,"src":"335:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"id":3338,"nodeType":"ArrayTypeName","src":"335:15:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":3341,"mutability":"mutable","name":"signature","nameLocation":"384:9:13","nodeType":"VariableDeclaration","scope":3344,"src":"369:24:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3340,"name":"bytes","nodeType":"ElementaryTypeName","src":"369:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"334:60:13"},"returnParameters":{"id":3343,"nodeType":"ParameterList","parameters":[],"src":"408:0:13"},"scope":3364,"src":"307:102:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3345,"nodeType":"StructuredDocumentation","src":"415:576:13","text":" validate signature of a single userOp\n This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\n First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\n @param userOp the userOperation received from the user.\n @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\n    (usually empty, unless account and aggregator support some kind of \"multisig\""},"functionSelector":"64c530cd","id":3353,"implemented":false,"kind":"function","modifiers":[],"name":"validateUserOpSignature","nameLocation":"1005:23:13","nodeType":"FunctionDefinition","parameters":{"id":3349,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3348,"mutability":"mutable","name":"userOp","nameLocation":"1052:6:13","nodeType":"VariableDeclaration","scope":3353,"src":"1029:29:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3347,"nodeType":"UserDefinedTypeName","pathNode":{"id":3346,"name":"UserOperation","nameLocations":["1029:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"1029:13:13"},"referencedDeclaration":3754,"src":"1029:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1028:31:13"},"returnParameters":{"id":3352,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3351,"mutability":"mutable","name":"sigForUserOp","nameLocation":"1100:12:13","nodeType":"VariableDeclaration","scope":3353,"src":"1087:25:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3350,"name":"bytes","nodeType":"ElementaryTypeName","src":"1087:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1086:27:13"},"scope":3364,"src":"996:118:13","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3354,"nodeType":"StructuredDocumentation","src":"1120:368:13","text":" aggregate multiple signatures into a single value.\n This method is called off-chain to calculate the signature to pass with handleOps()\n bundler MAY use optimized custom code perform this aggregation\n @param userOps array of UserOperations to collect the signatures from.\n @return aggregatedSignature the aggregated signature"},"functionSelector":"275e2d79","id":3363,"implemented":false,"kind":"function","modifiers":[],"name":"aggregateSignatures","nameLocation":"1502:19:13","nodeType":"FunctionDefinition","parameters":{"id":3359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3358,"mutability":"mutable","name":"userOps","nameLocation":"1547:7:13","nodeType":"VariableDeclaration","scope":3363,"src":"1522:32:13","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":3356,"nodeType":"UserDefinedTypeName","pathNode":{"id":3355,"name":"UserOperation","nameLocations":["1522:13:13"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"1522:13:13"},"referencedDeclaration":3754,"src":"1522:13:13","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"id":3357,"nodeType":"ArrayTypeName","src":"1522:15:13","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"}],"src":"1521:34:13"},"returnParameters":{"id":3362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3361,"mutability":"mutable","name":"aggregatedSignature","nameLocation":"1592:19:13","nodeType":"VariableDeclaration","scope":3363,"src":"1579:32:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3360,"name":"bytes","nodeType":"ElementaryTypeName","src":"1579:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1578:34:13"},"scope":3364,"src":"1493:120:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3365,"src":"137:1478:13","usedErrors":[]}],"src":"36:1580:13"},"id":13},"account-abstraction/contracts/interfaces/IEntryPoint.sol":{"ast":{"absolutePath":"account-abstraction/contracts/interfaces/IEntryPoint.sol","exportedSymbols":{"IAggregator":[3364],"IEntryPoint":[3568],"INonceManager":[3587],"IStakeManager":[3727],"UserOperation":[3754],"UserOperationLib":[3924],"calldataKeccak":[3330]},"id":3569,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3366,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"163:24:14"},{"absolutePath":"account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":3367,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3569,"sourceUnit":3925,"src":"311:29:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/IStakeManager.sol","file":"./IStakeManager.sol","id":3368,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3569,"sourceUnit":3728,"src":"341:29:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/IAggregator.sol","file":"./IAggregator.sol","id":3369,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3569,"sourceUnit":3365,"src":"371:27:14","symbolAliases":[],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/INonceManager.sol","file":"./INonceManager.sol","id":3370,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3569,"sourceUnit":3588,"src":"399:29:14","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3371,"name":"IStakeManager","nameLocations":["455:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3727,"src":"455:13:14"},"id":3372,"nodeType":"InheritanceSpecifier","src":"455:13:14"},{"baseName":{"id":3373,"name":"INonceManager","nameLocations":["470:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3587,"src":"470:13:14"},"id":3374,"nodeType":"InheritanceSpecifier","src":"470:13:14"}],"canonicalName":"IEntryPoint","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3568,"linearizedBaseContracts":[3568,3587,3727],"name":"IEntryPoint","nameLocation":"440:11:14","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"49628fd1471006c1482da88028e9ce4dbb080b815c9b0344d39e5a8e6ec1419f","id":3390,"name":"UserOperationEvent","nameLocation":"1191:18:14","nodeType":"EventDefinition","parameters":{"id":3389,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3376,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"1226:10:14","nodeType":"VariableDeclaration","scope":3390,"src":"1210:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3375,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3378,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1254:6:14","nodeType":"VariableDeclaration","scope":3390,"src":"1238:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3377,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3380,"indexed":true,"mutability":"mutable","name":"paymaster","nameLocation":"1278:9:14","nodeType":"VariableDeclaration","scope":3390,"src":"1262:25:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3379,"name":"address","nodeType":"ElementaryTypeName","src":"1262:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3382,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"1297:5:14","nodeType":"VariableDeclaration","scope":3390,"src":"1289:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3381,"name":"uint256","nodeType":"ElementaryTypeName","src":"1289:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3384,"indexed":false,"mutability":"mutable","name":"success","nameLocation":"1309:7:14","nodeType":"VariableDeclaration","scope":3390,"src":"1304:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3383,"name":"bool","nodeType":"ElementaryTypeName","src":"1304:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3386,"indexed":false,"mutability":"mutable","name":"actualGasCost","nameLocation":"1326:13:14","nodeType":"VariableDeclaration","scope":3390,"src":"1318:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3385,"name":"uint256","nodeType":"ElementaryTypeName","src":"1318:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3388,"indexed":false,"mutability":"mutable","name":"actualGasUsed","nameLocation":"1349:13:14","nodeType":"VariableDeclaration","scope":3390,"src":"1341:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3387,"name":"uint256","nodeType":"ElementaryTypeName","src":"1341:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1209:154:14"},"src":"1185:179:14"},{"anonymous":false,"documentation":{"id":3391,"nodeType":"StructuredDocumentation","src":"1370:333:14","text":" account \"sender\" was deployed.\n @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\n @param sender the account that is deployed\n @param factory the factory used to deploy this account (in the initCode)\n @param paymaster the paymaster used by this UserOp"},"eventSelector":"d51a9c61267aa6196961883ecf5ff2da6619c37dac0fa92122513fb32c032d2d","id":3401,"name":"AccountDeployed","nameLocation":"1714:15:14","nodeType":"EventDefinition","parameters":{"id":3400,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3393,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"1746:10:14","nodeType":"VariableDeclaration","scope":3401,"src":"1730:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3392,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1730:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3395,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"1774:6:14","nodeType":"VariableDeclaration","scope":3401,"src":"1758:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3394,"name":"address","nodeType":"ElementaryTypeName","src":"1758:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3397,"indexed":false,"mutability":"mutable","name":"factory","nameLocation":"1790:7:14","nodeType":"VariableDeclaration","scope":3401,"src":"1782:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3396,"name":"address","nodeType":"ElementaryTypeName","src":"1782:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3399,"indexed":false,"mutability":"mutable","name":"paymaster","nameLocation":"1807:9:14","nodeType":"VariableDeclaration","scope":3401,"src":"1799:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3398,"name":"address","nodeType":"ElementaryTypeName","src":"1799:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1729:88:14"},"src":"1708:110:14"},{"anonymous":false,"documentation":{"id":3402,"nodeType":"StructuredDocumentation","src":"1824:337:14","text":" An event emitted if the UserOperation \"callData\" reverted with non-zero length\n @param userOpHash the request unique identifier.\n @param sender the sender of this request\n @param nonce the nonce used in the request\n @param revertReason - the return bytes from the (reverted) call to \"callData\"."},"eventSelector":"1c4fada7374c0a9ee8841fc38afe82932dc0f8e69012e927f061a8bae611a201","id":3412,"name":"UserOperationRevertReason","nameLocation":"2172:25:14","nodeType":"EventDefinition","parameters":{"id":3411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3404,"indexed":true,"mutability":"mutable","name":"userOpHash","nameLocation":"2214:10:14","nodeType":"VariableDeclaration","scope":3412,"src":"2198:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3403,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2198:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3406,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"2242:6:14","nodeType":"VariableDeclaration","scope":3412,"src":"2226:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3405,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3408,"indexed":false,"mutability":"mutable","name":"nonce","nameLocation":"2258:5:14","nodeType":"VariableDeclaration","scope":3412,"src":"2250:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3407,"name":"uint256","nodeType":"ElementaryTypeName","src":"2250:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3410,"indexed":false,"mutability":"mutable","name":"revertReason","nameLocation":"2271:12:14","nodeType":"VariableDeclaration","scope":3412,"src":"2265:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3409,"name":"bytes","nodeType":"ElementaryTypeName","src":"2265:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2197:87:14"},"src":"2166:119:14"},{"anonymous":false,"documentation":{"id":3413,"nodeType":"StructuredDocumentation","src":"2291:158:14","text":" an event emitted by handleOps(), before starting the execution loop.\n any event emitted before this event, is part of the validation."},"eventSelector":"bb47ee3e183a558b1a2ff0874b079f3fc5478b7454eacf2bfc5af2ff5878f972","id":3415,"name":"BeforeExecution","nameLocation":"2460:15:14","nodeType":"EventDefinition","parameters":{"id":3414,"nodeType":"ParameterList","parameters":[],"src":"2475:2:14"},"src":"2454:24:14"},{"anonymous":false,"documentation":{"id":3416,"nodeType":"StructuredDocumentation","src":"2484:101:14","text":" signature aggregator used by the following UserOperationEvents within this bundle."},"eventSelector":"575ff3acadd5ab348fe1855e217e0f3678f8d767d7494c9f9fefbee2e17cca4d","id":3420,"name":"SignatureAggregatorChanged","nameLocation":"2596:26:14","nodeType":"EventDefinition","parameters":{"id":3419,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3418,"indexed":true,"mutability":"mutable","name":"aggregator","nameLocation":"2639:10:14","nodeType":"VariableDeclaration","scope":3420,"src":"2623:26:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3417,"name":"address","nodeType":"ElementaryTypeName","src":"2623:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2622:28:14"},"src":"2590:61:14"},{"documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"2657:756:14","text":" a custom revert error of handleOps, to identify the offending op.\n  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\n  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\n  @param reason - revert reason\n      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,\n      so a failure can be attributed to the correct entity.\n   Should be caught in off-chain handleOps simulation and not happen on-chain.\n   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."},"errorSelector":"220266b6","id":3427,"name":"FailedOp","nameLocation":"3424:8:14","nodeType":"ErrorDefinition","parameters":{"id":3426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3423,"mutability":"mutable","name":"opIndex","nameLocation":"3441:7:14","nodeType":"VariableDeclaration","scope":3427,"src":"3433:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3422,"name":"uint256","nodeType":"ElementaryTypeName","src":"3433:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3425,"mutability":"mutable","name":"reason","nameLocation":"3457:6:14","nodeType":"VariableDeclaration","scope":3427,"src":"3450:13:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3424,"name":"string","nodeType":"ElementaryTypeName","src":"3450:6:14","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3432:32:14"},"src":"3418:47:14"},{"documentation":{"id":3428,"nodeType":"StructuredDocumentation","src":"3471:114:14","text":" error case when a signature aggregator fails to verify the aggregated signature it had created."},"errorSelector":"86a9f750","id":3432,"name":"SignatureValidationFailed","nameLocation":"3596:25:14","nodeType":"ErrorDefinition","parameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3430,"mutability":"mutable","name":"aggregator","nameLocation":"3630:10:14","nodeType":"VariableDeclaration","scope":3432,"src":"3622:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3429,"name":"address","nodeType":"ElementaryTypeName","src":"3622:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3621:20:14"},"src":"3590:52:14"},{"documentation":{"id":3433,"nodeType":"StructuredDocumentation","src":"3648:327:14","text":" Successful result from simulateValidation.\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)"},"errorSelector":"e0cff05f","id":3447,"name":"ValidationResult","nameLocation":"3986:16:14","nodeType":"ErrorDefinition","parameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3436,"mutability":"mutable","name":"returnInfo","nameLocation":"4014:10:14","nodeType":"VariableDeclaration","scope":3447,"src":"4003:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$3544_memory_ptr","typeString":"struct IEntryPoint.ReturnInfo"},"typeName":{"id":3435,"nodeType":"UserDefinedTypeName","pathNode":{"id":3434,"name":"ReturnInfo","nameLocations":["4003:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3544,"src":"4003:10:14"},"referencedDeclaration":3544,"src":"4003:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$3544_storage_ptr","typeString":"struct IEntryPoint.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":3439,"mutability":"mutable","name":"senderInfo","nameLocation":"4044:10:14","nodeType":"VariableDeclaration","scope":3447,"src":"4034:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3438,"nodeType":"UserDefinedTypeName","pathNode":{"id":3437,"name":"StakeInfo","nameLocations":["4034:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"4034:9:14"},"referencedDeclaration":3679,"src":"4034:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":3442,"mutability":"mutable","name":"factoryInfo","nameLocation":"4066:11:14","nodeType":"VariableDeclaration","scope":3447,"src":"4056:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3441,"nodeType":"UserDefinedTypeName","pathNode":{"id":3440,"name":"StakeInfo","nameLocations":["4056:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"4056:9:14"},"referencedDeclaration":3679,"src":"4056:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":3445,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4089:13:14","nodeType":"VariableDeclaration","scope":3447,"src":"4079:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3444,"nodeType":"UserDefinedTypeName","pathNode":{"id":3443,"name":"StakeInfo","nameLocations":["4079:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"4079:9:14"},"referencedDeclaration":3679,"src":"4079:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"}],"src":"4002:101:14"},"src":"3980:124:14"},{"documentation":{"id":3448,"nodeType":"StructuredDocumentation","src":"4110:561:14","text":" Successful result from simulateValidation, if the account returns a signature aggregator\n @param returnInfo gas and time-range returned values\n @param senderInfo stake information about the sender\n @param factoryInfo stake information about the factory (if any)\n @param paymasterInfo stake information about the paymaster (if any)\n @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\n      bundler MUST use it to verify the signature, or reject the UserOperation"},"errorSelector":"faecb4e4","id":3465,"name":"ValidationResultWithAggregation","nameLocation":"4682:31:14","nodeType":"ErrorDefinition","parameters":{"id":3464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3451,"mutability":"mutable","name":"returnInfo","nameLocation":"4725:10:14","nodeType":"VariableDeclaration","scope":3465,"src":"4714:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$3544_memory_ptr","typeString":"struct IEntryPoint.ReturnInfo"},"typeName":{"id":3450,"nodeType":"UserDefinedTypeName","pathNode":{"id":3449,"name":"ReturnInfo","nameLocations":["4714:10:14"],"nodeType":"IdentifierPath","referencedDeclaration":3544,"src":"4714:10:14"},"referencedDeclaration":3544,"src":"4714:10:14","typeDescriptions":{"typeIdentifier":"t_struct$_ReturnInfo_$3544_storage_ptr","typeString":"struct IEntryPoint.ReturnInfo"}},"visibility":"internal"},{"constant":false,"id":3454,"mutability":"mutable","name":"senderInfo","nameLocation":"4755:10:14","nodeType":"VariableDeclaration","scope":3465,"src":"4745:20:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3453,"nodeType":"UserDefinedTypeName","pathNode":{"id":3452,"name":"StakeInfo","nameLocations":["4745:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"4745:9:14"},"referencedDeclaration":3679,"src":"4745:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":3457,"mutability":"mutable","name":"factoryInfo","nameLocation":"4777:11:14","nodeType":"VariableDeclaration","scope":3465,"src":"4767:21:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3456,"nodeType":"UserDefinedTypeName","pathNode":{"id":3455,"name":"StakeInfo","nameLocations":["4767:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"4767:9:14"},"referencedDeclaration":3679,"src":"4767:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":3460,"mutability":"mutable","name":"paymasterInfo","nameLocation":"4800:13:14","nodeType":"VariableDeclaration","scope":3465,"src":"4790:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_memory_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3459,"nodeType":"UserDefinedTypeName","pathNode":{"id":3458,"name":"StakeInfo","nameLocations":["4790:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"4790:9:14"},"referencedDeclaration":3679,"src":"4790:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"},{"constant":false,"id":3463,"mutability":"mutable","name":"aggregatorInfo","nameLocation":"4843:14:14","nodeType":"VariableDeclaration","scope":3465,"src":"4823:34:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$3550_memory_ptr","typeString":"struct IEntryPoint.AggregatorStakeInfo"},"typeName":{"id":3462,"nodeType":"UserDefinedTypeName","pathNode":{"id":3461,"name":"AggregatorStakeInfo","nameLocations":["4823:19:14"],"nodeType":"IdentifierPath","referencedDeclaration":3550,"src":"4823:19:14"},"referencedDeclaration":3550,"src":"4823:19:14","typeDescriptions":{"typeIdentifier":"t_struct$_AggregatorStakeInfo_$3550_storage_ptr","typeString":"struct IEntryPoint.AggregatorStakeInfo"}},"visibility":"internal"}],"src":"4713:145:14"},"src":"4676:183:14"},{"documentation":{"id":3466,"nodeType":"StructuredDocumentation","src":"4865:51:14","text":" return value of getSenderAddress"},"errorSelector":"6ca7b806","id":3470,"name":"SenderAddressResult","nameLocation":"4927:19:14","nodeType":"ErrorDefinition","parameters":{"id":3469,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3468,"mutability":"mutable","name":"sender","nameLocation":"4955:6:14","nodeType":"VariableDeclaration","scope":3470,"src":"4947:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3467,"name":"address","nodeType":"ElementaryTypeName","src":"4947:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4946:16:14"},"src":"4921:42:14"},{"documentation":{"id":3471,"nodeType":"StructuredDocumentation","src":"4969:51:14","text":" return value of simulateHandleOp"},"errorSelector":"8b7ac980","id":3485,"name":"ExecutionResult","nameLocation":"5031:15:14","nodeType":"ErrorDefinition","parameters":{"id":3484,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3473,"mutability":"mutable","name":"preOpGas","nameLocation":"5055:8:14","nodeType":"VariableDeclaration","scope":3485,"src":"5047:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"5047:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3475,"mutability":"mutable","name":"paid","nameLocation":"5073:4:14","nodeType":"VariableDeclaration","scope":3485,"src":"5065:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3474,"name":"uint256","nodeType":"ElementaryTypeName","src":"5065:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3477,"mutability":"mutable","name":"validAfter","nameLocation":"5086:10:14","nodeType":"VariableDeclaration","scope":3485,"src":"5079:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3476,"name":"uint48","nodeType":"ElementaryTypeName","src":"5079:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":3479,"mutability":"mutable","name":"validUntil","nameLocation":"5105:10:14","nodeType":"VariableDeclaration","scope":3485,"src":"5098:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3478,"name":"uint48","nodeType":"ElementaryTypeName","src":"5098:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":3481,"mutability":"mutable","name":"targetSuccess","nameLocation":"5122:13:14","nodeType":"VariableDeclaration","scope":3485,"src":"5117:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3480,"name":"bool","nodeType":"ElementaryTypeName","src":"5117:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3483,"mutability":"mutable","name":"targetResult","nameLocation":"5143:12:14","nodeType":"VariableDeclaration","scope":3485,"src":"5137:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3482,"name":"bytes","nodeType":"ElementaryTypeName","src":"5137:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5046:110:14"},"src":"5025:132:14"},{"canonicalName":"IEntryPoint.UserOpsPerAggregator","id":3495,"members":[{"constant":false,"id":3489,"mutability":"mutable","name":"userOps","nameLocation":"5255:7:14","nodeType":"VariableDeclaration","scope":3495,"src":"5239:23:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":3487,"nodeType":"UserDefinedTypeName","pathNode":{"id":3486,"name":"UserOperation","nameLocations":["5239:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"5239:13:14"},"referencedDeclaration":3754,"src":"5239:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"id":3488,"nodeType":"ArrayTypeName","src":"5239:15:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":3492,"mutability":"mutable","name":"aggregator","nameLocation":"5315:10:14","nodeType":"VariableDeclaration","scope":3495,"src":"5303:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IAggregator_$3364","typeString":"contract IAggregator"},"typeName":{"id":3491,"nodeType":"UserDefinedTypeName","pathNode":{"id":3490,"name":"IAggregator","nameLocations":["5303:11:14"],"nodeType":"IdentifierPath","referencedDeclaration":3364,"src":"5303:11:14"},"referencedDeclaration":3364,"src":"5303:11:14","typeDescriptions":{"typeIdentifier":"t_contract$_IAggregator_$3364","typeString":"contract IAggregator"}},"visibility":"internal"},{"constant":false,"id":3494,"mutability":"mutable","name":"signature","nameLocation":"5373:9:14","nodeType":"VariableDeclaration","scope":3495,"src":"5367:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3493,"name":"bytes","nodeType":"ElementaryTypeName","src":"5367:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOpsPerAggregator","nameLocation":"5208:20:14","nodeType":"StructDefinition","scope":3568,"src":"5201:188:14","visibility":"public"},{"documentation":{"id":3496,"nodeType":"StructuredDocumentation","src":"5395:368:14","text":" Execute a batch of UserOperation.\n no signature aggregator is used.\n if any account requires an aggregator (that is, it returned an aggregator when\n performing simulateValidation), then handleAggregatedOps() must be used instead.\n @param ops the operations to execute\n @param beneficiary the address to receive the fees"},"functionSelector":"1fad948c","id":3505,"implemented":false,"kind":"function","modifiers":[],"name":"handleOps","nameLocation":"5777:9:14","nodeType":"FunctionDefinition","parameters":{"id":3503,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3500,"mutability":"mutable","name":"ops","nameLocation":"5812:3:14","nodeType":"VariableDeclaration","scope":3505,"src":"5787:28:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_calldata_ptr_$dyn_calldata_ptr","typeString":"struct UserOperation[]"},"typeName":{"baseType":{"id":3498,"nodeType":"UserDefinedTypeName","pathNode":{"id":3497,"name":"UserOperation","nameLocations":["5787:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"5787:13:14"},"referencedDeclaration":3754,"src":"5787:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"id":3499,"nodeType":"ArrayTypeName","src":"5787:15:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOperation_$3754_storage_$dyn_storage_ptr","typeString":"struct UserOperation[]"}},"visibility":"internal"},{"constant":false,"id":3502,"mutability":"mutable","name":"beneficiary","nameLocation":"5833:11:14","nodeType":"VariableDeclaration","scope":3505,"src":"5817:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3501,"name":"address","nodeType":"ElementaryTypeName","src":"5817:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"5786:59:14"},"returnParameters":{"id":3504,"nodeType":"ParameterList","parameters":[],"src":"5854:0:14"},"scope":3568,"src":"5768:87:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3506,"nodeType":"StructuredDocumentation","src":"5861:249:14","text":" Execute a batch of UserOperation with Aggregators\n @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\n @param beneficiary the address to receive the fees"},"functionSelector":"4b1d7cf5","id":3515,"implemented":false,"kind":"function","modifiers":[],"name":"handleAggregatedOps","nameLocation":"6124:19:14","nodeType":"FunctionDefinition","parameters":{"id":3513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3510,"mutability":"mutable","name":"opsPerAggregator","nameLocation":"6185:16:14","nodeType":"VariableDeclaration","scope":3515,"src":"6153:48:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOpsPerAggregator_$3495_calldata_ptr_$dyn_calldata_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator[]"},"typeName":{"baseType":{"id":3508,"nodeType":"UserDefinedTypeName","pathNode":{"id":3507,"name":"UserOpsPerAggregator","nameLocations":["6153:20:14"],"nodeType":"IdentifierPath","referencedDeclaration":3495,"src":"6153:20:14"},"referencedDeclaration":3495,"src":"6153:20:14","typeDescriptions":{"typeIdentifier":"t_struct$_UserOpsPerAggregator_$3495_storage_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator"}},"id":3509,"nodeType":"ArrayTypeName","src":"6153:22:14","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_UserOpsPerAggregator_$3495_storage_$dyn_storage_ptr","typeString":"struct IEntryPoint.UserOpsPerAggregator[]"}},"visibility":"internal"},{"constant":false,"id":3512,"mutability":"mutable","name":"beneficiary","nameLocation":"6227:11:14","nodeType":"VariableDeclaration","scope":3515,"src":"6211:27:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3511,"name":"address","nodeType":"ElementaryTypeName","src":"6211:15:14","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"6143:101:14"},"returnParameters":{"id":3514,"nodeType":"ParameterList","parameters":[],"src":"6253:0:14"},"scope":3568,"src":"6115:139:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3516,"nodeType":"StructuredDocumentation","src":"6260:197:14","text":" generate a request Id - unique identifier for this request.\n the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"functionSelector":"a6193531","id":3524,"implemented":false,"kind":"function","modifiers":[],"name":"getUserOpHash","nameLocation":"6471:13:14","nodeType":"FunctionDefinition","parameters":{"id":3520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3519,"mutability":"mutable","name":"userOp","nameLocation":"6508:6:14","nodeType":"VariableDeclaration","scope":3524,"src":"6485:29:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3518,"nodeType":"UserDefinedTypeName","pathNode":{"id":3517,"name":"UserOperation","nameLocations":["6485:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"6485:13:14"},"referencedDeclaration":3754,"src":"6485:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"6484:31:14"},"returnParameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3524,"src":"6539:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3521,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6539:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6538:9:14"},"scope":3568,"src":"6462:86:14","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3525,"nodeType":"StructuredDocumentation","src":"6554:398:14","text":" Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\n @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\n @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\n @param userOp the user operation to validate."},"functionSelector":"ee219423","id":3531,"implemented":false,"kind":"function","modifiers":[],"name":"simulateValidation","nameLocation":"6966:18:14","nodeType":"FunctionDefinition","parameters":{"id":3529,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3528,"mutability":"mutable","name":"userOp","nameLocation":"7008:6:14","nodeType":"VariableDeclaration","scope":3531,"src":"6985:29:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3527,"nodeType":"UserDefinedTypeName","pathNode":{"id":3526,"name":"UserOperation","nameLocations":["6985:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"6985:13:14"},"referencedDeclaration":3754,"src":"6985:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"6984:31:14"},"returnParameters":{"id":3530,"nodeType":"ParameterList","parameters":[],"src":"7024:0:14"},"scope":3568,"src":"6957:68:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"canonicalName":"IEntryPoint.ReturnInfo","id":3544,"members":[{"constant":false,"id":3533,"mutability":"mutable","name":"preOpGas","nameLocation":"7660:8:14","nodeType":"VariableDeclaration","scope":3544,"src":"7652:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3532,"name":"uint256","nodeType":"ElementaryTypeName","src":"7652:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3535,"mutability":"mutable","name":"prefund","nameLocation":"7686:7:14","nodeType":"VariableDeclaration","scope":3544,"src":"7678:15:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3534,"name":"uint256","nodeType":"ElementaryTypeName","src":"7678:7:14","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3537,"mutability":"mutable","name":"sigFailed","nameLocation":"7708:9:14","nodeType":"VariableDeclaration","scope":3544,"src":"7703:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3536,"name":"bool","nodeType":"ElementaryTypeName","src":"7703:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3539,"mutability":"mutable","name":"validAfter","nameLocation":"7734:10:14","nodeType":"VariableDeclaration","scope":3544,"src":"7727:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3538,"name":"uint48","nodeType":"ElementaryTypeName","src":"7727:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":3541,"mutability":"mutable","name":"validUntil","nameLocation":"7761:10:14","nodeType":"VariableDeclaration","scope":3544,"src":"7754:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3540,"name":"uint48","nodeType":"ElementaryTypeName","src":"7754:6:14","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":3543,"mutability":"mutable","name":"paymasterContext","nameLocation":"7787:16:14","nodeType":"VariableDeclaration","scope":3544,"src":"7781:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3542,"name":"bytes","nodeType":"ElementaryTypeName","src":"7781:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"ReturnInfo","nameLocation":"7631:10:14","nodeType":"StructDefinition","scope":3568,"src":"7624:186:14","visibility":"public"},{"canonicalName":"IEntryPoint.AggregatorStakeInfo","id":3550,"members":[{"constant":false,"id":3546,"mutability":"mutable","name":"aggregator","nameLocation":"7990:10:14","nodeType":"VariableDeclaration","scope":3550,"src":"7982:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3545,"name":"address","nodeType":"ElementaryTypeName","src":"7982:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3549,"mutability":"mutable","name":"stakeInfo","nameLocation":"8020:9:14","nodeType":"VariableDeclaration","scope":3550,"src":"8010:19:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"},"typeName":{"id":3548,"nodeType":"UserDefinedTypeName","pathNode":{"id":3547,"name":"StakeInfo","nameLocations":["8010:9:14"],"nodeType":"IdentifierPath","referencedDeclaration":3679,"src":"8010:9:14"},"referencedDeclaration":3679,"src":"8010:9:14","typeDescriptions":{"typeIdentifier":"t_struct$_StakeInfo_$3679_storage_ptr","typeString":"struct IStakeManager.StakeInfo"}},"visibility":"internal"}],"name":"AggregatorStakeInfo","nameLocation":"7952:19:14","nodeType":"StructDefinition","scope":3568,"src":"7945:91:14","visibility":"public"},{"documentation":{"id":3551,"nodeType":"StructuredDocumentation","src":"8042:337:14","text":" Get counterfactual sender address.\n  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\n this method always revert, and returns the address in SenderAddressResult error\n @param initCode the constructor code to be passed into the UserOperation."},"functionSelector":"9b249f69","id":3556,"implemented":false,"kind":"function","modifiers":[],"name":"getSenderAddress","nameLocation":"8393:16:14","nodeType":"FunctionDefinition","parameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3553,"mutability":"mutable","name":"initCode","nameLocation":"8423:8:14","nodeType":"VariableDeclaration","scope":3556,"src":"8410:21:14","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3552,"name":"bytes","nodeType":"ElementaryTypeName","src":"8410:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8409:23:14"},"returnParameters":{"id":3555,"nodeType":"ParameterList","parameters":[],"src":"8441:0:14"},"scope":3568,"src":"8384:58:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3557,"nodeType":"StructuredDocumentation","src":"8449:847:14","text":" simulate full execution of a UserOperation (including both validation and target execution)\n this method will always revert with \"ExecutionResult\".\n it performs full validation of the UserOperation, but ignores signature error.\n an optional target address is called after the userop succeeds, and its value is returned\n (before the entire call is reverted)\n Note that in order to collect the the success/failure of the target call, it must be executed\n with trace enabled to track the emitted events.\n @param op the UserOperation to simulate\n @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\n        are set to the return from that call.\n @param targetCallData callData to pass to target address"},"functionSelector":"d6383f94","id":3567,"implemented":false,"kind":"function","modifiers":[],"name":"simulateHandleOp","nameLocation":"9310:16:14","nodeType":"FunctionDefinition","parameters":{"id":3565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3560,"mutability":"mutable","name":"op","nameLocation":"9350:2:14","nodeType":"VariableDeclaration","scope":3567,"src":"9327:25:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3559,"nodeType":"UserDefinedTypeName","pathNode":{"id":3558,"name":"UserOperation","nameLocations":["9327:13:14"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"9327:13:14"},"referencedDeclaration":3754,"src":"9327:13:14","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":3562,"mutability":"mutable","name":"target","nameLocation":"9362:6:14","nodeType":"VariableDeclaration","scope":3567,"src":"9354:14:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3561,"name":"address","nodeType":"ElementaryTypeName","src":"9354:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3564,"mutability":"mutable","name":"targetCallData","nameLocation":"9385:14:14","nodeType":"VariableDeclaration","scope":3567,"src":"9370:29:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3563,"name":"bytes","nodeType":"ElementaryTypeName","src":"9370:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9326:74:14"},"returnParameters":{"id":3566,"nodeType":"ParameterList","parameters":[],"src":"9409:0:14"},"scope":3568,"src":"9301:109:14","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3569,"src":"430:8982:14","usedErrors":[3427,3432,3447,3465,3470,3485]}],"src":"163:9251:14"},"id":14},"account-abstraction/contracts/interfaces/INonceManager.sol":{"ast":{"absolutePath":"account-abstraction/contracts/interfaces/INonceManager.sol","exportedSymbols":{"INonceManager":[3587]},"id":3588,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3570,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"INonceManager","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":3587,"linearizedBaseContracts":[3587],"name":"INonceManager","nameLocation":"72:13:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3571,"nodeType":"StructuredDocumentation","src":"93:416:15","text":" Return the next nonce for this sender.\n Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\n But UserOp with different keys can come with arbitrary order.\n @param sender the account address\n @param key the high 192 bit of the nonce\n @return nonce a full nonce to pass for next UserOp with this sender."},"functionSelector":"35567e1a","id":3580,"implemented":false,"kind":"function","modifiers":[],"name":"getNonce","nameLocation":"523:8:15","nodeType":"FunctionDefinition","parameters":{"id":3576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3573,"mutability":"mutable","name":"sender","nameLocation":"540:6:15","nodeType":"VariableDeclaration","scope":3580,"src":"532:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3572,"name":"address","nodeType":"ElementaryTypeName","src":"532:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3575,"mutability":"mutable","name":"key","nameLocation":"556:3:15","nodeType":"VariableDeclaration","scope":3580,"src":"548:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":3574,"name":"uint192","nodeType":"ElementaryTypeName","src":"548:7:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"531:29:15"},"returnParameters":{"id":3579,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3578,"mutability":"mutable","name":"nonce","nameLocation":"596:5:15","nodeType":"VariableDeclaration","scope":3580,"src":"588:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3577,"name":"uint256","nodeType":"ElementaryTypeName","src":"588:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"587:15:15"},"scope":3587,"src":"514:89:15","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3581,"nodeType":"StructuredDocumentation","src":"609:449:15","text":" Manually increment the nonce of the sender.\n This method is exposed just for completeness..\n Account does NOT need to call it, neither during validation, nor elsewhere,\n as the EntryPoint will update the nonce regardless.\n Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future\n UserOperations will not pay extra for the first transaction with a given key."},"functionSelector":"0bd28e3b","id":3586,"implemented":false,"kind":"function","modifiers":[],"name":"incrementNonce","nameLocation":"1072:14:15","nodeType":"FunctionDefinition","parameters":{"id":3584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3583,"mutability":"mutable","name":"key","nameLocation":"1095:3:15","nodeType":"VariableDeclaration","scope":3586,"src":"1087:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"},"typeName":{"id":3582,"name":"uint192","nodeType":"ElementaryTypeName","src":"1087:7:15","typeDescriptions":{"typeIdentifier":"t_uint192","typeString":"uint192"}},"visibility":"internal"}],"src":"1086:13:15"},"returnParameters":{"id":3585,"nodeType":"ParameterList","parameters":[],"src":"1108:0:15"},"scope":3587,"src":"1063:46:15","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3588,"src":"62:1049:15","usedErrors":[]}],"src":"36:1076:15"},"id":15},"account-abstraction/contracts/interfaces/IPaymaster.sol":{"ast":{"absolutePath":"account-abstraction/contracts/interfaces/IPaymaster.sol","exportedSymbols":{"IPaymaster":[3622],"UserOperation":[3754],"UserOperationLib":[3924],"calldataKeccak":[3330]},"id":3623,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3589,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:16"},{"absolutePath":"account-abstraction/contracts/interfaces/UserOperation.sol","file":"./UserOperation.sol","id":3590,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3623,"sourceUnit":3925,"src":"62:29:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPaymaster","contractDependencies":[],"contractKind":"interface","documentation":{"id":3591,"nodeType":"StructuredDocumentation","src":"93:216:16","text":" the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\n a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction."},"fullyImplemented":false,"id":3622,"linearizedBaseContracts":[3622],"name":"IPaymaster","nameLocation":"320:10:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IPaymaster.PostOpMode","id":3595,"members":[{"id":3592,"name":"opSucceeded","nameLocation":"364:11:16","nodeType":"EnumValue","src":"364:11:16"},{"id":3593,"name":"opReverted","nameLocation":"406:10:16","nodeType":"EnumValue","src":"406:10:16"},{"id":3594,"name":"postOpReverted","nameLocation":"473:14:16","nodeType":"EnumValue","src":"473:14:16"}],"name":"PostOpMode","nameLocation":"343:10:16","nodeType":"EnumDefinition","src":"338:269:16"},{"documentation":{"id":3596,"nodeType":"StructuredDocumentation","src":"613:1254:16","text":" payment validation: check if paymaster agrees to pay.\n Must verify sender is the entryPoint.\n Revert to reject this request.\n Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\n The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\n @param userOp the user operation\n @param userOpHash hash of the user's request data.\n @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\n @return context value to send to a postOp\n      zero length to signify postOp is not required.\n @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\n      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\n         otherwise, an address of an \"authorizer\" contract.\n      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"\n      <6-byte> validAfter - first timestamp this operation is valid\n      Note that the validation code cannot use block.timestamp (or block.number) directly."},"functionSelector":"f465c77e","id":3610,"implemented":false,"kind":"function","modifiers":[],"name":"validatePaymasterUserOp","nameLocation":"1881:23:16","nodeType":"FunctionDefinition","parameters":{"id":3604,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3599,"mutability":"mutable","name":"userOp","nameLocation":"1928:6:16","nodeType":"VariableDeclaration","scope":3610,"src":"1905:29:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3598,"nodeType":"UserDefinedTypeName","pathNode":{"id":3597,"name":"UserOperation","nameLocations":["1905:13:16"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"1905:13:16"},"referencedDeclaration":3754,"src":"1905:13:16","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":3601,"mutability":"mutable","name":"userOpHash","nameLocation":"1944:10:16","nodeType":"VariableDeclaration","scope":3610,"src":"1936:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3600,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1936:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3603,"mutability":"mutable","name":"maxCost","nameLocation":"1964:7:16","nodeType":"VariableDeclaration","scope":3610,"src":"1956:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1956:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1904:68:16"},"returnParameters":{"id":3609,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3606,"mutability":"mutable","name":"context","nameLocation":"2008:7:16","nodeType":"VariableDeclaration","scope":3610,"src":"1995:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3605,"name":"bytes","nodeType":"ElementaryTypeName","src":"1995:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3608,"mutability":"mutable","name":"validationData","nameLocation":"2025:14:16","nodeType":"VariableDeclaration","scope":3610,"src":"2017:22:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3607,"name":"uint256","nodeType":"ElementaryTypeName","src":"2017:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1994:46:16"},"scope":3622,"src":"1872:169:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3611,"nodeType":"StructuredDocumentation","src":"2047:616:16","text":" post-operation handler.\n Must verify sender is the entryPoint\n @param mode enum with the following options:\n      opSucceeded - user operation succeeded.\n      opReverted  - user op reverted. still has to pay for gas.\n      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\n                       Now this is the 2nd call, after user's op was deliberately reverted.\n @param context - the context value returned by validatePaymasterUserOp\n @param actualGasCost - actual gas used so far (without this postOp call)."},"functionSelector":"a9a23409","id":3621,"implemented":false,"kind":"function","modifiers":[],"name":"postOp","nameLocation":"2677:6:16","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3614,"mutability":"mutable","name":"mode","nameLocation":"2695:4:16","nodeType":"VariableDeclaration","scope":3621,"src":"2684:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"},"typeName":{"id":3613,"nodeType":"UserDefinedTypeName","pathNode":{"id":3612,"name":"PostOpMode","nameLocations":["2684:10:16"],"nodeType":"IdentifierPath","referencedDeclaration":3595,"src":"2684:10:16"},"referencedDeclaration":3595,"src":"2684:10:16","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"context","nameLocation":"2716:7:16","nodeType":"VariableDeclaration","scope":3621,"src":"2701:22:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3615,"name":"bytes","nodeType":"ElementaryTypeName","src":"2701:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"actualGasCost","nameLocation":"2733:13:16","nodeType":"VariableDeclaration","scope":3621,"src":"2725:21:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3617,"name":"uint256","nodeType":"ElementaryTypeName","src":"2725:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2683:64:16"},"returnParameters":{"id":3620,"nodeType":"ParameterList","parameters":[],"src":"2756:0:16"},"scope":3622,"src":"2668:89:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3623,"src":"310:2449:16","usedErrors":[]}],"src":"36:2724:16"},"id":16},"account-abstraction/contracts/interfaces/IStakeManager.sol":{"ast":{"absolutePath":"account-abstraction/contracts/interfaces/IStakeManager.sol","exportedSymbols":{"IStakeManager":[3727]},"id":3728,"license":"GPL-3.0-only","nodeType":"SourceUnit","nodes":[{"id":3624,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"41:24:17"},{"abstract":false,"baseContracts":[],"canonicalName":"IStakeManager","contractDependencies":[],"contractKind":"interface","documentation":{"id":3625,"nodeType":"StructuredDocumentation","src":"67:211:17","text":" manage deposits and stakes.\n deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\n stake is value locked for at least \"unstakeDelay\" by the staked entity."},"fullyImplemented":false,"id":3727,"linearizedBaseContracts":[3727],"name":"IStakeManager","nameLocation":"289:13:17","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"eventSelector":"2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4","id":3631,"name":"Deposited","nameLocation":"316:9:17","nodeType":"EventDefinition","parameters":{"id":3630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3627,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"351:7:17","nodeType":"VariableDeclaration","scope":3631,"src":"335:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3626,"name":"address","nodeType":"ElementaryTypeName","src":"335:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3629,"indexed":false,"mutability":"mutable","name":"totalDeposit","nameLocation":"376:12:17","nodeType":"VariableDeclaration","scope":3631,"src":"368:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3628,"name":"uint256","nodeType":"ElementaryTypeName","src":"368:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"325:69:17"},"src":"310:85:17"},{"anonymous":false,"eventSelector":"d1c19fbcd4551a5edfb66d43d2e337c04837afda3482b42bdf569a8fccdae5fb","id":3639,"name":"Withdrawn","nameLocation":"407:9:17","nodeType":"EventDefinition","parameters":{"id":3638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3633,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"442:7:17","nodeType":"VariableDeclaration","scope":3639,"src":"426:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3632,"name":"address","nodeType":"ElementaryTypeName","src":"426:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3635,"indexed":false,"mutability":"mutable","name":"withdrawAddress","nameLocation":"467:15:17","nodeType":"VariableDeclaration","scope":3639,"src":"459:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3634,"name":"address","nodeType":"ElementaryTypeName","src":"459:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3637,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"500:6:17","nodeType":"VariableDeclaration","scope":3639,"src":"492:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3636,"name":"uint256","nodeType":"ElementaryTypeName","src":"492:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"416:96:17"},"src":"401:112:17"},{"anonymous":false,"documentation":{"id":3640,"nodeType":"StructuredDocumentation","src":"519:52:17","text":"Emitted when stake or unstake delay are modified"},"eventSelector":"a5ae833d0bb1dcd632d98a8b70973e8516812898e19bf27b70071ebc8dc52c01","id":3648,"name":"StakeLocked","nameLocation":"582:11:17","nodeType":"EventDefinition","parameters":{"id":3647,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3642,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"619:7:17","nodeType":"VariableDeclaration","scope":3648,"src":"603:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3641,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3644,"indexed":false,"mutability":"mutable","name":"totalStaked","nameLocation":"644:11:17","nodeType":"VariableDeclaration","scope":3648,"src":"636:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3643,"name":"uint256","nodeType":"ElementaryTypeName","src":"636:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3646,"indexed":false,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"673:15:17","nodeType":"VariableDeclaration","scope":3648,"src":"665:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3645,"name":"uint256","nodeType":"ElementaryTypeName","src":"665:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"593:101:17"},"src":"576:119:17"},{"anonymous":false,"documentation":{"id":3649,"nodeType":"StructuredDocumentation","src":"701:52:17","text":"Emitted once a stake is scheduled for withdrawal"},"eventSelector":"fa9b3c14cc825c412c9ed81b3ba365a5b459439403f18829e572ed53a4180f0a","id":3655,"name":"StakeUnlocked","nameLocation":"764:13:17","nodeType":"EventDefinition","parameters":{"id":3654,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3651,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"803:7:17","nodeType":"VariableDeclaration","scope":3655,"src":"787:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3650,"name":"address","nodeType":"ElementaryTypeName","src":"787:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3653,"indexed":false,"mutability":"mutable","name":"withdrawTime","nameLocation":"828:12:17","nodeType":"VariableDeclaration","scope":3655,"src":"820:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3652,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"777:69:17"},"src":"758:89:17"},{"anonymous":false,"eventSelector":"b7c918e0e249f999e965cafeb6c664271b3f4317d296461500e71da39f0cbda3","id":3663,"name":"StakeWithdrawn","nameLocation":"859:14:17","nodeType":"EventDefinition","parameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3657,"indexed":true,"mutability":"mutable","name":"account","nameLocation":"899:7:17","nodeType":"VariableDeclaration","scope":3663,"src":"883:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3656,"name":"address","nodeType":"ElementaryTypeName","src":"883:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3659,"indexed":false,"mutability":"mutable","name":"withdrawAddress","nameLocation":"924:15:17","nodeType":"VariableDeclaration","scope":3663,"src":"916:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3658,"name":"address","nodeType":"ElementaryTypeName","src":"916:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3661,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"957:6:17","nodeType":"VariableDeclaration","scope":3663,"src":"949:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3660,"name":"uint256","nodeType":"ElementaryTypeName","src":"949:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"873:96:17"},"src":"853:117:17"},{"canonicalName":"IStakeManager.DepositInfo","id":3674,"members":[{"constant":false,"id":3665,"mutability":"mutable","name":"deposit","nameLocation":"1650:7:17","nodeType":"VariableDeclaration","scope":3674,"src":"1642:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3664,"name":"uint112","nodeType":"ElementaryTypeName","src":"1642:7:17","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":3667,"mutability":"mutable","name":"staked","nameLocation":"1672:6:17","nodeType":"VariableDeclaration","scope":3674,"src":"1667:11:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3666,"name":"bool","nodeType":"ElementaryTypeName","src":"1667:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3669,"mutability":"mutable","name":"stake","nameLocation":"1696:5:17","nodeType":"VariableDeclaration","scope":3674,"src":"1688:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"},"typeName":{"id":3668,"name":"uint112","nodeType":"ElementaryTypeName","src":"1688:7:17","typeDescriptions":{"typeIdentifier":"t_uint112","typeString":"uint112"}},"visibility":"internal"},{"constant":false,"id":3671,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1718:15:17","nodeType":"VariableDeclaration","scope":3674,"src":"1711:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3670,"name":"uint32","nodeType":"ElementaryTypeName","src":"1711:6:17","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"},{"constant":false,"id":3673,"mutability":"mutable","name":"withdrawTime","nameLocation":"1750:12:17","nodeType":"VariableDeclaration","scope":3674,"src":"1743:19:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":3672,"name":"uint48","nodeType":"ElementaryTypeName","src":"1743:6:17","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"}],"name":"DepositInfo","nameLocation":"1620:11:17","nodeType":"StructDefinition","scope":3727,"src":"1613:156:17","visibility":"public"},{"canonicalName":"IStakeManager.StakeInfo","id":3679,"members":[{"constant":false,"id":3676,"mutability":"mutable","name":"stake","nameLocation":"1871:5:17","nodeType":"VariableDeclaration","scope":3679,"src":"1863:13:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3675,"name":"uint256","nodeType":"ElementaryTypeName","src":"1863:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3678,"mutability":"mutable","name":"unstakeDelaySec","nameLocation":"1894:15:17","nodeType":"VariableDeclaration","scope":3679,"src":"1886:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3677,"name":"uint256","nodeType":"ElementaryTypeName","src":"1886:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"StakeInfo","nameLocation":"1843:9:17","nodeType":"StructDefinition","scope":3727,"src":"1836:80:17","visibility":"public"},{"documentation":{"id":3680,"nodeType":"StructuredDocumentation","src":"1922:60:17","text":"@return info - full deposit information of given account"},"functionSelector":"5287ce12","id":3688,"implemented":false,"kind":"function","modifiers":[],"name":"getDepositInfo","nameLocation":"1996:14:17","nodeType":"FunctionDefinition","parameters":{"id":3683,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3682,"mutability":"mutable","name":"account","nameLocation":"2019:7:17","nodeType":"VariableDeclaration","scope":3688,"src":"2011:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3681,"name":"address","nodeType":"ElementaryTypeName","src":"2011:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2010:17:17"},"returnParameters":{"id":3687,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3686,"mutability":"mutable","name":"info","nameLocation":"2070:4:17","nodeType":"VariableDeclaration","scope":3688,"src":"2051:23:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_DepositInfo_$3674_memory_ptr","typeString":"struct IStakeManager.DepositInfo"},"typeName":{"id":3685,"nodeType":"UserDefinedTypeName","pathNode":{"id":3684,"name":"DepositInfo","nameLocations":["2051:11:17"],"nodeType":"IdentifierPath","referencedDeclaration":3674,"src":"2051:11:17"},"referencedDeclaration":3674,"src":"2051:11:17","typeDescriptions":{"typeIdentifier":"t_struct$_DepositInfo_$3674_storage_ptr","typeString":"struct IStakeManager.DepositInfo"}},"visibility":"internal"}],"src":"2050:25:17"},"scope":3727,"src":"1987:89:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3689,"nodeType":"StructuredDocumentation","src":"2082:56:17","text":"@return the deposit (for gas payment) of the account"},"functionSelector":"70a08231","id":3696,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2152:9:17","nodeType":"FunctionDefinition","parameters":{"id":3692,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3691,"mutability":"mutable","name":"account","nameLocation":"2170:7:17","nodeType":"VariableDeclaration","scope":3696,"src":"2162:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3690,"name":"address","nodeType":"ElementaryTypeName","src":"2162:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2161:17:17"},"returnParameters":{"id":3695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3694,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3696,"src":"2202:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3693,"name":"uint256","nodeType":"ElementaryTypeName","src":"2202:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2201:9:17"},"scope":3727,"src":"2143:68:17","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3697,"nodeType":"StructuredDocumentation","src":"2217:58:17","text":" add to the deposit of the given account"},"functionSelector":"b760faf9","id":3702,"implemented":false,"kind":"function","modifiers":[],"name":"depositTo","nameLocation":"2289:9:17","nodeType":"FunctionDefinition","parameters":{"id":3700,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3699,"mutability":"mutable","name":"account","nameLocation":"2307:7:17","nodeType":"VariableDeclaration","scope":3702,"src":"2299:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3698,"name":"address","nodeType":"ElementaryTypeName","src":"2299:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2298:17:17"},"returnParameters":{"id":3701,"nodeType":"ParameterList","parameters":[],"src":"2332:0:17"},"scope":3727,"src":"2280:53:17","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3703,"nodeType":"StructuredDocumentation","src":"2339:201:17","text":" add to the account's stake - amount and delay\n any pending unstake is first cancelled.\n @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn."},"functionSelector":"0396cb60","id":3708,"implemented":false,"kind":"function","modifiers":[],"name":"addStake","nameLocation":"2554:8:17","nodeType":"FunctionDefinition","parameters":{"id":3706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3705,"mutability":"mutable","name":"_unstakeDelaySec","nameLocation":"2570:16:17","nodeType":"VariableDeclaration","scope":3708,"src":"2563:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"},"typeName":{"id":3704,"name":"uint32","nodeType":"ElementaryTypeName","src":"2563:6:17","typeDescriptions":{"typeIdentifier":"t_uint32","typeString":"uint32"}},"visibility":"internal"}],"src":"2562:25:17"},"returnParameters":{"id":3707,"nodeType":"ParameterList","parameters":[],"src":"2604:0:17"},"scope":3727,"src":"2545:60:17","stateMutability":"payable","virtual":false,"visibility":"external"},{"documentation":{"id":3709,"nodeType":"StructuredDocumentation","src":"2611:128:17","text":" attempt to unlock the stake.\n the value can be withdrawn (using withdrawStake) after the unstake delay."},"functionSelector":"bb9fe6bf","id":3712,"implemented":false,"kind":"function","modifiers":[],"name":"unlockStake","nameLocation":"2753:11:17","nodeType":"FunctionDefinition","parameters":{"id":3710,"nodeType":"ParameterList","parameters":[],"src":"2764:2:17"},"returnParameters":{"id":3711,"nodeType":"ParameterList","parameters":[],"src":"2775:0:17"},"scope":3727,"src":"2744:32:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3713,"nodeType":"StructuredDocumentation","src":"2782:194:17","text":" withdraw from the (unlocked) stake.\n must first call unlockStake and wait for the unstakeDelay to pass\n @param withdrawAddress the address to send withdrawn value."},"functionSelector":"c23a5cea","id":3718,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawStake","nameLocation":"2990:13:17","nodeType":"FunctionDefinition","parameters":{"id":3716,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3715,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3020:15:17","nodeType":"VariableDeclaration","scope":3718,"src":"3004:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3714,"name":"address","nodeType":"ElementaryTypeName","src":"3004:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"3003:33:17"},"returnParameters":{"id":3717,"nodeType":"ParameterList","parameters":[],"src":"3045:0:17"},"scope":3727,"src":"2981:65:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3719,"nodeType":"StructuredDocumentation","src":"3052:165:17","text":" withdraw from the deposit.\n @param withdrawAddress the address to send withdrawn value.\n @param withdrawAmount the amount to withdraw."},"functionSelector":"205c2878","id":3726,"implemented":false,"kind":"function","modifiers":[],"name":"withdrawTo","nameLocation":"3231:10:17","nodeType":"FunctionDefinition","parameters":{"id":3724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3721,"mutability":"mutable","name":"withdrawAddress","nameLocation":"3258:15:17","nodeType":"VariableDeclaration","scope":3726,"src":"3242:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3720,"name":"address","nodeType":"ElementaryTypeName","src":"3242:15:17","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3723,"mutability":"mutable","name":"withdrawAmount","nameLocation":"3283:14:17","nodeType":"VariableDeclaration","scope":3726,"src":"3275:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3722,"name":"uint256","nodeType":"ElementaryTypeName","src":"3275:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3241:57:17"},"returnParameters":{"id":3725,"nodeType":"ParameterList","parameters":[],"src":"3307:0:17"},"scope":3727,"src":"3222:86:17","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3728,"src":"279:3031:17","usedErrors":[]}],"src":"41:3270:17"},"id":17},"account-abstraction/contracts/interfaces/UserOperation.sol":{"ast":{"absolutePath":"account-abstraction/contracts/interfaces/UserOperation.sol","exportedSymbols":{"UserOperation":[3754],"UserOperationLib":[3924],"calldataKeccak":[3330]},"id":3925,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3729,"literals":["solidity","^","0.8",".12"],"nodeType":"PragmaDirective","src":"36:24:18"},{"absolutePath":"account-abstraction/contracts/core/Helpers.sol","file":"../core/Helpers.sol","id":3731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3925,"sourceUnit":3331,"src":"104:51:18","symbolAliases":[{"foreign":{"id":3730,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"112:14:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"canonicalName":"UserOperation","id":3754,"members":[{"constant":false,"id":3733,"mutability":"mutable","name":"sender","nameLocation":"1237:6:18","nodeType":"VariableDeclaration","scope":3754,"src":"1229:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3732,"name":"address","nodeType":"ElementaryTypeName","src":"1229:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3735,"mutability":"mutable","name":"nonce","nameLocation":"1261:5:18","nodeType":"VariableDeclaration","scope":3754,"src":"1253:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3734,"name":"uint256","nodeType":"ElementaryTypeName","src":"1253:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3737,"mutability":"mutable","name":"initCode","nameLocation":"1282:8:18","nodeType":"VariableDeclaration","scope":3754,"src":"1276:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3736,"name":"bytes","nodeType":"ElementaryTypeName","src":"1276:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3739,"mutability":"mutable","name":"callData","nameLocation":"1306:8:18","nodeType":"VariableDeclaration","scope":3754,"src":"1300:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3738,"name":"bytes","nodeType":"ElementaryTypeName","src":"1300:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3741,"mutability":"mutable","name":"callGasLimit","nameLocation":"1332:12:18","nodeType":"VariableDeclaration","scope":3754,"src":"1324:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3740,"name":"uint256","nodeType":"ElementaryTypeName","src":"1324:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3743,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"1362:20:18","nodeType":"VariableDeclaration","scope":3754,"src":"1354:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1354:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3745,"mutability":"mutable","name":"preVerificationGas","nameLocation":"1400:18:18","nodeType":"VariableDeclaration","scope":3754,"src":"1392:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3744,"name":"uint256","nodeType":"ElementaryTypeName","src":"1392:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3747,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"1436:12:18","nodeType":"VariableDeclaration","scope":3754,"src":"1428:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3746,"name":"uint256","nodeType":"ElementaryTypeName","src":"1428:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3749,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"1466:20:18","nodeType":"VariableDeclaration","scope":3754,"src":"1458:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3748,"name":"uint256","nodeType":"ElementaryTypeName","src":"1458:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3751,"mutability":"mutable","name":"paymasterAndData","nameLocation":"1502:16:18","nodeType":"VariableDeclaration","scope":3754,"src":"1496:22:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3750,"name":"bytes","nodeType":"ElementaryTypeName","src":"1496:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3753,"mutability":"mutable","name":"signature","nameLocation":"1534:9:18","nodeType":"VariableDeclaration","scope":3754,"src":"1528:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3752,"name":"bytes","nodeType":"ElementaryTypeName","src":"1528:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"UserOperation","nameLocation":"1204:13:18","nodeType":"StructDefinition","scope":3925,"src":"1197:353:18","visibility":"public"},{"abstract":false,"baseContracts":[],"canonicalName":"UserOperationLib","contractDependencies":[],"contractKind":"library","documentation":{"id":3755,"nodeType":"StructuredDocumentation","src":"1552:77:18","text":" Utility functions helpful when working with UserOperation structs."},"fullyImplemented":true,"id":3924,"linearizedBaseContracts":[3924],"name":"UserOperationLib","nameLocation":"1638:16:18","nodeType":"ContractDefinition","nodes":[{"body":{"id":3775,"nodeType":"Block","src":"1744:199:18","statements":[{"assignments":[3764],"declarations":[{"constant":false,"id":3764,"mutability":"mutable","name":"data","nameLocation":"1762:4:18","nodeType":"VariableDeclaration","scope":3775,"src":"1754:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3763,"name":"address","nodeType":"ElementaryTypeName","src":"1754:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3765,"nodeType":"VariableDeclarationStatement","src":"1754:12:18"},{"AST":{"nodeType":"YulBlock","src":"1868:30:18","statements":[{"nodeType":"YulAssignment","src":"1869:28:18","value":{"arguments":[{"name":"userOp","nodeType":"YulIdentifier","src":"1890:6:18"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1877:12:18"},"nodeType":"YulFunctionCall","src":"1877:20:18"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"1869:4:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3764,"isOffset":false,"isSlot":false,"src":"1869:4:18","valueSize":1},{"declaration":3758,"isOffset":false,"isSlot":false,"src":"1890:6:18","valueSize":1}],"id":3766,"nodeType":"InlineAssembly","src":"1859:39:18"},{"expression":{"arguments":[{"arguments":[{"id":3771,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3764,"src":"1930:4:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3770,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1922:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3769,"name":"uint160","nodeType":"ElementaryTypeName","src":"1922:7:18","typeDescriptions":{}}},"id":3772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1922:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3768,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3767,"name":"address","nodeType":"ElementaryTypeName","src":"1914:7:18","typeDescriptions":{}}},"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:22:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3762,"id":3774,"nodeType":"Return","src":"1907:29:18"}]},"id":3776,"implemented":true,"kind":"function","modifiers":[],"name":"getSender","nameLocation":"1671:9:18","nodeType":"FunctionDefinition","parameters":{"id":3759,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3758,"mutability":"mutable","name":"userOp","nameLocation":"1704:6:18","nodeType":"VariableDeclaration","scope":3776,"src":"1681:29:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3757,"nodeType":"UserDefinedTypeName","pathNode":{"id":3756,"name":"UserOperation","nameLocations":["1681:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"1681:13:18"},"referencedDeclaration":3754,"src":"1681:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1680:31:18"},"returnParameters":{"id":3762,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3761,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3776,"src":"1735:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3760,"name":"address","nodeType":"ElementaryTypeName","src":"1735:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1734:9:18"},"scope":3924,"src":"1662:281:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3810,"nodeType":"Block","src":"2164:391:18","statements":[{"id":3809,"nodeType":"UncheckedBlock","src":"2170:379:18","statements":[{"assignments":[3785],"declarations":[{"constant":false,"id":3785,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"2198:12:18","nodeType":"VariableDeclaration","scope":3809,"src":"2190:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3784,"name":"uint256","nodeType":"ElementaryTypeName","src":"2190:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3788,"initialValue":{"expression":{"id":3786,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"2213:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2220:12:18","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":3747,"src":"2213:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2190:42:18"},{"assignments":[3790],"declarations":[{"constant":false,"id":3790,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"2250:20:18","nodeType":"VariableDeclaration","scope":3809,"src":"2242:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3789,"name":"uint256","nodeType":"ElementaryTypeName","src":"2242:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3793,"initialValue":{"expression":{"id":3791,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3779,"src":"2273:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:20:18","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":3749,"src":"2273:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2242:58:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3794,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"2314:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3795,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"2330:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2314:36:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3800,"nodeType":"IfStatement","src":"2310:161:18","trueBody":{"id":3799,"nodeType":"Block","src":"2352:119:18","statements":[{"expression":{"id":3797,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"2448:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3783,"id":3798,"nodeType":"Return","src":"2441:19:18"}]}},{"expression":{"arguments":[{"id":3802,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3785,"src":"2491:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3803,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3790,"src":"2505:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":3804,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2528:5:18","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":3805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2534:7:18","memberName":"basefee","nodeType":"MemberAccess","src":"2528:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2505:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3801,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3923,"src":"2487:3:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2487:55:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3783,"id":3808,"nodeType":"Return","src":"2480:62:18"}]}]},"id":3811,"implemented":true,"kind":"function","modifiers":[],"name":"gasPrice","nameLocation":"2092:8:18","nodeType":"FunctionDefinition","parameters":{"id":3780,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3779,"mutability":"mutable","name":"userOp","nameLocation":"2124:6:18","nodeType":"VariableDeclaration","scope":3811,"src":"2101:29:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3778,"nodeType":"UserDefinedTypeName","pathNode":{"id":3777,"name":"UserOperation","nameLocations":["2101:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"2101:13:18"},"referencedDeclaration":3754,"src":"2101:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2100:31:18"},"returnParameters":{"id":3783,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3782,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3811,"src":"2155:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3781,"name":"uint256","nodeType":"ElementaryTypeName","src":"2155:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2154:9:18"},"scope":3924,"src":"2083:472:18","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3890,"nodeType":"Block","src":"2647:856:18","statements":[{"assignments":[3820],"declarations":[{"constant":false,"id":3820,"mutability":"mutable","name":"sender","nameLocation":"2665:6:18","nodeType":"VariableDeclaration","scope":3890,"src":"2657:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3819,"name":"address","nodeType":"ElementaryTypeName","src":"2657:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3824,"initialValue":{"arguments":[{"id":3822,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2684:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":3821,"name":"getSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3776,"src":"2674:9:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$3754_calldata_ptr_$returns$_t_address_$","typeString":"function (struct UserOperation calldata) pure returns (address)"}},"id":3823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2674:17:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2657:34:18"},{"assignments":[3826],"declarations":[{"constant":false,"id":3826,"mutability":"mutable","name":"nonce","nameLocation":"2709:5:18","nodeType":"VariableDeclaration","scope":3890,"src":"2701:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3825,"name":"uint256","nodeType":"ElementaryTypeName","src":"2701:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3829,"initialValue":{"expression":{"id":3827,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2717:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2724:5:18","memberName":"nonce","nodeType":"MemberAccess","referencedDeclaration":3735,"src":"2717:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2701:28:18"},{"assignments":[3831],"declarations":[{"constant":false,"id":3831,"mutability":"mutable","name":"hashInitCode","nameLocation":"2747:12:18","nodeType":"VariableDeclaration","scope":3890,"src":"2739:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3830,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2739:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3836,"initialValue":{"arguments":[{"expression":{"id":3833,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2777:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2784:8:18","memberName":"initCode","nodeType":"MemberAccess","referencedDeclaration":3737,"src":"2777:15:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3832,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"2762:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":3835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2762:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2739:54:18"},{"assignments":[3838],"declarations":[{"constant":false,"id":3838,"mutability":"mutable","name":"hashCallData","nameLocation":"2811:12:18","nodeType":"VariableDeclaration","scope":3890,"src":"2803:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3837,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2803:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3843,"initialValue":{"arguments":[{"expression":{"id":3840,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2841:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2848:8:18","memberName":"callData","nodeType":"MemberAccess","referencedDeclaration":3739,"src":"2841:15:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3839,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"2826:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":3842,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2826:31:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2803:54:18"},{"assignments":[3845],"declarations":[{"constant":false,"id":3845,"mutability":"mutable","name":"callGasLimit","nameLocation":"2875:12:18","nodeType":"VariableDeclaration","scope":3890,"src":"2867:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3844,"name":"uint256","nodeType":"ElementaryTypeName","src":"2867:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3848,"initialValue":{"expression":{"id":3846,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2890:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2897:12:18","memberName":"callGasLimit","nodeType":"MemberAccess","referencedDeclaration":3741,"src":"2890:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2867:42:18"},{"assignments":[3850],"declarations":[{"constant":false,"id":3850,"mutability":"mutable","name":"verificationGasLimit","nameLocation":"2927:20:18","nodeType":"VariableDeclaration","scope":3890,"src":"2919:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3849,"name":"uint256","nodeType":"ElementaryTypeName","src":"2919:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3853,"initialValue":{"expression":{"id":3851,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"2950:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2957:20:18","memberName":"verificationGasLimit","nodeType":"MemberAccess","referencedDeclaration":3743,"src":"2950:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2919:58:18"},{"assignments":[3855],"declarations":[{"constant":false,"id":3855,"mutability":"mutable","name":"preVerificationGas","nameLocation":"2995:18:18","nodeType":"VariableDeclaration","scope":3890,"src":"2987:26:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3854,"name":"uint256","nodeType":"ElementaryTypeName","src":"2987:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3858,"initialValue":{"expression":{"id":3856,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"3016:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3857,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3023:18:18","memberName":"preVerificationGas","nodeType":"MemberAccess","referencedDeclaration":3745,"src":"3016:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2987:54:18"},{"assignments":[3860],"declarations":[{"constant":false,"id":3860,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"3059:12:18","nodeType":"VariableDeclaration","scope":3890,"src":"3051:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3859,"name":"uint256","nodeType":"ElementaryTypeName","src":"3051:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3863,"initialValue":{"expression":{"id":3861,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"3074:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3862,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3081:12:18","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":3747,"src":"3074:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3051:42:18"},{"assignments":[3865],"declarations":[{"constant":false,"id":3865,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"3111:20:18","nodeType":"VariableDeclaration","scope":3890,"src":"3103:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3864,"name":"uint256","nodeType":"ElementaryTypeName","src":"3103:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3868,"initialValue":{"expression":{"id":3866,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"3134:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3141:20:18","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":3749,"src":"3134:27:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3103:58:18"},{"assignments":[3870],"declarations":[{"constant":false,"id":3870,"mutability":"mutable","name":"hashPaymasterAndData","nameLocation":"3179:20:18","nodeType":"VariableDeclaration","scope":3890,"src":"3171:28:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3869,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3171:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3875,"initialValue":{"arguments":[{"expression":{"id":3872,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3814,"src":"3217:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3873,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3224:16:18","memberName":"paymasterAndData","nodeType":"MemberAccess","referencedDeclaration":3751,"src":"3217:23:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3871,"name":"calldataKeccak","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3330,"src":"3202:14:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_bytes32_$","typeString":"function (bytes calldata) pure returns (bytes32)"}},"id":3874,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3202:39:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3171:70:18"},{"expression":{"arguments":[{"id":3878,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3820,"src":"3283:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3879,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3826,"src":"3291:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3880,"name":"hashInitCode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3831,"src":"3310:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3881,"name":"hashCallData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3838,"src":"3324:12:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":3882,"name":"callGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3845,"src":"3350:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3883,"name":"verificationGasLimit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3850,"src":"3364:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3884,"name":"preVerificationGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3855,"src":"3386:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3885,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3860,"src":"3418:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3886,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3865,"src":"3432:20:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3887,"name":"hashPaymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"3466:20:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":3876,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3259:3:18","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3877,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3263:6:18","memberName":"encode","nodeType":"MemberAccess","src":"3259:10:18","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3259:237:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3818,"id":3889,"nodeType":"Return","src":"3252:244:18"}]},"id":3891,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"2570:4:18","nodeType":"FunctionDefinition","parameters":{"id":3815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"userOp","nameLocation":"2598:6:18","nodeType":"VariableDeclaration","scope":3891,"src":"2575:29:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3813,"nodeType":"UserDefinedTypeName","pathNode":{"id":3812,"name":"UserOperation","nameLocations":["2575:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"2575:13:18"},"referencedDeclaration":3754,"src":"2575:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"2574:31:18"},"returnParameters":{"id":3818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3817,"mutability":"mutable","name":"ret","nameLocation":"2642:3:18","nodeType":"VariableDeclaration","scope":3891,"src":"2629:16:18","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3816,"name":"bytes","nodeType":"ElementaryTypeName","src":"2629:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2628:18:18"},"scope":3924,"src":"2561:942:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3905,"nodeType":"Block","src":"3586:47:18","statements":[{"expression":{"arguments":[{"arguments":[{"id":3901,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3894,"src":"3618:6:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":3900,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3891,"src":"3613:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$3754_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (bytes memory)"}},"id":3902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3613:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3899,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3603:9:18","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3603:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":3898,"id":3904,"nodeType":"Return","src":"3596:30:18"}]},"id":3906,"implemented":true,"kind":"function","modifiers":[],"name":"hash","nameLocation":"3518:4:18","nodeType":"FunctionDefinition","parameters":{"id":3895,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3894,"mutability":"mutable","name":"userOp","nameLocation":"3546:6:18","nodeType":"VariableDeclaration","scope":3906,"src":"3523:29:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3893,"nodeType":"UserDefinedTypeName","pathNode":{"id":3892,"name":"UserOperation","nameLocations":["3523:13:18"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"3523:13:18"},"referencedDeclaration":3754,"src":"3523:13:18","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"3522:31:18"},"returnParameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3906,"src":"3577:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3577:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3576:9:18"},"scope":3924,"src":"3509:124:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3922,"nodeType":"Block","src":"3706:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3915,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"3723:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3916,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"3727:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3723:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3919,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3910,"src":"3735:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"3723:13:18","trueExpression":{"id":3918,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3908,"src":"3731:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3914,"id":3921,"nodeType":"Return","src":"3716:20:18"}]},"id":3923,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"3648:3:18","nodeType":"FunctionDefinition","parameters":{"id":3911,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"a","nameLocation":"3660:1:18","nodeType":"VariableDeclaration","scope":3923,"src":"3652:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3907,"name":"uint256","nodeType":"ElementaryTypeName","src":"3652:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3910,"mutability":"mutable","name":"b","nameLocation":"3671:1:18","nodeType":"VariableDeclaration","scope":3923,"src":"3663:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3909,"name":"uint256","nodeType":"ElementaryTypeName","src":"3663:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3651:22:18"},"returnParameters":{"id":3914,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3913,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3923,"src":"3697:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3912,"name":"uint256","nodeType":"ElementaryTypeName","src":"3697:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3696:9:18"},"scope":3924,"src":"3639:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3925,"src":"1630:2115:18","usedErrors":[]}],"src":"36:3710:18"},"id":18},"contracts/VerifyingPaymaster.sol":{"ast":{"absolutePath":"contracts/VerifyingPaymaster.sol","exportedSymbols":{"BasePaymaster":[3092],"ECDSA":[2007],"Helpers":[3943],"IERC20":[777],"IEntryPoint":[3568],"Math":[2872],"SafeERC20":[1119],"UserOperation":[3754],"UserOperationLib":[3924],"VerifyingPaymaster":[4302]},"id":4303,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":3926,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"36:24:19"},{"absolutePath":"account-abstraction/contracts/interfaces/IEntryPoint.sol","file":"account-abstraction/contracts/interfaces/IEntryPoint.sol","id":3928,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":3569,"src":"62:87:19","symbolAliases":[{"foreign":{"id":3927,"name":"IEntryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3568,"src":"71:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/UserOperation.sol","file":"account-abstraction/contracts/interfaces/UserOperation.sol","id":3930,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":3925,"src":"150:91:19","symbolAliases":[{"foreign":{"id":3929,"name":"UserOperation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"159:13:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/interfaces/UserOperation.sol","file":"account-abstraction/contracts/interfaces/UserOperation.sol","id":3932,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":3925,"src":"242:94:19","symbolAliases":[{"foreign":{"id":3931,"name":"UserOperationLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"251:16:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/core/BasePaymaster.sol","file":"account-abstraction/contracts/core/BasePaymaster.sol","id":3934,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":3093,"src":"337:85:19","symbolAliases":[{"foreign":{"id":3933,"name":"BasePaymaster","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3092,"src":"346:13:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":3936,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":2008,"src":"423:77:19","symbolAliases":[{"foreign":{"id":3935,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"432:5:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":3938,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":778,"src":"501:72:19","symbolAliases":[{"foreign":{"id":3937,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"510:6:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":3940,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":1120,"src":"574:84:19","symbolAliases":[{"foreign":{"id":3939,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1119,"src":"583:9:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"@openzeppelin/contracts/utils/math/Math.sol","id":3942,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4303,"sourceUnit":2873,"src":"659:67:19","symbolAliases":[{"foreign":{"id":3941,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"668:4:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"account-abstraction/contracts/core/Helpers.sol","file":"account-abstraction/contracts/core/Helpers.sol","id":3943,"nameLocation":"786:7:19","nodeType":"ImportDirective","scope":4303,"sourceUnit":3331,"src":"727:67:19","symbolAliases":[],"unitAlias":"Helpers"},{"abstract":false,"baseContracts":[{"baseName":{"id":3945,"name":"BasePaymaster","nameLocations":["1278:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":3092,"src":"1278:13:19"},"id":3946,"nodeType":"InheritanceSpecifier","src":"1278:13:19"}],"canonicalName":"VerifyingPaymaster","contractDependencies":[],"contractKind":"contract","documentation":{"id":3944,"nodeType":"StructuredDocumentation","src":"796:450:19","text":" A paymaster based on the eth-infinitism sample VerifyingPaymaster contract.\n It has the same functionality as the sample, but with added support for withdrawing ERC20 tokens.\n All withdrawn tokens will be transferred to the owner address.\n Note that the off-chain signer should have a strategy in place to handle a failed token withdrawal.\n See account-abstraction/contracts/samples/VerifyingPaymaster.sol for detailed comments."},"fullyImplemented":true,"id":4302,"linearizedBaseContracts":[4302,3092,112,1471,3622],"name":"VerifyingPaymaster","nameLocation":"1256:18:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3949,"libraryName":{"id":3947,"name":"ECDSA","nameLocations":["1304:5:19"],"nodeType":"IdentifierPath","referencedDeclaration":2007,"src":"1304:5:19"},"nodeType":"UsingForDirective","src":"1298:24:19","typeName":{"id":3948,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1314:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"global":false,"id":3953,"libraryName":{"id":3950,"name":"UserOperationLib","nameLocations":["1333:16:19"],"nodeType":"IdentifierPath","referencedDeclaration":3924,"src":"1333:16:19"},"nodeType":"UsingForDirective","src":"1327:41:19","typeName":{"id":3952,"nodeType":"UserDefinedTypeName","pathNode":{"id":3951,"name":"UserOperation","nameLocations":["1354:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"1354:13:19"},"referencedDeclaration":3754,"src":"1354:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}}},{"global":false,"id":3957,"libraryName":{"id":3954,"name":"SafeERC20","nameLocations":["1379:9:19"],"nodeType":"IdentifierPath","referencedDeclaration":1119,"src":"1379:9:19"},"nodeType":"UsingForDirective","src":"1373:27:19","typeName":{"id":3956,"nodeType":"UserDefinedTypeName","pathNode":{"id":3955,"name":"IERC20","nameLocations":["1393:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"1393:6:19"},"referencedDeclaration":777,"src":"1393:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}}},{"constant":false,"functionSelector":"9c90b443","id":3961,"mutability":"mutable","name":"senderNonce","nameLocation":"1454:11:19","nodeType":"VariableDeclaration","scope":4302,"src":"1406:59:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":3960,"keyName":"sender","keyNameLocation":"1422:6:19","keyType":{"id":3958,"name":"address","nodeType":"ElementaryTypeName","src":"1414:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1406:40:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"nonce","valueNameLocation":"1440:5:19","valueType":{"id":3959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1432:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"constant":true,"id":3964,"mutability":"constant","name":"VALID_PND_OFFSET","nameLocation":"1497:16:19","nodeType":"VariableDeclaration","scope":4302,"src":"1472:46:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3962,"name":"uint256","nodeType":"ElementaryTypeName","src":"1472:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3230","id":3963,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1516:2:19","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"constant":true,"id":3967,"mutability":"constant","name":"SIGNATURE_OFFSET","nameLocation":"1550:16:19","nodeType":"VariableDeclaration","scope":4302,"src":"1525:47:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3965,"name":"uint256","nodeType":"ElementaryTypeName","src":"1525:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"313438","id":3966,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1569:3:19","typeDescriptions":{"typeIdentifier":"t_rational_148_by_1","typeString":"int_const 148"},"value":"148"},"visibility":"private"},{"constant":true,"functionSelector":"b8202d8f","id":3970,"mutability":"constant","name":"POST_OP_GAS","nameLocation":"1603:11:19","nodeType":"VariableDeclaration","scope":4302,"src":"1579:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3968,"name":"uint256","nodeType":"ElementaryTypeName","src":"1579:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"3335303030","id":3969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1617:5:19","typeDescriptions":{"typeIdentifier":"t_rational_35000_by_1","typeString":"int_const 35000"},"value":"35000"},"visibility":"public"},{"body":{"id":3985,"nodeType":"Block","src":"1709:43:19","statements":[{"expression":{"arguments":[{"id":3982,"name":"_owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3975,"src":"1738:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3981,"name":"_transferOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":111,"src":"1719:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":3983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1719:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3984,"nodeType":"ExpressionStatement","src":"1719:26:19"}]},"id":3986,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":3978,"name":"_entryPoint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3973,"src":"1696:11:19","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}}],"id":3979,"kind":"baseConstructorSpecifier","modifierName":{"id":3977,"name":"BasePaymaster","nameLocations":["1682:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":3092,"src":"1682:13:19"},"nodeType":"ModifierInvocation","src":"1682:26:19"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":3976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3973,"mutability":"mutable","name":"_entryPoint","nameLocation":"1653:11:19","nodeType":"VariableDeclaration","scope":3986,"src":"1641:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"},"typeName":{"id":3972,"nodeType":"UserDefinedTypeName","pathNode":{"id":3971,"name":"IEntryPoint","nameLocations":["1641:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":3568,"src":"1641:11:19"},"referencedDeclaration":3568,"src":"1641:11:19","typeDescriptions":{"typeIdentifier":"t_contract$_IEntryPoint_$3568","typeString":"contract IEntryPoint"}},"visibility":"internal"},{"constant":false,"id":3975,"mutability":"mutable","name":"_owner","nameLocation":"1674:6:19","nodeType":"VariableDeclaration","scope":3986,"src":"1666:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3974,"name":"address","nodeType":"ElementaryTypeName","src":"1666:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1640:41:19"},"returnParameters":{"id":3980,"nodeType":"ParameterList","parameters":[],"src":"1709:0:19"},"scope":4302,"src":"1629:123:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4000,"nodeType":"Block","src":"1844:387:19","statements":[{"assignments":[3995],"declarations":[{"constant":false,"id":3995,"mutability":"mutable","name":"pnd","nameLocation":"1869:3:19","nodeType":"VariableDeclaration","scope":4000,"src":"1854:18:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3994,"name":"bytes","nodeType":"ElementaryTypeName","src":"1854:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3998,"initialValue":{"expression":{"id":3996,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1875:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":3997,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1882:16:19","memberName":"paymasterAndData","nodeType":"MemberAccess","referencedDeclaration":3751,"src":"1875:23:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"nodeType":"VariableDeclarationStatement","src":"1854:44:19"},{"AST":{"nodeType":"YulBlock","src":"1973:252:19","statements":[{"nodeType":"YulVariableDeclaration","src":"1987:17:19","value":{"name":"userOp","nodeType":"YulIdentifier","src":"1998:6:19"},"variables":[{"name":"ofs","nodeType":"YulTypedName","src":"1991:3:19","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2017:40:19","value":{"arguments":[{"arguments":[{"name":"pnd.offset","nodeType":"YulIdentifier","src":"2036:10:19"},{"name":"ofs","nodeType":"YulIdentifier","src":"2048:3:19"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2032:3:19"},"nodeType":"YulFunctionCall","src":"2032:20:19"},{"kind":"number","nodeType":"YulLiteral","src":"2054:2:19","type":"","value":"32"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2028:3:19"},"nodeType":"YulFunctionCall","src":"2028:29:19"},"variables":[{"name":"len","nodeType":"YulTypedName","src":"2021:3:19","type":""}]},{"nodeType":"YulAssignment","src":"2070:18:19","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2083:4:19","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2077:5:19"},"nodeType":"YulFunctionCall","src":"2077:11:19"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2070:3:19"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2108:4:19","type":"","value":"0x40"},{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"2118:3:19"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2127:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"2132:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:19"},"nodeType":"YulFunctionCall","src":"2123:12:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2114:3:19"},"nodeType":"YulFunctionCall","src":"2114:22:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2101:6:19"},"nodeType":"YulFunctionCall","src":"2101:36:19"},"nodeType":"YulExpressionStatement","src":"2101:36:19"},{"expression":{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"2157:3:19"},{"name":"len","nodeType":"YulIdentifier","src":"2162:3:19"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2150:6:19"},"nodeType":"YulFunctionCall","src":"2150:16:19"},"nodeType":"YulExpressionStatement","src":"2150:16:19"},{"expression":{"arguments":[{"arguments":[{"name":"ret","nodeType":"YulIdentifier","src":"2196:3:19"},{"kind":"number","nodeType":"YulLiteral","src":"2201:2:19","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2192:3:19"},"nodeType":"YulFunctionCall","src":"2192:12:19"},{"name":"ofs","nodeType":"YulIdentifier","src":"2206:3:19"},{"name":"len","nodeType":"YulIdentifier","src":"2211:3:19"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"2179:12:19"},"nodeType":"YulFunctionCall","src":"2179:36:19"},"nodeType":"YulExpressionStatement","src":"2179:36:19"}]},"evmVersion":"paris","externalReferences":[{"declaration":3995,"isOffset":true,"isSlot":false,"src":"2036:10:19","suffix":"offset","valueSize":1},{"declaration":3992,"isOffset":false,"isSlot":false,"src":"2070:3:19","valueSize":1},{"declaration":3992,"isOffset":false,"isSlot":false,"src":"2118:3:19","valueSize":1},{"declaration":3992,"isOffset":false,"isSlot":false,"src":"2157:3:19","valueSize":1},{"declaration":3992,"isOffset":false,"isSlot":false,"src":"2196:3:19","valueSize":1},{"declaration":3989,"isOffset":false,"isSlot":false,"src":"1998:6:19","valueSize":1}],"id":3999,"nodeType":"InlineAssembly","src":"1964:261:19"}]},"id":4001,"implemented":true,"kind":"function","modifiers":[],"name":"pack","nameLocation":"1767:4:19","nodeType":"FunctionDefinition","parameters":{"id":3990,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3989,"mutability":"mutable","name":"userOp","nameLocation":"1795:6:19","nodeType":"VariableDeclaration","scope":4001,"src":"1772:29:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":3988,"nodeType":"UserDefinedTypeName","pathNode":{"id":3987,"name":"UserOperation","nameLocations":["1772:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"1772:13:19"},"referencedDeclaration":3754,"src":"1772:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"}],"src":"1771:31:19"},"returnParameters":{"id":3993,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3992,"mutability":"mutable","name":"ret","nameLocation":"1839:3:19","nodeType":"VariableDeclaration","scope":4001,"src":"1826:16:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3991,"name":"bytes","nodeType":"ElementaryTypeName","src":"1826:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1825:18:19"},"scope":4302,"src":"1758:473:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4041,"nodeType":"Block","src":"2441:392:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":4021,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"2534:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}],"id":4020,"name":"pack","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"2529:4:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$3754_calldata_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (bytes memory)"}},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2529:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"expression":{"id":4023,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"2563:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2569:7:19","memberName":"chainid","nodeType":"MemberAccess","src":"2563:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":4027,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2606:4:19","typeDescriptions":{"typeIdentifier":"t_contract$_VerifyingPaymaster_$4302","typeString":"contract VerifyingPaymaster"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_VerifyingPaymaster_$4302","typeString":"contract VerifyingPaymaster"}],"id":4026,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2598:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4025,"name":"address","nodeType":"ElementaryTypeName","src":"2598:7:19","typeDescriptions":{}}},"id":4028,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2598:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":4029,"name":"senderNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"2633:11:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4033,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4030,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"2645:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":4031,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2652:9:19","memberName":"getSender","nodeType":"MemberAccess","referencedDeclaration":3776,"src":"2645:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$3754_calldata_ptr_$returns$_t_address_$attached_to$_t_struct$_UserOperation_$3754_calldata_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (address)"}},"id":4032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2645:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2633:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4034,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4006,"src":"2686:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4035,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4008,"src":"2718:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4036,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"2750:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4037,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4012,"src":"2782:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4018,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2497:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4019,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2501:6:19","memberName":"encode","nodeType":"MemberAccess","src":"2497:10:19","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4038,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:315:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4017,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2470:9:19","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2470:356:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":4016,"id":4040,"nodeType":"Return","src":"2451:375:19"}]},"functionSelector":"290da2ad","id":4042,"implemented":true,"kind":"function","modifiers":[],"name":"getHash","nameLocation":"2246:7:19","nodeType":"FunctionDefinition","parameters":{"id":4013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4004,"mutability":"mutable","name":"userOp","nameLocation":"2286:6:19","nodeType":"VariableDeclaration","scope":4042,"src":"2263:29:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":4003,"nodeType":"UserDefinedTypeName","pathNode":{"id":4002,"name":"UserOperation","nameLocations":["2263:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"2263:13:19"},"referencedDeclaration":3754,"src":"2263:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":4006,"mutability":"mutable","name":"validUntil","nameLocation":"2309:10:19","nodeType":"VariableDeclaration","scope":4042,"src":"2302:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4005,"name":"uint48","nodeType":"ElementaryTypeName","src":"2302:6:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":4008,"mutability":"mutable","name":"validAfter","nameLocation":"2336:10:19","nodeType":"VariableDeclaration","scope":4042,"src":"2329:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4007,"name":"uint48","nodeType":"ElementaryTypeName","src":"2329:6:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":4010,"mutability":"mutable","name":"erc20Token","nameLocation":"2364:10:19","nodeType":"VariableDeclaration","scope":4042,"src":"2356:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4009,"name":"address","nodeType":"ElementaryTypeName","src":"2356:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4012,"mutability":"mutable","name":"exchangeRate","nameLocation":"2392:12:19","nodeType":"VariableDeclaration","scope":4042,"src":"2384:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4011,"name":"uint256","nodeType":"ElementaryTypeName","src":"2384:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2253:157:19"},"returnParameters":{"id":4016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4015,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4042,"src":"2432:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4014,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2432:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2431:9:19"},"scope":4302,"src":"2237:596:19","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[2937],"body":{"id":4162,"nodeType":"Block","src":"3056:1188:19","statements":[{"expression":{"components":[{"id":4057,"name":"requiredPreFund","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4049,"src":"3067:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4058,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3066:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4059,"nodeType":"ExpressionStatement","src":"3066:17:19"},{"assignments":[4061,4063,4065,4067,4069],"declarations":[{"constant":false,"id":4061,"mutability":"mutable","name":"validUntil","nameLocation":"3115:10:19","nodeType":"VariableDeclaration","scope":4162,"src":"3108:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4060,"name":"uint48","nodeType":"ElementaryTypeName","src":"3108:6:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":4063,"mutability":"mutable","name":"validAfter","nameLocation":"3146:10:19","nodeType":"VariableDeclaration","scope":4162,"src":"3139:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4062,"name":"uint48","nodeType":"ElementaryTypeName","src":"3139:6:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":4065,"mutability":"mutable","name":"erc20Token","nameLocation":"3178:10:19","nodeType":"VariableDeclaration","scope":4162,"src":"3170:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4064,"name":"address","nodeType":"ElementaryTypeName","src":"3170:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4067,"mutability":"mutable","name":"exchangeRate","nameLocation":"3210:12:19","nodeType":"VariableDeclaration","scope":4162,"src":"3202:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4066,"name":"uint256","nodeType":"ElementaryTypeName","src":"3202:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4069,"mutability":"mutable","name":"signature","nameLocation":"3251:9:19","nodeType":"VariableDeclaration","scope":4162,"src":"3236:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4068,"name":"bytes","nodeType":"ElementaryTypeName","src":"3236:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4074,"initialValue":{"arguments":[{"expression":{"id":4071,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"3295:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":4072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3302:16:19","memberName":"paymasterAndData","nodeType":"MemberAccess","referencedDeclaration":3751,"src":"3295:23:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":4070,"name":"parsePaymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4301,"src":"3273:21:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_calldata_ptr_$returns$_t_uint48_$_t_uint48_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$","typeString":"function (bytes calldata) pure returns (uint48,uint48,address,uint256,bytes calldata)"}},"id":4073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3273:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint48_$_t_uint48_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$","typeString":"tuple(uint48,uint48,address,uint256,bytes calldata)"}},"nodeType":"VariableDeclarationStatement","src":"3094:225:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4076,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"3401:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3411:6:19","memberName":"length","nodeType":"MemberAccess","src":"3401:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3634","id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3421:2:19","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"3401:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4083,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4080,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"3427:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4081,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3437:6:19","memberName":"length","nodeType":"MemberAccess","src":"3427:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":4082,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3447:2:19","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"3427:22:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3401:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"566572696679696e675061796d61737465723a20696e76616c6964207369676e6174757265206c656e67746820696e207061796d6173746572416e6444617461","id":4085,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3463:66:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c0ccd72718b49b9af08aac30156bc47d10e177349cbe5dac0a36b471195929a7","typeString":"literal_string \"VerifyingPaymaster: invalid signature length in paymasterAndData\""},"value":"VerifyingPaymaster: invalid signature length in paymasterAndData"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c0ccd72718b49b9af08aac30156bc47d10e177349cbe5dac0a36b471195929a7","typeString":"literal_string \"VerifyingPaymaster: invalid signature length in paymasterAndData\""}],"id":4075,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3380:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3380:159:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4087,"nodeType":"ExpressionStatement","src":"3380:159:19"},{"assignments":[4089],"declarations":[{"constant":false,"id":4089,"mutability":"mutable","name":"hash","nameLocation":"3557:4:19","nodeType":"VariableDeclaration","scope":4162,"src":"3549:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4088,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3549:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4100,"initialValue":{"arguments":[{"arguments":[{"id":4093,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"3601:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},{"id":4094,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"3609:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4095,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"3621:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4096,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"3633:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4097,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"3645:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4092,"name":"getHash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4042,"src":"3593:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_UserOperation_$3754_calldata_ptr_$_t_uint48_$_t_uint48_$_t_address_$_t_uint256_$returns$_t_bytes32_$","typeString":"function (struct UserOperation calldata,uint48,uint48,address,uint256) view returns (bytes32)"}},"id":4098,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3593:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4090,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"3564:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$2007_$","typeString":"type(library ECDSA)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3570:22:19","memberName":"toEthSignedMessageHash","nodeType":"MemberAccess","referencedDeclaration":1964,"src":"3564:28:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_bytes32_$","typeString":"function (bytes32) pure returns (bytes32)"}},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:95:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3549:110:19"},{"expression":{"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3669:33:19","subExpression":{"baseExpression":{"id":4101,"name":"senderNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"3669:11:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4105,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4102,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"3681:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3688:9:19","memberName":"getSender","nodeType":"MemberAccess","referencedDeclaration":3776,"src":"3681:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_struct$_UserOperation_$3754_calldata_ptr_$returns$_t_address_$attached_to$_t_struct$_UserOperation_$3754_calldata_ptr_$","typeString":"function (struct UserOperation calldata) pure returns (address)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3681:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3669:31:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4107,"nodeType":"ExpressionStatement","src":"3669:33:19"},{"expression":{"id":4110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4108,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"3712:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"","id":4109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3722:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"src":"3712:12:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4111,"nodeType":"ExpressionStatement","src":"3712:12:19"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4112,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"3738:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":4115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3760:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4114,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3752:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4113,"name":"address","nodeType":"ElementaryTypeName","src":"3752:7:19","typeDescriptions":{}}},"id":4116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3752:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3738:24:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4133,"nodeType":"IfStatement","src":"3734:260:19","trueBody":{"id":4132,"nodeType":"Block","src":"3764:230:19","statements":[{"expression":{"id":4130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4118,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"3778:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"id":4121,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"3816:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":4122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3823:6:19","memberName":"sender","nodeType":"MemberAccess","referencedDeclaration":3733,"src":"3816:13:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4123,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4065,"src":"3847:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4124,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4067,"src":"3875:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4125,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"3905:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":4126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3912:12:19","memberName":"maxFeePerGas","nodeType":"MemberAccess","referencedDeclaration":3747,"src":"3905:19:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4127,"name":"userOp","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4045,"src":"3942:6:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation calldata"}},"id":4128,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3949:20:19","memberName":"maxPriorityFeePerGas","nodeType":"MemberAccess","referencedDeclaration":3749,"src":"3942:27:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4119,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3788:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3792:6:19","memberName":"encode","nodeType":"MemberAccess","src":"3788:10:19","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3788:195:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"src":"3778:205:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4131,"nodeType":"ExpressionStatement","src":"3778:205:19"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4141,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":4134,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"4008:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4008:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"id":4138,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4089,"src":"4033:4:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4139,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4069,"src":"4039:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":4136,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"4019:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ECDSA_$2007_$","typeString":"type(library ECDSA)"}},"id":4137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4025:7:19","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1773,"src":"4019:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":4140,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4019:30:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4008:41:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4152,"nodeType":"IfStatement","src":"4004:147:19","trueBody":{"id":4151,"nodeType":"Block","src":"4051:100:19","statements":[{"expression":{"components":[{"id":4142,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"4073:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"hexValue":"74727565","id":4145,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4110:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},{"id":4146,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"4116:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4147,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"4128:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"expression":{"id":4143,"name":"Helpers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"4082:7:19","typeDescriptions":{"typeIdentifier":"t_module_3331","typeString":"module \"account-abstraction/contracts/core/Helpers.sol\""}},"id":4144,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4090:19:19","memberName":"_packValidationData","nodeType":"MemberAccess","referencedDeclaration":3320,"src":"4082:27:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint48_$_t_uint48_$returns$_t_uint256_$","typeString":"function (bool,uint48,uint48) pure returns (uint256)"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4082:57:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4149,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4072:68:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes memory,uint256)"}},"functionReturnParameters":4056,"id":4150,"nodeType":"Return","src":"4065:75:19"}]}},{"expression":{"components":[{"id":4153,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4053,"src":"4169:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"arguments":[{"hexValue":"66616c7365","id":4156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"4206:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},{"id":4157,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"4213:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4158,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4063,"src":"4225:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_uint48","typeString":"uint48"},{"typeIdentifier":"t_uint48","typeString":"uint48"}],"expression":{"id":4154,"name":"Helpers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3943,"src":"4178:7:19","typeDescriptions":{"typeIdentifier":"t_module_3331","typeString":"module \"account-abstraction/contracts/core/Helpers.sol\""}},"id":4155,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4186:19:19","memberName":"_packValidationData","nodeType":"MemberAccess","referencedDeclaration":3320,"src":"4178:27:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bool_$_t_uint48_$_t_uint48_$returns$_t_uint256_$","typeString":"function (bool,uint48,uint48) pure returns (uint256)"}},"id":4159,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4178:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4160,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4168:69:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_bytes_memory_ptr_$_t_uint256_$","typeString":"tuple(bytes memory,uint256)"}},"functionReturnParameters":4056,"id":4161,"nodeType":"Return","src":"4161:76:19"}]},"id":4163,"implemented":true,"kind":"function","modifiers":[],"name":"_validatePaymasterUserOp","nameLocation":"2848:24:19","nodeType":"FunctionDefinition","overrides":{"id":4051,"nodeType":"OverrideSpecifier","overrides":[],"src":"2992:8:19"},"parameters":{"id":4050,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4045,"mutability":"mutable","name":"userOp","nameLocation":"2905:6:19","nodeType":"VariableDeclaration","scope":4163,"src":"2882:29:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_calldata_ptr","typeString":"struct UserOperation"},"typeName":{"id":4044,"nodeType":"UserDefinedTypeName","pathNode":{"id":4043,"name":"UserOperation","nameLocations":["2882:13:19"],"nodeType":"IdentifierPath","referencedDeclaration":3754,"src":"2882:13:19"},"referencedDeclaration":3754,"src":"2882:13:19","typeDescriptions":{"typeIdentifier":"t_struct$_UserOperation_$3754_storage_ptr","typeString":"struct UserOperation"}},"visibility":"internal"},{"constant":false,"id":4047,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4163,"src":"2921:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4046,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2921:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4049,"mutability":"mutable","name":"requiredPreFund","nameLocation":"2961:15:19","nodeType":"VariableDeclaration","scope":4163,"src":"2953:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4048,"name":"uint256","nodeType":"ElementaryTypeName","src":"2953:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2872:110:19"},"returnParameters":{"id":4056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4053,"mutability":"mutable","name":"context","nameLocation":"3023:7:19","nodeType":"VariableDeclaration","scope":4163,"src":"3010:20:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4052,"name":"bytes","nodeType":"ElementaryTypeName","src":"3010:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4055,"mutability":"mutable","name":"validationData","nameLocation":"3040:14:19","nodeType":"VariableDeclaration","scope":4163,"src":"3032:22:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4054,"name":"uint256","nodeType":"ElementaryTypeName","src":"3032:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3009:46:19"},"scope":4302,"src":"2839:1405:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[2980],"body":{"id":4255,"nodeType":"Block","src":"4349:720:19","statements":[{"assignments":[4175,4178,4180,4182,4184],"declarations":[{"constant":false,"id":4175,"mutability":"mutable","name":"sender","nameLocation":"4368:6:19","nodeType":"VariableDeclaration","scope":4255,"src":"4360:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4174,"name":"address","nodeType":"ElementaryTypeName","src":"4360:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4178,"mutability":"mutable","name":"token","nameLocation":"4383:5:19","nodeType":"VariableDeclaration","scope":4255,"src":"4376:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"},"typeName":{"id":4177,"nodeType":"UserDefinedTypeName","pathNode":{"id":4176,"name":"IERC20","nameLocations":["4376:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":777,"src":"4376:6:19"},"referencedDeclaration":777,"src":"4376:6:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4180,"mutability":"mutable","name":"exchangeRate","nameLocation":"4398:12:19","nodeType":"VariableDeclaration","scope":4255,"src":"4390:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4179,"name":"uint256","nodeType":"ElementaryTypeName","src":"4390:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4182,"mutability":"mutable","name":"maxFeePerGas","nameLocation":"4420:12:19","nodeType":"VariableDeclaration","scope":4255,"src":"4412:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4181,"name":"uint256","nodeType":"ElementaryTypeName","src":"4412:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4184,"mutability":"mutable","name":"maxPriorityFeePerGas","nameLocation":"4442:20:19","nodeType":"VariableDeclaration","scope":4255,"src":"4434:28:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4183,"name":"uint256","nodeType":"ElementaryTypeName","src":"4434:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4199,"initialValue":{"arguments":[{"id":4187,"name":"context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4168,"src":"4490:7:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},{"components":[{"id":4189,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4500:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4188,"name":"address","nodeType":"ElementaryTypeName","src":"4500:7:19","typeDescriptions":{}}},{"id":4190,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4509:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$777_$","typeString":"type(contract IERC20)"}},{"id":4192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4517:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4191,"name":"uint256","nodeType":"ElementaryTypeName","src":"4517:7:19","typeDescriptions":{}}},{"id":4194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4526:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4193,"name":"uint256","nodeType":"ElementaryTypeName","src":"4526:7:19","typeDescriptions":{}}},{"id":4196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4535:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4195,"name":"uint256","nodeType":"ElementaryTypeName","src":"4535:7:19","typeDescriptions":{}}}],"id":4197,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"4499:44:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_contract$_IERC20_$777_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(contract IERC20),type(uint256),type(uint256),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"},{"typeIdentifier":"t_tuple$_t_type$_t_address_$_$_t_type$_t_contract$_IERC20_$777_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(address),type(contract IERC20),type(uint256),type(uint256),type(uint256))"}],"expression":{"id":4185,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4466:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4483:6:19","memberName":"decode","nodeType":"MemberAccess","src":"4466:23:19","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4466:78:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_payable_$_t_contract$_IERC20_$777_$_t_uint256_$_t_uint256_$_t_uint256_$","typeString":"tuple(address payable,contract IERC20,uint256,uint256,uint256)"}},"nodeType":"VariableDeclarationStatement","src":"4359:185:19"},{"assignments":[4201],"declarations":[{"constant":false,"id":4201,"mutability":"mutable","name":"opGasPrice","nameLocation":"4563:10:19","nodeType":"VariableDeclaration","scope":4255,"src":"4555:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4200,"name":"uint256","nodeType":"ElementaryTypeName","src":"4555:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4202,"nodeType":"VariableDeclarationStatement","src":"4555:18:19"},{"id":4224,"nodeType":"UncheckedBlock","src":"4583:246:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4205,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4203,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"4611:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4204,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"4627:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4611:36:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4222,"nodeType":"Block","src":"4713:106:19","statements":[{"expression":{"id":4220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4211,"name":"opGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"4731:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":4214,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"4753:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4215,"name":"maxPriorityFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4184,"src":"4767:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"expression":{"id":4216,"name":"block","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-4,"src":"4790:5:19","typeDescriptions":{"typeIdentifier":"t_magic_block","typeString":"block"}},"id":4217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4796:7:19","memberName":"basefee","nodeType":"MemberAccess","src":"4790:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4767:36:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4212,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2872,"src":"4744:4:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2872_$","typeString":"type(library Math)"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4749:3:19","memberName":"min","nodeType":"MemberAccess","referencedDeclaration":2050,"src":"4744:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":4219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4744:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4731:73:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4221,"nodeType":"ExpressionStatement","src":"4731:73:19"}]},"id":4223,"nodeType":"IfStatement","src":"4607:212:19","trueBody":{"id":4210,"nodeType":"Block","src":"4649:58:19","statements":[{"expression":{"id":4208,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4206,"name":"opGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"4667:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4207,"name":"maxFeePerGas","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4182,"src":"4680:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4667:25:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4209,"nodeType":"ExpressionStatement","src":"4667:25:19"}]}}]},{"assignments":[4226],"declarations":[{"constant":false,"id":4226,"mutability":"mutable","name":"actualTokenCost","nameLocation":"4847:15:19","nodeType":"VariableDeclaration","scope":4255,"src":"4839:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4225,"name":"uint256","nodeType":"ElementaryTypeName","src":"4839:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4239,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4227,"name":"actualGasCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4170,"src":"4867:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4228,"name":"POST_OP_GAS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3970,"src":"4884:11:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4229,"name":"opGasPrice","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"4898:10:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4884:24:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4231,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4883:26:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4867:42:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4233,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4866:44:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":4234,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4180,"src":"4913:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4866:59:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4236,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4865:61:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"31653138","id":4237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4929:4:19","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1e18"},"src":"4865:68:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4839:94:19"},{"condition":{"commonType":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"},"id":4243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4240,"name":"mode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4166,"src":"4947:4:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4241,"name":"PostOpMode","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3595,"src":"4955:10:19","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PostOpMode_$3595_$","typeString":"type(enum IPaymaster.PostOpMode)"}},"id":4242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4966:14:19","memberName":"postOpReverted","nodeType":"MemberAccess","referencedDeclaration":3594,"src":"4955:25:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},"src":"4947:33:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4254,"nodeType":"IfStatement","src":"4943:120:19","trueBody":{"id":4253,"nodeType":"Block","src":"4982:81:19","statements":[{"expression":{"arguments":[{"id":4247,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4175,"src":"5019:6:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":4248,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":40,"src":"5027:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5027:7:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4250,"name":"actualTokenCost","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"5036:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4244,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4178,"src":"4996:5:19","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$777","typeString":"contract IERC20"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5002:16:19","memberName":"safeTransferFrom","nodeType":"MemberAccess","referencedDeclaration":896,"src":"4996:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$777_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$777_$","typeString":"function (contract IERC20,address,address,uint256)"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4996:56:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4252,"nodeType":"ExpressionStatement","src":"4996:56:19"}]}}]},"id":4256,"implemented":true,"kind":"function","modifiers":[],"name":"_postOp","nameLocation":"4259:7:19","nodeType":"FunctionDefinition","overrides":{"id":4172,"nodeType":"OverrideSpecifier","overrides":[],"src":"4340:8:19"},"parameters":{"id":4171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4166,"mutability":"mutable","name":"mode","nameLocation":"4278:4:19","nodeType":"VariableDeclaration","scope":4256,"src":"4267:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"},"typeName":{"id":4165,"nodeType":"UserDefinedTypeName","pathNode":{"id":4164,"name":"PostOpMode","nameLocations":["4267:10:19"],"nodeType":"IdentifierPath","referencedDeclaration":3595,"src":"4267:10:19"},"referencedDeclaration":3595,"src":"4267:10:19","typeDescriptions":{"typeIdentifier":"t_enum$_PostOpMode_$3595","typeString":"enum IPaymaster.PostOpMode"}},"visibility":"internal"},{"constant":false,"id":4168,"mutability":"mutable","name":"context","nameLocation":"4299:7:19","nodeType":"VariableDeclaration","scope":4256,"src":"4284:22:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4167,"name":"bytes","nodeType":"ElementaryTypeName","src":"4284:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4170,"mutability":"mutable","name":"actualGasCost","nameLocation":"4316:13:19","nodeType":"VariableDeclaration","scope":4256,"src":"4308:21:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4169,"name":"uint256","nodeType":"ElementaryTypeName","src":"4308:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4266:64:19"},"returnParameters":{"id":4173,"nodeType":"ParameterList","parameters":[],"src":"4349:0:19"},"scope":4302,"src":"4250:819:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4300,"nodeType":"Block","src":"5378:260:19","statements":[{"expression":{"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"components":[{"id":4271,"name":"validUntil","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"5389:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4272,"name":"validAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4263,"src":"5401:10:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},{"id":4273,"name":"erc20Token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4265,"src":"5413:10:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4274,"name":"exchangeRate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"5425:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4275,"isConstant":false,"isInlineArray":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"TupleExpression","src":"5388:50:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint48_$_t_uint48_$_t_address_$_t_uint256_$","typeString":"tuple(uint48,uint48,address,uint256)"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"baseExpression":{"id":4278,"name":"paymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"5465:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"id":4280,"name":"SIGNATURE_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5499:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"5465:51:19","startExpression":{"id":4279,"name":"VALID_PND_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3964,"src":"5482:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},{"components":[{"id":4283,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5531:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4282,"name":"uint48","nodeType":"ElementaryTypeName","src":"5531:6:19","typeDescriptions":{}}},{"id":4285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5539:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint48_$","typeString":"type(uint48)"},"typeName":{"id":4284,"name":"uint48","nodeType":"ElementaryTypeName","src":"5539:6:19","typeDescriptions":{}}},{"id":4287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5547:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4286,"name":"address","nodeType":"ElementaryTypeName","src":"5547:7:19","typeDescriptions":{}}},{"id":4289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5556:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4288,"name":"uint256","nodeType":"ElementaryTypeName","src":"5556:7:19","typeDescriptions":{}}}],"id":4290,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5530:34:19","typeDescriptions":{"typeIdentifier":"t_tuple$_t_type$_t_uint48_$_$_t_type$_t_uint48_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(uint48),type(uint48),type(address),type(uint256))"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"},{"typeIdentifier":"t_tuple$_t_type$_t_uint48_$_$_t_type$_t_uint48_$_$_t_type$_t_address_$_$_t_type$_t_uint256_$_$","typeString":"tuple(type(uint48),type(uint48),type(address),type(uint256))"}],"expression":{"id":4276,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5441:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4277,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5445:6:19","memberName":"decode","nodeType":"MemberAccess","src":"5441:10:19","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5441:133:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_uint48_$_t_uint48_$_t_address_payable_$_t_uint256_$","typeString":"tuple(uint48,uint48,address payable,uint256)"}},"src":"5388:186:19","typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4293,"nodeType":"ExpressionStatement","src":"5388:186:19"},{"expression":{"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4294,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4269,"src":"5584:9:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":4295,"name":"paymasterAndData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4258,"src":"5596:16:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"5596:35:19","startExpression":{"id":4296,"name":"SIGNATURE_OFFSET","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3967,"src":"5613:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"src":"5584:47:19","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4299,"nodeType":"ExpressionStatement","src":"5584:47:19"}]},"functionSelector":"94d4ad60","id":4301,"implemented":true,"kind":"function","modifiers":[],"name":"parsePaymasterAndData","nameLocation":"5084:21:19","nodeType":"FunctionDefinition","parameters":{"id":4259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4258,"mutability":"mutable","name":"paymasterAndData","nameLocation":"5130:16:19","nodeType":"VariableDeclaration","scope":4301,"src":"5115:31:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4257,"name":"bytes","nodeType":"ElementaryTypeName","src":"5115:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5105:47:19"},"returnParameters":{"id":4270,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4261,"mutability":"mutable","name":"validUntil","nameLocation":"5218:10:19","nodeType":"VariableDeclaration","scope":4301,"src":"5211:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4260,"name":"uint48","nodeType":"ElementaryTypeName","src":"5211:6:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":4263,"mutability":"mutable","name":"validAfter","nameLocation":"5249:10:19","nodeType":"VariableDeclaration","scope":4301,"src":"5242:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"},"typeName":{"id":4262,"name":"uint48","nodeType":"ElementaryTypeName","src":"5242:6:19","typeDescriptions":{"typeIdentifier":"t_uint48","typeString":"uint48"}},"visibility":"internal"},{"constant":false,"id":4265,"mutability":"mutable","name":"erc20Token","nameLocation":"5281:10:19","nodeType":"VariableDeclaration","scope":4301,"src":"5273:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4264,"name":"address","nodeType":"ElementaryTypeName","src":"5273:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4267,"mutability":"mutable","name":"exchangeRate","nameLocation":"5313:12:19","nodeType":"VariableDeclaration","scope":4301,"src":"5305:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4266,"name":"uint256","nodeType":"ElementaryTypeName","src":"5305:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4269,"mutability":"mutable","name":"signature","nameLocation":"5354:9:19","nodeType":"VariableDeclaration","scope":4301,"src":"5339:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4268,"name":"bytes","nodeType":"ElementaryTypeName","src":"5339:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5197:176:19"},"scope":4302,"src":"5075:563:19","stateMutability":"pure","virtual":false,"visibility":"public"}],"scope":4303,"src":"1247:4393:19","usedErrors":[]}],"src":"36:5605:19"},"id":19},"contracts/test/TestToken.sol":{"ast":{"absolutePath":"contracts/test/TestToken.sol","exportedSymbols":{"ERC20":[699],"TestToken":[4358]},"id":4359,"license":"GPL-3.0","nodeType":"SourceUnit","nodes":[{"id":4304,"literals":["solidity","^","0.8",".19"],"nodeType":"PragmaDirective","src":"36:24:20"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/ERC20.sol","file":"@openzeppelin/contracts/token/ERC20/ERC20.sol","id":4306,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4359,"sourceUnit":700,"src":"62:70:20","symbolAliases":[{"foreign":{"id":4305,"name":"ERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"71:5:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4307,"name":"ERC20","nameLocations":["156:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"156:5:20"},"id":4308,"nodeType":"InheritanceSpecifier","src":"156:5:20"}],"canonicalName":"TestToken","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4358,"linearizedBaseContracts":[4358,699,802,777,1471],"name":"TestToken","nameLocation":"143:9:20","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":4310,"mutability":"immutable","name":"decimal","nameLocation":"192:7:20","nodeType":"VariableDeclaration","scope":4358,"src":"168:31:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4309,"name":"uint8","nodeType":"ElementaryTypeName","src":"168:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"private"},{"body":{"id":4327,"nodeType":"Block","src":"301:36:20","statements":[{"expression":{"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4323,"name":"decimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"311:7:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4324,"name":"_decimals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4312,"src":"321:9:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"311:19:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"id":4326,"nodeType":"ExpressionStatement","src":"311:19:20"}]},"id":4328,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4319,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"285:5:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4320,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"292:7:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"id":4321,"kind":"baseConstructorSpecifier","modifierName":{"id":4318,"name":"ERC20","nameLocations":["279:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":699,"src":"279:5:20"},"nodeType":"ModifierInvocation","src":"279:21:20"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4317,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4312,"mutability":"mutable","name":"_decimals","nameLocation":"224:9:20","nodeType":"VariableDeclaration","scope":4328,"src":"218:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4311,"name":"uint8","nodeType":"ElementaryTypeName","src":"218:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4314,"mutability":"mutable","name":"_name","nameLocation":"249:5:20","nodeType":"VariableDeclaration","scope":4328,"src":"235:19:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4313,"name":"string","nodeType":"ElementaryTypeName","src":"235:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4316,"mutability":"mutable","name":"_symbol","nameLocation":"270:7:20","nodeType":"VariableDeclaration","scope":4328,"src":"256:21:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4315,"name":"string","nodeType":"ElementaryTypeName","src":"256:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"217:61:20"},"returnParameters":{"id":4322,"nodeType":"ParameterList","parameters":[],"src":"301:0:20"},"scope":4358,"src":"206:131:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[187],"body":{"id":4336,"nodeType":"Block","src":"400:31:20","statements":[{"expression":{"id":4334,"name":"decimal","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4310,"src":"417:7:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"functionReturnParameters":4333,"id":4335,"nodeType":"Return","src":"410:14:20"}]},"functionSelector":"313ce567","id":4337,"implemented":true,"kind":"function","modifiers":[],"name":"decimals","nameLocation":"352:8:20","nodeType":"FunctionDefinition","overrides":{"id":4330,"nodeType":"OverrideSpecifier","overrides":[],"src":"375:8:20"},"parameters":{"id":4329,"nodeType":"ParameterList","parameters":[],"src":"360:2:20"},"returnParameters":{"id":4333,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4332,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4337,"src":"393:5:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4331,"name":"uint8","nodeType":"ElementaryTypeName","src":"393:5:20","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"src":"392:7:20"},"scope":4358,"src":"343:88:20","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":4356,"nodeType":"Block","src":"486:93:20","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4345,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"504:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"31","id":4346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"513:7:20","subdenomination":"ether","typeDescriptions":{"typeIdentifier":"t_rational_1000000000000000000_by_1","typeString":"int_const 1000000000000000000"},"value":"1"},"src":"504:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"6d696e7420616d6f756e7420746f6f2068696768","id":4348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"522:22:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_492e33be65190c9b19afa3bf75dd0134013152c2257b6d6637de9b6678a7501d","typeString":"literal_string \"mint amount too high\""},"value":"mint amount too high"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_492e33be65190c9b19afa3bf75dd0134013152c2257b6d6637de9b6678a7501d","typeString":"literal_string \"mint amount too high\""}],"id":4344,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"496:7:20","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4349,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"496:49:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4350,"nodeType":"ExpressionStatement","src":"496:49:20"},{"expression":{"arguments":[{"id":4352,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4339,"src":"561:2:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4353,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4341,"src":"565:6:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4351,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":516,"src":"555:5:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4354,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"555:17:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4355,"nodeType":"ExpressionStatement","src":"555:17:20"}]},"functionSelector":"40c10f19","id":4357,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"446:4:20","nodeType":"FunctionDefinition","parameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4339,"mutability":"mutable","name":"to","nameLocation":"459:2:20","nodeType":"VariableDeclaration","scope":4357,"src":"451:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4338,"name":"address","nodeType":"ElementaryTypeName","src":"451:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4341,"mutability":"mutable","name":"amount","nameLocation":"471:6:20","nodeType":"VariableDeclaration","scope":4357,"src":"463:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4340,"name":"uint256","nodeType":"ElementaryTypeName","src":"463:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"450:28:20"},"returnParameters":{"id":4343,"nodeType":"ParameterList","parameters":[],"src":"486:0:20"},"scope":4358,"src":"437:142:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4359,"src":"134:447:20","usedErrors":[]}],"src":"36:546:20"},"id":20}},"contracts":{"@openzeppelin/contracts/access/Ownable.sol":{"Ownable":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"constructor":{"details":"Initializes the contract setting the deployer as the initial owner."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"@openzeppelin/contracts/access/Ownable.sol:Ownable","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/ERC20.sol":{"ERC20":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"constructor":{"details":"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_157":{"entryPoint":null,"id":157,"parameterSlots":2,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":112,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":287,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":453,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":536,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":393,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":90,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4144:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:21"},"nodeType":"YulFunctionCall","src":"66:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:21"},"nodeType":"YulFunctionCall","src":"56:31:21"},"nodeType":"YulExpressionStatement","src":"56:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:21"},"nodeType":"YulFunctionCall","src":"96:15:21"},"nodeType":"YulExpressionStatement","src":"96:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:21"},"nodeType":"YulFunctionCall","src":"120:15:21"},"nodeType":"YulExpressionStatement","src":"120:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:21"},{"body":{"nodeType":"YulBlock","src":"210:776:21","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:21"},"nodeType":"YulFunctionCall","src":"261:12:21"},"nodeType":"YulExpressionStatement","src":"261:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:21"},"nodeType":"YulFunctionCall","src":"234:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:21"},"nodeType":"YulFunctionCall","src":"230:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:21"},"nodeType":"YulFunctionCall","src":"223:35:21"},"nodeType":"YulIf","src":"220:55:21"},{"nodeType":"YulVariableDeclaration","src":"284:23:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:21"},"nodeType":"YulFunctionCall","src":"294:13:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:21"},"nodeType":"YulFunctionCall","src":"330:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:21"},"nodeType":"YulFunctionCall","src":"326:18:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:21"},"nodeType":"YulFunctionCall","src":"369:18:21"},"nodeType":"YulExpressionStatement","src":"369:18:21"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:21"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:21"},"nodeType":"YulFunctionCall","src":"356:10:21"},"nodeType":"YulIf","src":"353:36:21"},{"nodeType":"YulVariableDeclaration","src":"398:17:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:21"},"nodeType":"YulFunctionCall","src":"408:7:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:21"},"nodeType":"YulFunctionCall","src":"438:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:21"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:21"},"nodeType":"YulFunctionCall","src":"498:13:21"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:21"},"nodeType":"YulFunctionCall","src":"494:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:21","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:21"},"nodeType":"YulFunctionCall","src":"490:31:21"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:21"},"nodeType":"YulFunctionCall","src":"486:40:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:21"},"nodeType":"YulFunctionCall","src":"474:53:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:21"},"nodeType":"YulFunctionCall","src":"588:18:21"},"nodeType":"YulExpressionStatement","src":"588:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:21"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:21"},"nodeType":"YulFunctionCall","src":"542:18:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:21"},"nodeType":"YulFunctionCall","src":"562:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:21"},"nodeType":"YulFunctionCall","src":"539:46:21"},"nodeType":"YulIf","src":"536:72:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:21"},"nodeType":"YulFunctionCall","src":"617:22:21"},"nodeType":"YulExpressionStatement","src":"617:22:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:21"},"nodeType":"YulFunctionCall","src":"648:18:21"},"nodeType":"YulExpressionStatement","src":"648:18:21"},{"nodeType":"YulVariableDeclaration","src":"675:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:21","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:21"},"nodeType":"YulFunctionCall","src":"737:12:21"},"nodeType":"YulExpressionStatement","src":"737:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:21"},"nodeType":"YulFunctionCall","src":"708:15:21"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:21"},"nodeType":"YulFunctionCall","src":"704:24:21"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:21"},"nodeType":"YulFunctionCall","src":"701:33:21"},"nodeType":"YulIf","src":"698:53:21"},{"nodeType":"YulVariableDeclaration","src":"760:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:21"},"nodeType":"YulFunctionCall","src":"850:14:21"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:21"},"nodeType":"YulFunctionCall","src":"846:23:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:21"},"nodeType":"YulFunctionCall","src":"881:14:21"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:21"},"nodeType":"YulFunctionCall","src":"877:23:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:21"},"nodeType":"YulFunctionCall","src":"871:30:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:21"},"nodeType":"YulFunctionCall","src":"839:63:21"},"nodeType":"YulExpressionStatement","src":"839:63:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:21"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:21"},"nodeType":"YulFunctionCall","src":"787:9:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:21","statements":[{"nodeType":"YulAssignment","src":"799:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:21"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:21"},"nodeType":"YulFunctionCall","src":"804:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:21","statements":[]},"src":"779:133:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:21"},"nodeType":"YulFunctionCall","src":"932:15:21"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:21"},"nodeType":"YulFunctionCall","src":"928:24:21"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:21"},"nodeType":"YulFunctionCall","src":"921:35:21"},"nodeType":"YulExpressionStatement","src":"921:35:21"},{"nodeType":"YulAssignment","src":"965:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:21"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:21","type":""}],"src":"146:840:21"},{"body":{"nodeType":"YulBlock","src":"1109:444:21","statements":[{"body":{"nodeType":"YulBlock","src":"1155:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1164:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1167:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1157:6:21"},"nodeType":"YulFunctionCall","src":"1157:12:21"},"nodeType":"YulExpressionStatement","src":"1157:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1130:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1139:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1126:3:21"},"nodeType":"YulFunctionCall","src":"1126:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1151:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1122:3:21"},"nodeType":"YulFunctionCall","src":"1122:32:21"},"nodeType":"YulIf","src":"1119:52:21"},{"nodeType":"YulVariableDeclaration","src":"1180:30:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1200:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1194:5:21"},"nodeType":"YulFunctionCall","src":"1194:16:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1184:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1219:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1237:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1241:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1233:3:21"},"nodeType":"YulFunctionCall","src":"1233:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"1245:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1229:3:21"},"nodeType":"YulFunctionCall","src":"1229:18:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1223:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1274:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1283:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1286:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1276:6:21"},"nodeType":"YulFunctionCall","src":"1276:12:21"},"nodeType":"YulExpressionStatement","src":"1276:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1262:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1270:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1259:2:21"},"nodeType":"YulFunctionCall","src":"1259:14:21"},"nodeType":"YulIf","src":"1256:34:21"},{"nodeType":"YulAssignment","src":"1299:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1353:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:21"},"nodeType":"YulFunctionCall","src":"1338:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1362:7:21"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1309:28:21"},"nodeType":"YulFunctionCall","src":"1309:61:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1299:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1379:41:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1416:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1401:3:21"},"nodeType":"YulFunctionCall","src":"1401:18:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1395:5:21"},"nodeType":"YulFunctionCall","src":"1395:25:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1383:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1449:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1458:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1461:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1451:6:21"},"nodeType":"YulFunctionCall","src":"1451:12:21"},"nodeType":"YulExpressionStatement","src":"1451:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1435:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1445:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1432:2:21"},"nodeType":"YulFunctionCall","src":"1432:16:21"},"nodeType":"YulIf","src":"1429:36:21"},{"nodeType":"YulAssignment","src":"1474:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1517:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1528:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1513:3:21"},"nodeType":"YulFunctionCall","src":"1513:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1539:7:21"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1484:28:21"},"nodeType":"YulFunctionCall","src":"1484:63:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1474:6:21"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1067:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1078:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1090:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1098:6:21","type":""}],"src":"991:562:21"},{"body":{"nodeType":"YulBlock","src":"1613:325:21","statements":[{"nodeType":"YulAssignment","src":"1623:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1637:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1640:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1633:3:21"},"nodeType":"YulFunctionCall","src":"1633:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1623:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1654:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1684:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"1690:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1680:3:21"},"nodeType":"YulFunctionCall","src":"1680:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1658:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1731:31:21","statements":[{"nodeType":"YulAssignment","src":"1733:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1747:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1755:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1743:3:21"},"nodeType":"YulFunctionCall","src":"1743:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1733:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1711:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1704:6:21"},"nodeType":"YulFunctionCall","src":"1704:26:21"},"nodeType":"YulIf","src":"1701:61:21"},{"body":{"nodeType":"YulBlock","src":"1821:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1842:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1849:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"1854:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1845:3:21"},"nodeType":"YulFunctionCall","src":"1845:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1835:6:21"},"nodeType":"YulFunctionCall","src":"1835:31:21"},"nodeType":"YulExpressionStatement","src":"1835:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1886:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1889:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1879:6:21"},"nodeType":"YulFunctionCall","src":"1879:15:21"},"nodeType":"YulExpressionStatement","src":"1879:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1914:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1917:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1907:6:21"},"nodeType":"YulFunctionCall","src":"1907:15:21"},"nodeType":"YulExpressionStatement","src":"1907:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1777:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1800:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1808:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1797:2:21"},"nodeType":"YulFunctionCall","src":"1797:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1774:2:21"},"nodeType":"YulFunctionCall","src":"1774:38:21"},"nodeType":"YulIf","src":"1771:161:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1593:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1602:6:21","type":""}],"src":"1558:380:21"},{"body":{"nodeType":"YulBlock","src":"1999:65:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2016:1:21","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2019:3:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2009:6:21"},"nodeType":"YulFunctionCall","src":"2009:14:21"},"nodeType":"YulExpressionStatement","src":"2009:14:21"},{"nodeType":"YulAssignment","src":"2032:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2050:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2053:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2040:9:21"},"nodeType":"YulFunctionCall","src":"2040:18:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2032:4:21"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"1982:3:21","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"1990:4:21","type":""}],"src":"1943:121:21"},{"body":{"nodeType":"YulBlock","src":"2150:464:21","statements":[{"body":{"nodeType":"YulBlock","src":"2183:425:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2197:11:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2207:1:21","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2201:2:21","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2228:2:21"},{"name":"array","nodeType":"YulIdentifier","src":"2232:5:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2221:6:21"},"nodeType":"YulFunctionCall","src":"2221:17:21"},"nodeType":"YulExpressionStatement","src":"2221:17:21"},{"nodeType":"YulVariableDeclaration","src":"2251:31:21","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2273:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2277:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2263:9:21"},"nodeType":"YulFunctionCall","src":"2263:19:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2255:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2295:57:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2318:4:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2328:1:21","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2335:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2347:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2331:3:21"},"nodeType":"YulFunctionCall","src":"2331:19:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2324:3:21"},"nodeType":"YulFunctionCall","src":"2324:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2314:3:21"},"nodeType":"YulFunctionCall","src":"2314:38:21"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2299:11:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2389:23:21","statements":[{"nodeType":"YulAssignment","src":"2391:19:21","value":{"name":"data","nodeType":"YulIdentifier","src":"2406:4:21"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2391:11:21"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2371:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2383:4:21","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2368:2:21"},"nodeType":"YulFunctionCall","src":"2368:20:21"},"nodeType":"YulIf","src":"2365:47:21"},{"nodeType":"YulVariableDeclaration","src":"2425:41:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2439:4:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2449:1:21","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2456:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"2461:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2452:3:21"},"nodeType":"YulFunctionCall","src":"2452:12:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2445:3:21"},"nodeType":"YulFunctionCall","src":"2445:20:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2435:3:21"},"nodeType":"YulFunctionCall","src":"2435:31:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2429:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2479:24:21","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2492:11:21"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2483:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2577:21:21","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2586:5:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2593:2:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2579:6:21"},"nodeType":"YulFunctionCall","src":"2579:17:21"},"nodeType":"YulExpressionStatement","src":"2579:17:21"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2527:5:21"},{"name":"_2","nodeType":"YulIdentifier","src":"2534:2:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2524:2:21"},"nodeType":"YulFunctionCall","src":"2524:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2538:26:21","statements":[{"nodeType":"YulAssignment","src":"2540:22:21","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2553:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"2560:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2549:3:21"},"nodeType":"YulFunctionCall","src":"2549:13:21"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2540:5:21"}]}]},"pre":{"nodeType":"YulBlock","src":"2520:3:21","statements":[]},"src":"2516:82:21"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2166:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"2171:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2163:2:21"},"nodeType":"YulFunctionCall","src":"2163:11:21"},"nodeType":"YulIf","src":"2160:448:21"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2122:5:21","type":""},{"name":"len","nodeType":"YulTypedName","src":"2129:3:21","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2134:10:21","type":""}],"src":"2069:545:21"},{"body":{"nodeType":"YulBlock","src":"2704:81:21","statements":[{"nodeType":"YulAssignment","src":"2714:65:21","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2729:4:21"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2747:1:21","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2750:3:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2743:3:21"},"nodeType":"YulFunctionCall","src":"2743:11:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2760:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2756:3:21"},"nodeType":"YulFunctionCall","src":"2756:6:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2739:3:21"},"nodeType":"YulFunctionCall","src":"2739:24:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2735:3:21"},"nodeType":"YulFunctionCall","src":"2735:29:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2725:3:21"},"nodeType":"YulFunctionCall","src":"2725:40:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2771:1:21","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2774:3:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2767:3:21"},"nodeType":"YulFunctionCall","src":"2767:11:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2722:2:21"},"nodeType":"YulFunctionCall","src":"2722:57:21"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2714:4:21"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2681:4:21","type":""},{"name":"len","nodeType":"YulTypedName","src":"2687:3:21","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2695:4:21","type":""}],"src":"2619:166:21"},{"body":{"nodeType":"YulBlock","src":"2886:1256:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2896:24:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2916:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2910:5:21"},"nodeType":"YulFunctionCall","src":"2910:10:21"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"2900:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2963:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"2965:16:21"},"nodeType":"YulFunctionCall","src":"2965:18:21"},"nodeType":"YulExpressionStatement","src":"2965:18:21"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"2935:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2951:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"2955:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2947:3:21"},"nodeType":"YulFunctionCall","src":"2947:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2959:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2943:3:21"},"nodeType":"YulFunctionCall","src":"2943:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2932:2:21"},"nodeType":"YulFunctionCall","src":"2932:30:21"},"nodeType":"YulIf","src":"2929:56:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3038:4:21"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3076:4:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3070:5:21"},"nodeType":"YulFunctionCall","src":"3070:11:21"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3044:25:21"},"nodeType":"YulFunctionCall","src":"3044:38:21"},{"name":"newLen","nodeType":"YulIdentifier","src":"3084:6:21"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"2994:43:21"},"nodeType":"YulFunctionCall","src":"2994:97:21"},"nodeType":"YulExpressionStatement","src":"2994:97:21"},{"nodeType":"YulVariableDeclaration","src":"3100:18:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3117:1:21","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3104:9:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3127:23:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3146:4:21","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3131:11:21","type":""}]},{"nodeType":"YulAssignment","src":"3159:24:21","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3172:11:21"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3159:9:21"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3229:656:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3243:35:21","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3262:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3274:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3270:3:21"},"nodeType":"YulFunctionCall","src":"3270:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3258:3:21"},"nodeType":"YulFunctionCall","src":"3258:20:21"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3247:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3291:49:21","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3335:4:21"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3305:29:21"},"nodeType":"YulFunctionCall","src":"3305:35:21"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3295:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3353:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3362:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3357:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3440:172:21","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3465:6:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3483:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3488:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3479:3:21"},"nodeType":"YulFunctionCall","src":"3479:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3473:5:21"},"nodeType":"YulFunctionCall","src":"3473:26:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3458:6:21"},"nodeType":"YulFunctionCall","src":"3458:42:21"},"nodeType":"YulExpressionStatement","src":"3458:42:21"},{"nodeType":"YulAssignment","src":"3517:24:21","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3531:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3539:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3527:3:21"},"nodeType":"YulFunctionCall","src":"3527:14:21"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3517:6:21"}]},{"nodeType":"YulAssignment","src":"3558:40:21","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3575:9:21"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3586:11:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3571:3:21"},"nodeType":"YulFunctionCall","src":"3571:27:21"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3558:9:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3387:1:21"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3390:7:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3384:2:21"},"nodeType":"YulFunctionCall","src":"3384:14:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3399:28:21","statements":[{"nodeType":"YulAssignment","src":"3401:24:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3410:1:21"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3413:11:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3406:3:21"},"nodeType":"YulFunctionCall","src":"3406:19:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3401:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"3380:3:21","statements":[]},"src":"3376:236:21"},{"body":{"nodeType":"YulBlock","src":"3660:166:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3678:43:21","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3705:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3710:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3701:3:21"},"nodeType":"YulFunctionCall","src":"3701:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3695:5:21"},"nodeType":"YulFunctionCall","src":"3695:26:21"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3682:9:21","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3745:6:21"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3757:9:21"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3784:1:21","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3787:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3780:3:21"},"nodeType":"YulFunctionCall","src":"3780:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"3796:3:21","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3776:3:21"},"nodeType":"YulFunctionCall","src":"3776:24:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3806:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3802:3:21"},"nodeType":"YulFunctionCall","src":"3802:6:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3772:3:21"},"nodeType":"YulFunctionCall","src":"3772:37:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3768:3:21"},"nodeType":"YulFunctionCall","src":"3768:42:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3753:3:21"},"nodeType":"YulFunctionCall","src":"3753:58:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3738:6:21"},"nodeType":"YulFunctionCall","src":"3738:74:21"},"nodeType":"YulExpressionStatement","src":"3738:74:21"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3631:7:21"},{"name":"newLen","nodeType":"YulIdentifier","src":"3640:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3628:2:21"},"nodeType":"YulFunctionCall","src":"3628:19:21"},"nodeType":"YulIf","src":"3625:201:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3846:4:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3860:1:21","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"3863:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3856:3:21"},"nodeType":"YulFunctionCall","src":"3856:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"3872:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3852:3:21"},"nodeType":"YulFunctionCall","src":"3852:22:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3839:6:21"},"nodeType":"YulFunctionCall","src":"3839:36:21"},"nodeType":"YulExpressionStatement","src":"3839:36:21"}]},"nodeType":"YulCase","src":"3222:663:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3227:1:21","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"3902:234:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3916:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3929:1:21","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3920:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3965:67:21","statements":[{"nodeType":"YulAssignment","src":"3983:35:21","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4002:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4007:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3998:3:21"},"nodeType":"YulFunctionCall","src":"3998:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3992:5:21"},"nodeType":"YulFunctionCall","src":"3992:26:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3983:5:21"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"3946:6:21"},"nodeType":"YulIf","src":"3943:89:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4052:4:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4111:5:21"},{"name":"newLen","nodeType":"YulIdentifier","src":"4118:6:21"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4058:52:21"},"nodeType":"YulFunctionCall","src":"4058:67:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4045:6:21"},"nodeType":"YulFunctionCall","src":"4045:81:21"},"nodeType":"YulExpressionStatement","src":"4045:81:21"}]},"nodeType":"YulCase","src":"3894:242:21","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3202:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3210:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3199:2:21"},"nodeType":"YulFunctionCall","src":"3199:14:21"},"nodeType":"YulSwitch","src":"3192:944:21"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2871:4:21","type":""},{"name":"src","nodeType":"YulTypedName","src":"2877:3:21","type":""}],"src":"2790:1352:21"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b5060405162000bcb38038062000bcb83398101604081905262000034916200011f565b600362000042838262000218565b50600462000051828262000218565b505050620002e4565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008257600080fd5b81516001600160401b03808211156200009f576200009f6200005a565b604051601f8301601f19908116603f01168101908282118183101715620000ca57620000ca6200005a565b81604052838152602092508683858801011115620000e757600080fd5b600091505b838210156200010b5785820183015181830184015290820190620000ec565b600093810190920192909252949350505050565b600080604083850312156200013357600080fd5b82516001600160401b03808211156200014b57600080fd5b620001598683870162000070565b935060208501519150808211156200017057600080fd5b506200017f8582860162000070565b9150509250929050565b600181811c908216806200019e57607f821691505b602082108103620001bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200021357600081815260208120601f850160051c81016020861015620001ee5750805b601f850160051c820191505b818110156200020f57828155600101620001fa565b5050505b505050565b81516001600160401b038111156200023457620002346200005a565b6200024c8162000245845462000189565b84620001c5565b602080601f8311600181146200028457600084156200026b5750858301515b600019600386901b1c1916600185901b1785556200020f565b600085815260208120601f198616915b82811015620002b55788860151825594840194600190910190840162000294565b5085821015620002d45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6108d780620002f46000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e3919061074a565b60405180910390f35b6100ff6100fa3660046107b4565b610278565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107de565b610292565b604051601281526020016100e3565b6100ff6101513660046107b4565b6102b6565b61011361016436600461081a565b6001600160a01b031660009081526020819052604090205490565b6100d66102f5565b6100ff6101953660046107b4565b610304565b6100ff6101a83660046107b4565b6103b3565b6101136101bb36600461083c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f59061086f565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061086f565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a08582856104e5565b6102ab858585610577565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f09087906108a9565b6103c1565b6060600480546101f59061086f565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b600033610286818585610577565b6001600160a01b0383166104235760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161039d565b6001600160a01b0382166104845760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161039d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461057157818110156105645760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b61057184848484036103c1565b50505050565b6001600160a01b0383166105f35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106555760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161039d565b6001600160a01b038316600090815260208190526040902054818110156106e45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610571565b600060208083528351808285015260005b818110156107775785810183015185820160400152820161075b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107af57600080fd5b919050565b600080604083850312156107c757600080fd5b6107d083610798565b946020939093013593505050565b6000806000606084860312156107f357600080fd5b6107fc84610798565b925061080a60208501610798565b9150604084013590509250925092565b60006020828403121561082c57600080fd5b61083582610798565b9392505050565b6000806040838503121561084f57600080fd5b61085883610798565b915061086660208401610798565b90509250929050565b600181811c9082168061088357607f821691505b6020821081036108a357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028c57634e487b7160e01b600052601160045260246000fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xBCB CODESIZE SUB DUP1 PUSH3 0xBCB DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x11F JUMP JUMPDEST PUSH1 0x3 PUSH3 0x42 DUP4 DUP3 PUSH3 0x218 JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x51 DUP3 DUP3 PUSH3 0x218 JUMP JUMPDEST POP POP POP PUSH3 0x2E4 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x82 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x9F JUMPI PUSH3 0x9F PUSH3 0x5A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xCA JUMPI PUSH3 0xCA PUSH3 0x5A JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x10B JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x133 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x159 DUP7 DUP4 DUP8 ADD PUSH3 0x70 JUMP JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x17F DUP6 DUP3 DUP7 ADD PUSH3 0x70 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x19E JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1BF JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x213 JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x1EE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x20F JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x1FA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x234 JUMPI PUSH3 0x234 PUSH3 0x5A JUMP JUMPDEST PUSH3 0x24C DUP2 PUSH3 0x245 DUP5 SLOAD PUSH3 0x189 JUMP JUMPDEST DUP5 PUSH3 0x1C5 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x284 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x26B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x20F JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2B5 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x294 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2D4 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x8D7 DUP1 PUSH3 0x2F4 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x304 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x221 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x243 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x26E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x251 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP6 DUP3 DUP6 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x2AB DUP6 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x286 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2F0 SWAP1 DUP8 SWAP1 PUSH2 0x8A9 JUMP JUMPDEST PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x571 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x564 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x39D JUMP JUMPDEST PUSH2 0x571 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x571 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x777 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x75B JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D0 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FC DUP5 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP PUSH2 0x80A PUSH1 0x20 DUP6 ADD PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x835 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x84F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x858 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0x866 PUSH1 0x20 DUP5 ADD PUSH2 0x798 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x883 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8A3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x28C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1401:11610:1:-:0;;;1976:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2042:5;:13;2050:5;2042;:13;:::i;:::-;-1:-1:-1;2065:7:1;:17;2075:7;2065;:17;:::i;:::-;;1976:113;;1401:11610;;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:21;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:21;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:21:o;991:562::-;1090:6;1098;1151:2;1139:9;1130:7;1126:23;1122:32;1119:52;;;1167:1;1164;1157:12;1119:52;1194:16;;-1:-1:-1;;;;;1259:14:21;;;1256:34;;;1286:1;1283;1276:12;1256:34;1309:61;1362:7;1353:6;1342:9;1338:22;1309:61;:::i;:::-;1299:71;;1416:2;1405:9;1401:18;1395:25;1379:41;;1445:2;1435:8;1432:16;1429:36;;;1461:1;1458;1451:12;1429:36;;1484:63;1539:7;1528:8;1517:9;1513:24;1484:63;:::i;:::-;1474:73;;;991:562;;;;;:::o;1558:380::-;1637:1;1633:12;;;;1680;;;1701:61;;1755:4;1747:6;1743:17;1733:27;;1701:61;1808:2;1800:6;1797:14;1777:18;1774:38;1771:161;;1854:10;1849:3;1845:20;1842:1;1835:31;1889:4;1886:1;1879:15;1917:4;1914:1;1907:15;1771:161;;1558:380;;;:::o;2069:545::-;2171:2;2166:3;2163:11;2160:448;;;2207:1;2232:5;2228:2;2221:17;2277:4;2273:2;2263:19;2347:2;2335:10;2331:19;2328:1;2324:27;2318:4;2314:38;2383:4;2371:10;2368:20;2365:47;;;-1:-1:-1;2406:4:21;2365:47;2461:2;2456:3;2452:12;2449:1;2445:20;2439:4;2435:31;2425:41;;2516:82;2534:2;2527:5;2524:13;2516:82;;;2579:17;;;2560:1;2549:13;2516:82;;;2520:3;;;2160:448;2069:545;;;:::o;2790:1352::-;2910:10;;-1:-1:-1;;;;;2932:30:21;;2929:56;;;2965:18;;:::i;:::-;2994:97;3084:6;3044:38;3076:4;3070:11;3044:38;:::i;:::-;3038:4;2994:97;:::i;:::-;3146:4;;3210:2;3199:14;;3227:1;3222:663;;;;3929:1;3946:6;3943:89;;;-1:-1:-1;3998:19:21;;;3992:26;3943:89;-1:-1:-1;;2747:1:21;2743:11;;;2739:24;2735:29;2725:40;2771:1;2767:11;;;2722:57;4045:81;;3192:944;;3222:663;2016:1;2009:14;;;2053:4;2040:18;;-1:-1:-1;;3258:20:21;;;3376:236;3390:7;3387:1;3384:14;3376:236;;;3479:19;;;3473:26;3458:42;;3571:27;;;;3539:1;3527:14;;;;3406:19;;3376:236;;;3380:3;3640:6;3631:7;3628:19;3625:201;;;3701:19;;;3695:26;-1:-1:-1;;3784:1:21;3780:14;;;3796:3;3776:24;3772:37;3768:42;3753:58;3738:74;;3625:201;-1:-1:-1;;;;;3872:1:21;3856:14;;;3852:22;3839:36;;-1:-1:-1;2790:1352:21:o;:::-;1401:11610:1;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_698":{"entryPoint":null,"id":698,"parameterSlots":3,"returnSlots":0},"@_approve_633":{"entryPoint":961,"id":633,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":null,"id":687,"parameterSlots":3,"returnSlots":0},"@_msgSender_1461":{"entryPoint":null,"id":1461,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_676":{"entryPoint":1253,"id":676,"parameterSlots":3,"returnSlots":0},"@_transfer_459":{"entryPoint":1399,"id":459,"parameterSlots":3,"returnSlots":0},"@allowance_254":{"entryPoint":null,"id":254,"parameterSlots":2,"returnSlots":1},"@approve_279":{"entryPoint":632,"id":279,"parameterSlots":2,"returnSlots":1},"@balanceOf_211":{"entryPoint":null,"id":211,"parameterSlots":1,"returnSlots":1},"@decimals_187":{"entryPoint":null,"id":187,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_382":{"entryPoint":772,"id":382,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_341":{"entryPoint":694,"id":341,"parameterSlots":2,"returnSlots":1},"@name_167":{"entryPoint":486,"id":167,"parameterSlots":0,"returnSlots":1},"@symbol_177":{"entryPoint":757,"id":177,"parameterSlots":0,"returnSlots":1},"@totalSupply_197":{"entryPoint":null,"id":197,"parameterSlots":0,"returnSlots":1},"@transferFrom_312":{"entryPoint":658,"id":312,"parameterSlots":3,"returnSlots":1},"@transfer_236":{"entryPoint":947,"id":236,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":1944,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2074,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2108,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2014,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":1972,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1866,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2217,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2159,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5777:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:427:21","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:21","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:21","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:21"},"nodeType":"YulFunctionCall","src":"166:21:21"},"nodeType":"YulExpressionStatement","src":"166:21:21"},{"nodeType":"YulVariableDeclaration","src":"196:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:21"},"nodeType":"YulFunctionCall","src":"210:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:21"},"nodeType":"YulFunctionCall","src":"239:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:21"},"nodeType":"YulFunctionCall","src":"232:34:21"},"nodeType":"YulExpressionStatement","src":"232:34:21"},{"nodeType":"YulVariableDeclaration","src":"275:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:21"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:21"},"nodeType":"YulFunctionCall","src":"369:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:21"},"nodeType":"YulFunctionCall","src":"365:26:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:21"},"nodeType":"YulFunctionCall","src":"403:14:21"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:21"},"nodeType":"YulFunctionCall","src":"399:23:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:21"},"nodeType":"YulFunctionCall","src":"393:30:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:21"},"nodeType":"YulFunctionCall","src":"358:66:21"},"nodeType":"YulExpressionStatement","src":"358:66:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:21"},"nodeType":"YulFunctionCall","src":"302:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:21","statements":[{"nodeType":"YulAssignment","src":"318:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:21"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:21"},"nodeType":"YulFunctionCall","src":"323:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:21","statements":[]},"src":"294:140:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"458:9:21"},{"name":"length","nodeType":"YulIdentifier","src":"469:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"454:3:21"},"nodeType":"YulFunctionCall","src":"454:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"478:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"450:3:21"},"nodeType":"YulFunctionCall","src":"450:31:21"},{"kind":"number","nodeType":"YulLiteral","src":"483:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"443:6:21"},"nodeType":"YulFunctionCall","src":"443:42:21"},"nodeType":"YulExpressionStatement","src":"443:42:21"},{"nodeType":"YulAssignment","src":"494:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"529:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"537:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:21"},"nodeType":"YulFunctionCall","src":"525:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"546:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"542:3:21"},"nodeType":"YulFunctionCall","src":"542:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"521:3:21"},"nodeType":"YulFunctionCall","src":"521:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"506:3:21"},"nodeType":"YulFunctionCall","src":"506:45:21"},{"kind":"number","nodeType":"YulLiteral","src":"553:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:21"},"nodeType":"YulFunctionCall","src":"502:54:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:21","type":""}],"src":"14:548:21"},{"body":{"nodeType":"YulBlock","src":"616:147:21","statements":[{"nodeType":"YulAssignment","src":"626:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"648:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"635:12:21"},"nodeType":"YulFunctionCall","src":"635:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"626:5:21"}]},{"body":{"nodeType":"YulBlock","src":"741:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"750:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"753:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"743:6:21"},"nodeType":"YulFunctionCall","src":"743:12:21"},"nodeType":"YulExpressionStatement","src":"743:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"677:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"688:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"695:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"684:3:21"},"nodeType":"YulFunctionCall","src":"684:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"674:2:21"},"nodeType":"YulFunctionCall","src":"674:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"667:6:21"},"nodeType":"YulFunctionCall","src":"667:73:21"},"nodeType":"YulIf","src":"664:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"606:5:21","type":""}],"src":"567:196:21"},{"body":{"nodeType":"YulBlock","src":"855:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"901:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"910:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"913:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"903:6:21"},"nodeType":"YulFunctionCall","src":"903:12:21"},"nodeType":"YulExpressionStatement","src":"903:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"876:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"885:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"872:3:21"},"nodeType":"YulFunctionCall","src":"872:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"897:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"868:3:21"},"nodeType":"YulFunctionCall","src":"868:32:21"},"nodeType":"YulIf","src":"865:52:21"},{"nodeType":"YulAssignment","src":"926:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"955:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"936:18:21"},"nodeType":"YulFunctionCall","src":"936:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"926:6:21"}]},{"nodeType":"YulAssignment","src":"974:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1001:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1012:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"997:3:21"},"nodeType":"YulFunctionCall","src":"997:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"984:12:21"},"nodeType":"YulFunctionCall","src":"984:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"974:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"824:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"836:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"844:6:21","type":""}],"src":"768:254:21"},{"body":{"nodeType":"YulBlock","src":"1122:92:21","statements":[{"nodeType":"YulAssignment","src":"1132:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1144:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1155:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1140:3:21"},"nodeType":"YulFunctionCall","src":"1140:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1132:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1199:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1192:6:21"},"nodeType":"YulFunctionCall","src":"1192:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1185:6:21"},"nodeType":"YulFunctionCall","src":"1185:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1167:6:21"},"nodeType":"YulFunctionCall","src":"1167:41:21"},"nodeType":"YulExpressionStatement","src":"1167:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1091:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1102:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1113:4:21","type":""}],"src":"1027:187:21"},{"body":{"nodeType":"YulBlock","src":"1320:76:21","statements":[{"nodeType":"YulAssignment","src":"1330:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1353:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:21"},"nodeType":"YulFunctionCall","src":"1338:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1330:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1372:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"1383:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1365:6:21"},"nodeType":"YulFunctionCall","src":"1365:25:21"},"nodeType":"YulExpressionStatement","src":"1365:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1289:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1300:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1311:4:21","type":""}],"src":"1219:177:21"},{"body":{"nodeType":"YulBlock","src":"1505:224:21","statements":[{"body":{"nodeType":"YulBlock","src":"1551:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1560:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1563:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1553:6:21"},"nodeType":"YulFunctionCall","src":"1553:12:21"},"nodeType":"YulExpressionStatement","src":"1553:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1526:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:21"},"nodeType":"YulFunctionCall","src":"1522:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1518:3:21"},"nodeType":"YulFunctionCall","src":"1518:32:21"},"nodeType":"YulIf","src":"1515:52:21"},{"nodeType":"YulAssignment","src":"1576:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1605:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1586:18:21"},"nodeType":"YulFunctionCall","src":"1586:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1576:6:21"}]},{"nodeType":"YulAssignment","src":"1624:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1657:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1668:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1653:3:21"},"nodeType":"YulFunctionCall","src":"1653:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1634:18:21"},"nodeType":"YulFunctionCall","src":"1634:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1624:6:21"}]},{"nodeType":"YulAssignment","src":"1681:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1708:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1719:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1704:3:21"},"nodeType":"YulFunctionCall","src":"1704:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1691:12:21"},"nodeType":"YulFunctionCall","src":"1691:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1681:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1455:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1466:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1478:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1486:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1494:6:21","type":""}],"src":"1401:328:21"},{"body":{"nodeType":"YulBlock","src":"1831:87:21","statements":[{"nodeType":"YulAssignment","src":"1841:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1853:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1864:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1849:3:21"},"nodeType":"YulFunctionCall","src":"1849:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1841:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1883:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1898:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1906:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1894:3:21"},"nodeType":"YulFunctionCall","src":"1894:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1876:6:21"},"nodeType":"YulFunctionCall","src":"1876:36:21"},"nodeType":"YulExpressionStatement","src":"1876:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1800:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1811:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1822:4:21","type":""}],"src":"1734:184:21"},{"body":{"nodeType":"YulBlock","src":"1993:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"2039:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2048:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2051:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2041:6:21"},"nodeType":"YulFunctionCall","src":"2041:12:21"},"nodeType":"YulExpressionStatement","src":"2041:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2014:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2010:3:21"},"nodeType":"YulFunctionCall","src":"2010:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2035:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2006:3:21"},"nodeType":"YulFunctionCall","src":"2006:32:21"},"nodeType":"YulIf","src":"2003:52:21"},{"nodeType":"YulAssignment","src":"2064:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2093:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2074:18:21"},"nodeType":"YulFunctionCall","src":"2074:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2064:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:21","type":""}],"src":"1923:186:21"},{"body":{"nodeType":"YulBlock","src":"2201:173:21","statements":[{"body":{"nodeType":"YulBlock","src":"2247:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2256:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2259:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2249:6:21"},"nodeType":"YulFunctionCall","src":"2249:12:21"},"nodeType":"YulExpressionStatement","src":"2249:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2222:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2231:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2218:3:21"},"nodeType":"YulFunctionCall","src":"2218:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2243:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2214:3:21"},"nodeType":"YulFunctionCall","src":"2214:32:21"},"nodeType":"YulIf","src":"2211:52:21"},{"nodeType":"YulAssignment","src":"2272:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2282:18:21"},"nodeType":"YulFunctionCall","src":"2282:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2272:6:21"}]},{"nodeType":"YulAssignment","src":"2320:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2353:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2364:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2349:3:21"},"nodeType":"YulFunctionCall","src":"2349:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2330:18:21"},"nodeType":"YulFunctionCall","src":"2330:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2320:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2159:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2170:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2182:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2190:6:21","type":""}],"src":"2114:260:21"},{"body":{"nodeType":"YulBlock","src":"2434:325:21","statements":[{"nodeType":"YulAssignment","src":"2444:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2458:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2461:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2454:3:21"},"nodeType":"YulFunctionCall","src":"2454:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2444:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2475:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2505:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2511:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2501:3:21"},"nodeType":"YulFunctionCall","src":"2501:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2479:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2552:31:21","statements":[{"nodeType":"YulAssignment","src":"2554:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2568:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2576:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2564:3:21"},"nodeType":"YulFunctionCall","src":"2564:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2554:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2532:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2525:6:21"},"nodeType":"YulFunctionCall","src":"2525:26:21"},"nodeType":"YulIf","src":"2522:61:21"},{"body":{"nodeType":"YulBlock","src":"2642:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2663:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2670:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2675:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2666:3:21"},"nodeType":"YulFunctionCall","src":"2666:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2656:6:21"},"nodeType":"YulFunctionCall","src":"2656:31:21"},"nodeType":"YulExpressionStatement","src":"2656:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2707:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2710:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2700:6:21"},"nodeType":"YulFunctionCall","src":"2700:15:21"},"nodeType":"YulExpressionStatement","src":"2700:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2735:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2738:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2728:6:21"},"nodeType":"YulFunctionCall","src":"2728:15:21"},"nodeType":"YulExpressionStatement","src":"2728:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2598:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2621:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2629:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2618:2:21"},"nodeType":"YulFunctionCall","src":"2618:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2595:2:21"},"nodeType":"YulFunctionCall","src":"2595:38:21"},"nodeType":"YulIf","src":"2592:161:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2414:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2423:6:21","type":""}],"src":"2379:380:21"},{"body":{"nodeType":"YulBlock","src":"2812:174:21","statements":[{"nodeType":"YulAssignment","src":"2822:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2833:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"2836:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2829:3:21"},"nodeType":"YulFunctionCall","src":"2829:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2822:3:21"}]},{"body":{"nodeType":"YulBlock","src":"2869:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2890:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2897:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2902:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2893:3:21"},"nodeType":"YulFunctionCall","src":"2893:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2883:6:21"},"nodeType":"YulFunctionCall","src":"2883:31:21"},"nodeType":"YulExpressionStatement","src":"2883:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2934:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2937:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2927:6:21"},"nodeType":"YulFunctionCall","src":"2927:15:21"},"nodeType":"YulExpressionStatement","src":"2927:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2962:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2965:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2955:6:21"},"nodeType":"YulFunctionCall","src":"2955:15:21"},"nodeType":"YulExpressionStatement","src":"2955:15:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2853:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"2856:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2850:2:21"},"nodeType":"YulFunctionCall","src":"2850:10:21"},"nodeType":"YulIf","src":"2847:133:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2795:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"2798:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2804:3:21","type":""}],"src":"2764:222:21"},{"body":{"nodeType":"YulBlock","src":"3165:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3182:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3175:6:21"},"nodeType":"YulFunctionCall","src":"3175:21:21"},"nodeType":"YulExpressionStatement","src":"3175:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3216:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3227:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3212:3:21"},"nodeType":"YulFunctionCall","src":"3212:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3232:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3205:6:21"},"nodeType":"YulFunctionCall","src":"3205:30:21"},"nodeType":"YulExpressionStatement","src":"3205:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3255:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3266:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3251:3:21"},"nodeType":"YulFunctionCall","src":"3251:18:21"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3271:34:21","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3244:6:21"},"nodeType":"YulFunctionCall","src":"3244:62:21"},"nodeType":"YulExpressionStatement","src":"3244:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3326:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3337:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3322:3:21"},"nodeType":"YulFunctionCall","src":"3322:18:21"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3342:7:21","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3315:6:21"},"nodeType":"YulFunctionCall","src":"3315:35:21"},"nodeType":"YulExpressionStatement","src":"3315:35:21"},{"nodeType":"YulAssignment","src":"3359:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3371:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3382:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3367:3:21"},"nodeType":"YulFunctionCall","src":"3367:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3359:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3142:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3156:4:21","type":""}],"src":"2991:401:21"},{"body":{"nodeType":"YulBlock","src":"3571:226:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3588:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3599:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3581:6:21"},"nodeType":"YulFunctionCall","src":"3581:21:21"},"nodeType":"YulExpressionStatement","src":"3581:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3622:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3633:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3618:3:21"},"nodeType":"YulFunctionCall","src":"3618:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3638:2:21","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3611:6:21"},"nodeType":"YulFunctionCall","src":"3611:30:21"},"nodeType":"YulExpressionStatement","src":"3611:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3661:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3672:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3657:3:21"},"nodeType":"YulFunctionCall","src":"3657:18:21"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"3677:34:21","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3650:6:21"},"nodeType":"YulFunctionCall","src":"3650:62:21"},"nodeType":"YulExpressionStatement","src":"3650:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3732:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3743:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3728:3:21"},"nodeType":"YulFunctionCall","src":"3728:18:21"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"3748:6:21","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3721:6:21"},"nodeType":"YulFunctionCall","src":"3721:34:21"},"nodeType":"YulExpressionStatement","src":"3721:34:21"},{"nodeType":"YulAssignment","src":"3764:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3776:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3787:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3772:3:21"},"nodeType":"YulFunctionCall","src":"3772:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3764:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3548:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3562:4:21","type":""}],"src":"3397:400:21"},{"body":{"nodeType":"YulBlock","src":"3976:224:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3993:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4004:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3986:6:21"},"nodeType":"YulFunctionCall","src":"3986:21:21"},"nodeType":"YulExpressionStatement","src":"3986:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4027:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4038:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4023:3:21"},"nodeType":"YulFunctionCall","src":"4023:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4043:2:21","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4016:6:21"},"nodeType":"YulFunctionCall","src":"4016:30:21"},"nodeType":"YulExpressionStatement","src":"4016:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4066:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4077:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4062:3:21"},"nodeType":"YulFunctionCall","src":"4062:18:21"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4082:34:21","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4055:6:21"},"nodeType":"YulFunctionCall","src":"4055:62:21"},"nodeType":"YulExpressionStatement","src":"4055:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4137:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4148:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4133:3:21"},"nodeType":"YulFunctionCall","src":"4133:18:21"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4153:4:21","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4126:6:21"},"nodeType":"YulFunctionCall","src":"4126:32:21"},"nodeType":"YulExpressionStatement","src":"4126:32:21"},{"nodeType":"YulAssignment","src":"4167:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4179:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4190:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4175:3:21"},"nodeType":"YulFunctionCall","src":"4175:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4167:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3953:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3967:4:21","type":""}],"src":"3802:398:21"},{"body":{"nodeType":"YulBlock","src":"4379:179:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4396:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4407:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4389:6:21"},"nodeType":"YulFunctionCall","src":"4389:21:21"},"nodeType":"YulExpressionStatement","src":"4389:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4430:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4441:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4426:3:21"},"nodeType":"YulFunctionCall","src":"4426:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4446:2:21","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4419:6:21"},"nodeType":"YulFunctionCall","src":"4419:30:21"},"nodeType":"YulExpressionStatement","src":"4419:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4469:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4480:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4465:3:21"},"nodeType":"YulFunctionCall","src":"4465:18:21"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4485:31:21","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4458:6:21"},"nodeType":"YulFunctionCall","src":"4458:59:21"},"nodeType":"YulExpressionStatement","src":"4458:59:21"},{"nodeType":"YulAssignment","src":"4526:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4538:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4549:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4534:3:21"},"nodeType":"YulFunctionCall","src":"4534:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4526:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4356:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4370:4:21","type":""}],"src":"4205:353:21"},{"body":{"nodeType":"YulBlock","src":"4737:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4754:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4765:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4747:6:21"},"nodeType":"YulFunctionCall","src":"4747:21:21"},"nodeType":"YulExpressionStatement","src":"4747:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4788:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4799:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4784:3:21"},"nodeType":"YulFunctionCall","src":"4784:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4804:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4777:6:21"},"nodeType":"YulFunctionCall","src":"4777:30:21"},"nodeType":"YulExpressionStatement","src":"4777:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4827:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4838:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4823:3:21"},"nodeType":"YulFunctionCall","src":"4823:18:21"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"4843:34:21","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4816:6:21"},"nodeType":"YulFunctionCall","src":"4816:62:21"},"nodeType":"YulExpressionStatement","src":"4816:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4898:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4909:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4894:3:21"},"nodeType":"YulFunctionCall","src":"4894:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"4914:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4887:6:21"},"nodeType":"YulFunctionCall","src":"4887:35:21"},"nodeType":"YulExpressionStatement","src":"4887:35:21"},{"nodeType":"YulAssignment","src":"4931:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4943:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4954:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4939:3:21"},"nodeType":"YulFunctionCall","src":"4939:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4931:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4714:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4728:4:21","type":""}],"src":"4563:401:21"},{"body":{"nodeType":"YulBlock","src":"5143:225:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5160:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5171:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5153:6:21"},"nodeType":"YulFunctionCall","src":"5153:21:21"},"nodeType":"YulExpressionStatement","src":"5153:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5194:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5205:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5190:3:21"},"nodeType":"YulFunctionCall","src":"5190:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5210:2:21","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5183:6:21"},"nodeType":"YulFunctionCall","src":"5183:30:21"},"nodeType":"YulExpressionStatement","src":"5183:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5233:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5244:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5229:3:21"},"nodeType":"YulFunctionCall","src":"5229:18:21"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5249:34:21","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5222:6:21"},"nodeType":"YulFunctionCall","src":"5222:62:21"},"nodeType":"YulExpressionStatement","src":"5222:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5304:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5315:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5300:3:21"},"nodeType":"YulFunctionCall","src":"5300:18:21"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5320:5:21","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5293:6:21"},"nodeType":"YulFunctionCall","src":"5293:33:21"},"nodeType":"YulExpressionStatement","src":"5293:33:21"},{"nodeType":"YulAssignment","src":"5335:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5347:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5358:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5343:3:21"},"nodeType":"YulFunctionCall","src":"5343:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5335:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5120:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5134:4:21","type":""}],"src":"4969:399:21"},{"body":{"nodeType":"YulBlock","src":"5547:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5564:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5575:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5557:6:21"},"nodeType":"YulFunctionCall","src":"5557:21:21"},"nodeType":"YulExpressionStatement","src":"5557:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5598:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5609:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5594:3:21"},"nodeType":"YulFunctionCall","src":"5594:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5614:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5587:6:21"},"nodeType":"YulFunctionCall","src":"5587:30:21"},"nodeType":"YulExpressionStatement","src":"5587:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5637:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5648:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5633:3:21"},"nodeType":"YulFunctionCall","src":"5633:18:21"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"5653:34:21","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5626:6:21"},"nodeType":"YulFunctionCall","src":"5626:62:21"},"nodeType":"YulExpressionStatement","src":"5626:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5708:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5719:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5704:3:21"},"nodeType":"YulFunctionCall","src":"5704:18:21"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"5724:8:21","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5697:6:21"},"nodeType":"YulFunctionCall","src":"5697:36:21"},"nodeType":"YulExpressionStatement","src":"5697:36:21"},{"nodeType":"YulAssignment","src":"5742:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5754:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5765:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5750:3:21"},"nodeType":"YulFunctionCall","src":"5750:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5742:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5524:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5538:4:21","type":""}],"src":"5373:402:21"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d714610187578063a9059cbb1461019a578063dd62ed3e146101ad57600080fd5b8063395093511461014357806370a082311461015657806395d89b411461017f57600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101e6565b6040516100e3919061074a565b60405180910390f35b6100ff6100fa3660046107b4565b610278565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107de565b610292565b604051601281526020016100e3565b6100ff6101513660046107b4565b6102b6565b61011361016436600461081a565b6001600160a01b031660009081526020819052604090205490565b6100d66102f5565b6100ff6101953660046107b4565b610304565b6100ff6101a83660046107b4565b6103b3565b6101136101bb36600461083c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101f59061086f565b80601f01602080910402602001604051908101604052809291908181526020018280546102219061086f565b801561026e5780601f106102435761010080835404028352916020019161026e565b820191906000526020600020905b81548152906001019060200180831161025157829003601f168201915b5050505050905090565b6000336102868185856103c1565b60019150505b92915050565b6000336102a08582856104e5565b6102ab858585610577565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028690829086906102f09087906108a9565b6103c1565b6060600480546101f59061086f565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103a65760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102ab82868684036103c1565b600033610286818585610577565b6001600160a01b0383166104235760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161039d565b6001600160a01b0382166104845760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161039d565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461057157818110156105645760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161039d565b61057184848484036103c1565b50505050565b6001600160a01b0383166105f35760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b0382166106555760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161039d565b6001600160a01b038316600090815260208190526040902054818110156106e45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161039d565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610571565b600060208083528351808285015260005b818110156107775785810183015185820160400152820161075b565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107af57600080fd5b919050565b600080604083850312156107c757600080fd5b6107d083610798565b946020939093013593505050565b6000806000606084860312156107f357600080fd5b6107fc84610798565b925061080a60208501610798565b9150604084013590509250925092565b60006020828403121561082c57600080fd5b61083582610798565b9392505050565b6000806040838503121561084f57600080fd5b61085883610798565b915061086660208401610798565b90509250929050565b600181811c9082168061088357607f821691505b6020821081036108a357634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561028c57634e487b7160e01b600052601160045260246000fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xC9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x187 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x19A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x39509351 EQ PUSH2 0x143 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x17F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x18160DDD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10F JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x134 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xCE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xEC JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD6 PUSH2 0x1E6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE3 SWAP2 SWAP1 PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xFF PUSH2 0xFA CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x278 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x12F CALLDATASIZE PUSH1 0x4 PUSH2 0x7DE JUMP JUMPDEST PUSH2 0x292 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xE3 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x151 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x2B6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x164 CALLDATASIZE PUSH1 0x4 PUSH2 0x81A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xD6 PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x195 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x304 JUMP JUMPDEST PUSH2 0xFF PUSH2 0x1A8 CALLDATASIZE PUSH1 0x4 PUSH2 0x7B4 JUMP JUMPDEST PUSH2 0x3B3 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x1BB CALLDATASIZE PUSH1 0x4 PUSH2 0x83C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x221 SWAP1 PUSH2 0x86F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x26E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x243 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x26E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x251 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2A0 DUP6 DUP3 DUP6 PUSH2 0x4E5 JUMP JUMPDEST PUSH2 0x2AB DUP6 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x286 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x2F0 SWAP1 DUP8 SWAP1 PUSH2 0x8A9 JUMP JUMPDEST PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x1F5 SWAP1 PUSH2 0x86F JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x3A6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x2AB DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x286 DUP2 DUP6 DUP6 PUSH2 0x577 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x423 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x484 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x571 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x564 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x39D JUMP JUMPDEST PUSH2 0x571 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x3C1 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x5F3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x655 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x6E4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x39D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x571 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x777 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x75B JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x7AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7D0 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x7F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7FC DUP5 PUSH2 0x798 JUMP JUMPDEST SWAP3 POP PUSH2 0x80A PUSH1 0x20 DUP6 ADD PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x82C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x835 DUP3 PUSH2 0x798 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x84F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x858 DUP4 PUSH2 0x798 JUMP JUMPDEST SWAP2 POP PUSH2 0x866 PUSH1 0x20 DUP5 ADD PUSH2 0x798 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x883 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x8A3 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x28C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1401:11610:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:21;;1185:22;1167:41;;1155:2;1140:18;4431:197:1;1027:187:21;3242:106:1;3329:12;;3242:106;;;1365:25:21;;;1353:2;1338:18;3242:106:1;1219:177:21;5190:286:1;;;;;;:::i;:::-;;:::i;3091:91::-;;;3173:2;1876:36:21;;1864:2;1849:18;3091:91:1;1734:184:21;5871:234:1;;;;;;:::i;:::-;;:::i;3406:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:1;3480:7;3506:18;;;;;;;;;;;;3406:125;2365:102;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4089:18:1;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:7;4568:32:1;719:10:7;4584:7:1;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:7;5373:38:1;5389:4;719:10:7;5404:6:1;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:1;;5190:286;-1:-1:-1;;;;5190:286:1:o;5871:234::-;719:10:7;5959:4:1;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:1;;;;;;;;;;5959:4;;719:10:7;6013:64:1;;719:10:7;;4089:27:1;;6038:38;;6066:10;;6038:38;:::i;:::-;6013:8;:64::i;2365:102::-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;719:10:7;6685:4:1;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:1;;;;;;;;;;6685:4;;719:10:7;6829:15:1;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:1;;3193:2:21;6801:85:1;;;3175:21:21;3232:2;3212:18;;;3205:30;3271:34;3251:18;;;3244:62;3342:7;3322:18;;;3315:35;3367:19;;6801:85:1;;;;;;;;;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:7;3860:28:1;719:10:7;3877:2:1;3881:6;3860:9;:28::i;10504:370::-;-1:-1:-1;;;;;10635:19:1;;10627:68;;;;-1:-1:-1;;;10627:68:1;;3599:2:21;10627:68:1;;;3581:21:21;3638:2;3618:18;;;3611:30;3677:34;3657:18;;;3650:62;-1:-1:-1;;;3728:18:21;;;3721:34;3772:19;;10627:68:1;3397:400:21;10627:68:1;-1:-1:-1;;;;;10713:21:1;;10705:68;;;;-1:-1:-1;;;10705:68:1;;4004:2:21;10705:68:1;;;3986:21:21;4043:2;4023:18;;;4016:30;4082:34;4062:18;;;4055:62;-1:-1:-1;;;4133:18:21;;;4126:32;4175:19;;10705:68:1;3802:398:21;10705:68:1;-1:-1:-1;;;;;10784:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1365:25:21;;;10835:32:1;;1338:18:21;10835:32:1;;;;;;;10504:370;;;:::o;11155:441::-;-1:-1:-1;;;;;4089:18:1;;;11285:24;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11351:37:1;;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:1;;4407:2:21;11404:68:1;;;4389:21:21;4446:2;4426:18;;;4419:30;4485:31;4465:18;;;4458:59;4534:18;;11404:68:1;4205:353:21;11404:68:1;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:1;;7591:68;;;;-1:-1:-1;;;7591:68:1;;4765:2:21;7591:68:1;;;4747:21:21;4804:2;4784:18;;;4777:30;4843:34;4823:18;;;4816:62;4914:7;4894:18;;;4887:35;4939:19;;7591:68:1;4563:401:21;7591:68:1;-1:-1:-1;;;;;7677:16:1;;7669:64;;;;-1:-1:-1;;;7669:64:1;;5171:2:21;7669:64:1;;;5153:21:21;5210:2;5190:18;;;5183:30;5249:34;5229:18;;;5222:62;-1:-1:-1;;;5300:18:21;;;5293:33;5343:19;;7669:64:1;4969:399:21;7669:64:1;-1:-1:-1;;;;;7815:15:1;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:1;;5575:2:21;7840:72:1;;;5557:21:21;5614:2;5594:18;;;5587:30;5653:34;5633:18;;;5626:62;5724:8;5704:18;;;5697:36;5750:19;;7840:72:1;5373:402:21;7840:72:1;-1:-1:-1;;;;;7946:15:1;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1365:25:21;;;8161:13:1;;8210:26;;1338:18:21;8210:26:1;;;;;;;8247:37;12180:121;14:548:21;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:21;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:21:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:186::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;2074:29;2093:9;2074:29;:::i;:::-;2064:39;1923:186;-1:-1:-1;;;1923:186:21:o;2114:260::-;2182:6;2190;2243:2;2231:9;2222:7;2218:23;2214:32;2211:52;;;2259:1;2256;2249:12;2211:52;2282:29;2301:9;2282:29;:::i;:::-;2272:39;;2330:38;2364:2;2353:9;2349:18;2330:38;:::i;:::-;2320:48;;2114:260;;;;;:::o;2379:380::-;2458:1;2454:12;;;;2501;;;2522:61;;2576:4;2568:6;2564:17;2554:27;;2522:61;2629:2;2621:6;2618:14;2598:18;2595:38;2592:161;;2675:10;2670:3;2666:20;2663:1;2656:31;2710:4;2707:1;2700:15;2738:4;2735:1;2728:15;2592:161;;2379:380;;;:::o;2764:222::-;2829:9;;;2850:10;;;2847:133;;;2902:10;2897:3;2893:20;2890:1;2883:31;2937:4;2934:1;2927:15;2965:4;2962:1;2955:15"},"gasEstimates":{"creation":{"codeDepositCost":"452600","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24651","balanceOf(address)":"2585","decimals()":"244","decreaseAllowance(address,uint256)":"26922","increaseAllowance(address,uint256)":"infinite","name()":"infinite","symbol()":"infinite","totalSupply()":"2304","transfer(address,uint256)":"51094","transferFrom(address,address,uint256)":"infinite"},"internal":{"_afterTokenTransfer(address,address,uint256)":"infinite","_approve(address,address,uint256)":"infinite","_beforeTokenTransfer(address,address,uint256)":"infinite","_burn(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_spendAllowance(address,address,uint256)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. The default value of {decimals} is 18. To select a different value for {decimals} you should overload it. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"@openzeppelin/contracts/token/ERC20/ERC20.sol:ERC20","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol":{"IERC20Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"decimals()":{"details":"Returns the decimals places of the token."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"707:3748:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;707:3748:5;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"707:3748:5:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"194:8964:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:8964:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"194:8964:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"188:2065:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;188:2065:8;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"188:2065:8:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"369:8168:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8168:9;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"369:8168:9:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"202:12302:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12302:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"202:12302:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"account-abstraction/contracts/core/BasePaymaster.sol":{"BasePaymaster":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"enum IPaymaster.PostOpMode","name":"mode","type":"uint8"},{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"uint256","name":"actualGasCost","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"maxCost","type":"uint256"}],"name":"validatePaymasterUserOp","outputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addStake(uint32)":{"params":{"unstakeDelaySec":"- the unstake delay for this paymaster. Can only be increased."}},"owner()":{"details":"Returns the address of the current owner."},"postOp(uint8,bytes,uint256)":{"params":{"actualGasCost":"- actual gas used so far (without this postOp call).","context":"- the context value returned by validatePaymasterUserOp","mode":"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"params":{"maxCost":"the maximum cost of this transaction (based on maximum gas and gas price from userOp)","userOp":"the user operation","userOpHash":"hash of the user's request data."},"returns":{"context":"value to send to a postOp      zero length to signify postOp is not required.","validationData":"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"amount":"to withdraw","withdrawAddress":"target to send to"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","deposit()":"d0e30db0","entryPoint()":"b0d691fe","getDeposit()":"c399ec88","owner()":"8da5cb5b","postOp(uint8,bytes,uint256)":"a9a23409","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","unlockStake()":"bb9fe6bf","validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"f465c77e","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- the unstake delay for this paymaster. Can only be increased.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"the maximum cost of this transaction (based on maximum gas and gas price from userOp)\",\"userOp\":\"the user operation\",\"userOpHash\":\"hash of the user's request data.\"},\"returns\":{\"context\":\"value to send to a postOp      zero length to signify postOp is not required.\",\"validationData\":\"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"deposit()\":{\"notice\":\"add a deposit for this paymaster, used for paying for transaction fees\"},\"getDeposit()\":{\"notice\":\"return current paymaster's deposit on the entryPoint.\"},\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"unlockStake()\":{\"notice\":\"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw value from the deposit\"}},\"notice\":\"Helper class for creating a paymaster. provides helper methods for staking. validates that the postOp is called only by the entryPoint\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/core/BasePaymaster.sol\":\"BasePaymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"account-abstraction/contracts/core/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n\\n/* solhint-disable reason-string */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IPaymaster.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Helper class for creating a paymaster.\\n * provides helper methods for staking.\\n * validates that the postOp is called only by the entryPoint\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable {\\n\\n    IEntryPoint immutable public entryPoint;\\n\\n    constructor(IEntryPoint _entryPoint) {\\n        entryPoint = _entryPoint;\\n    }\\n\\n    /// @inheritdoc IPaymaster\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external override returns (bytes memory context, uint256 validationData) {\\n         _requireFromEntryPoint();\\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\\n    }\\n\\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    internal virtual returns (bytes memory context, uint256 validationData);\\n\\n    /// @inheritdoc IPaymaster\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external override {\\n        _requireFromEntryPoint();\\n        _postOp(mode, context, actualGasCost);\\n    }\\n\\n    /**\\n     * post-operation handler.\\n     * (verified to be called only through the entryPoint)\\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal virtual {\\n\\n        (mode,context,actualGasCost); // unused params\\n        // subclass must override this method if validatePaymasterUserOp returns a context\\n        revert(\\\"must override\\\");\\n    }\\n\\n    /**\\n     * add a deposit for this paymaster, used for paying for transaction fees\\n     */\\n    function deposit() public payable {\\n        entryPoint.depositTo{value : msg.value}(address(this));\\n    }\\n\\n    /**\\n     * withdraw value from the deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\n        entryPoint.withdrawTo(withdrawAddress, amount);\\n    }\\n    /**\\n     * add stake for this paymaster.\\n     * This method can also carry eth value to add to the current stake.\\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\\n     */\\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\\n        entryPoint.addStake{value : msg.value}(unstakeDelaySec);\\n    }\\n\\n    /**\\n     * return current paymaster's deposit on the entryPoint.\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * unlock the stake, in order to withdraw it.\\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\\n     */\\n    function unlockStake() external onlyOwner {\\n        entryPoint.unlockStake();\\n    }\\n\\n    /**\\n     * withdraw the entire paymaster's stake.\\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\\n        entryPoint.withdrawStake(withdrawAddress);\\n    }\\n\\n    /// validate the call is made from a valid entrypoint\\n    function _requireFromEntryPoint() internal virtual {\\n        require(msg.sender == address(entryPoint), \\\"Sender not EntryPoint\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\\n    }\\n\\n    /**\\n     * payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @param userOpHash hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *      zero length to signify postOp is not required.\\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n}\\n\",\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"account-abstraction/contracts/core/BasePaymaster.sol:BasePaymaster","label":"_owner","offset":0,"slot":"0","type":"t_address"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"}}},"userdoc":{"kind":"user","methods":{"addStake(uint32)":{"notice":"add stake for this paymaster. This method can also carry eth value to add to the current stake."},"deposit()":{"notice":"add a deposit for this paymaster, used for paying for transaction fees"},"getDeposit()":{"notice":"return current paymaster's deposit on the entryPoint."},"postOp(uint8,bytes,uint256)":{"notice":"post-operation handler. Must verify sender is the entryPoint"},"unlockStake()":{"notice":"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"},"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."},"withdrawStake(address)":{"notice":"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"},"withdrawTo(address,uint256)":{"notice":"withdraw value from the deposit"}},"notice":"Helper class for creating a paymaster. provides helper methods for staking. validates that the postOp is called only by the entryPoint","version":1}}},"account-abstraction/contracts/interfaces/IAggregator.sol":{"IAggregator":{"abi":[{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"}],"name":"aggregateSignatures","outputs":[{"internalType":"bytes","name":"aggregatedSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"validateSignatures","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"validateUserOpSignature","outputs":[{"internalType":"bytes","name":"sigForUserOp","type":"bytes"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"params":{"userOps":"array of UserOperations to collect the signatures from."},"returns":{"aggregatedSignature":"the aggregated signature"}},"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"params":{"userOp":"the userOperation received from the user."},"returns":{"sigForUserOp":"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \"multisig\""}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":"275e2d79","validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)":"e3563a4f","validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"64c530cd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"}],\"name\":\"aggregateSignatures\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"aggregatedSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"validateSignatures\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validateUserOpSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"sigForUserOp\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"params\":{\"userOps\":\"array of UserOperations to collect the signatures from.\"},\"returns\":{\"aggregatedSignature\":\"the aggregated signature\"}},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"params\":{\"userOp\":\"the userOperation received from the user.\"},\"returns\":{\"sigForUserOp\":\"the value to put into the signature field of the userOp when calling handleOps.    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])\":{\"notice\":\"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation\"},\"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)\":{\"notice\":\"validate aggregated signature. revert if the aggregated signature does not match the given list of operations.\"},\"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\"}},\"notice\":\"Aggregated Signatures validator.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/interfaces/IAggregator.sol\":\"IAggregator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"aggregateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[])":{"notice":"aggregate multiple signatures into a single value. This method is called off-chain to calculate the signature to pass with handleOps() bundler MAY use optimized custom code perform this aggregation"},"validateSignatures((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],bytes)":{"notice":"validate aggregated signature. revert if the aggregated signature does not match the given list of operations."},"validateUserOpSignature((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"validate signature of a single userOp This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps."}},"notice":"Aggregated Signatures validator.","version":1}}},"account-abstraction/contracts/interfaces/IEntryPoint.sol":{"IEntryPoint":{"abi":[{"inputs":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"paid","type":"uint256"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bool","name":"targetSuccess","type":"bool"},{"internalType":"bytes","name":"targetResult","type":"bytes"}],"name":"ExecutionResult","type":"error"},{"inputs":[{"internalType":"uint256","name":"opIndex","type":"uint256"},{"internalType":"string","name":"reason","type":"string"}],"name":"FailedOp","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"SenderAddressResult","type":"error"},{"inputs":[{"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureValidationFailed","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"}],"name":"ValidationResult","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"preOpGas","type":"uint256"},{"internalType":"uint256","name":"prefund","type":"uint256"},{"internalType":"bool","name":"sigFailed","type":"bool"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"bytes","name":"paymasterContext","type":"bytes"}],"internalType":"struct IEntryPoint.ReturnInfo","name":"returnInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"senderInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"factoryInfo","type":"tuple"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"paymasterInfo","type":"tuple"},{"components":[{"internalType":"address","name":"aggregator","type":"address"},{"components":[{"internalType":"uint256","name":"stake","type":"uint256"},{"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"internalType":"struct IStakeManager.StakeInfo","name":"stakeInfo","type":"tuple"}],"internalType":"struct IEntryPoint.AggregatorStakeInfo","name":"aggregatorInfo","type":"tuple"}],"name":"ValidationResultWithAggregation","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"address","name":"factory","type":"address"},{"indexed":false,"internalType":"address","name":"paymaster","type":"address"}],"name":"AccountDeployed","type":"event"},{"anonymous":false,"inputs":[],"name":"BeforeExecution","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"aggregator","type":"address"}],"name":"SignatureAggregatorChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"paymaster","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bool","name":"success","type":"bool"},{"indexed":false,"internalType":"uint256","name":"actualGasCost","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"actualGasUsed","type":"uint256"}],"name":"UserOperationEvent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"nonce","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"revertReason","type":"bytes"}],"name":"UserOperationRevertReason","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"initCode","type":"bytes"}],"name":"getSenderAddress","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"getUserOpHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"userOps","type":"tuple[]"},{"internalType":"contract IAggregator","name":"aggregator","type":"address"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct IEntryPoint.UserOpsPerAggregator[]","name":"opsPerAggregator","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleAggregatedOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation[]","name":"ops","type":"tuple[]"},{"internalType":"address payable","name":"beneficiary","type":"address"}],"name":"handleOps","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"op","type":"tuple"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"targetCallData","type":"bytes"}],"name":"simulateHandleOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"}],"name":"simulateValidation","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"FailedOp(uint256,string)":[{"params":{"opIndex":"- index into the array of ops to the failed one (in simulateValidation, this is always zero)","reason":"- revert reason      The string starts with a unique code \"AAmn\", where \"m\" is \"1\" for factory, \"2\" for account and \"3\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts."}}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"params":{"factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"params":{"aggregatorInfo":"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation","factoryInfo":"stake information about the factory (if any)","paymasterInfo":"stake information about the paymaster (if any)","returnInfo":"gas and time-range returned values","senderInfo":"stake information about the sender"}}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"params":{"factory":"the factory used to deploy this account (in the initCode)","paymaster":"the paymaster used by this UserOp","sender":"the account that is deployed","userOpHash":"the userOp that deployed this account. UserOperationEvent will follow."}},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"params":{"nonce":"the nonce used in the request","revertReason":"- the return bytes from the (reverted) call to \"callData\".","sender":"the sender of this request","userOpHash":"the request unique identifier."}}},"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"the new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"returns":{"_0":"the deposit (for gas payment) of the account"}},"getDepositInfo(address)":{"returns":{"info":"- full deposit information of given account"}},"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}},"getSenderAddress(bytes)":{"params":{"initCode":"the constructor code to be passed into the UserOperation."}},"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":{"params":{"beneficiary":"the address to receive the fees","opsPerAggregator":"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)"}},"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":{"params":{"beneficiary":"the address to receive the fees","ops":"the operations to execute"}},"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":{"params":{"op":"the UserOperation to simulate","target":"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.","targetCallData":"callData to pass to target address"}},"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"details":"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.","params":{"userOp":"the user operation to validate."}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"the address to send withdrawn value.","withdrawAmount":"the amount to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","balanceOf(address)":"70a08231","depositTo(address)":"b760faf9","getDepositInfo(address)":"5287ce12","getNonce(address,uint192)":"35567e1a","getSenderAddress(bytes)":"9b249f69","getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"a6193531","handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":"4b1d7cf5","handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":"1fad948c","incrementNonce(uint192)":"0bd28e3b","simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":"d6383f94","simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":"ee219423","unlockStake()":"bb9fe6bf","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paid\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"targetSuccess\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"targetResult\",\"type\":\"bytes\"}],\"name\":\"ExecutionResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"opIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"FailedOp\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"SenderAddressResult\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureValidationFailed\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResult\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"preOpGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prefund\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sigFailed\",\"type\":\"bool\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"bytes\",\"name\":\"paymasterContext\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.ReturnInfo\",\"name\":\"returnInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"senderInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"factoryInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"paymasterInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"internalType\":\"struct IStakeManager.StakeInfo\",\"name\":\"stakeInfo\",\"type\":\"tuple\"}],\"internalType\":\"struct IEntryPoint.AggregatorStakeInfo\",\"name\":\"aggregatorInfo\",\"type\":\"tuple\"}],\"name\":\"ValidationResultWithAggregation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"}],\"name\":\"AccountDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"BeforeExecution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"SignatureAggregatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymaster\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"actualGasUsed\",\"type\":\"uint256\"}],\"name\":\"UserOperationEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"revertReason\",\"type\":\"bytes\"}],\"name\":\"UserOperationRevertReason\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"}],\"name\":\"getSenderAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"getUserOpHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"userOps\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IAggregator\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct IEntryPoint.UserOpsPerAggregator[]\",\"name\":\"opsPerAggregator\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleAggregatedOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation[]\",\"name\":\"ops\",\"type\":\"tuple[]\"},{\"internalType\":\"address payable\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"handleOps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"op\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"targetCallData\",\"type\":\"bytes\"}],\"name\":\"simulateHandleOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"simulateValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedOp(uint256,string)\":[{\"params\":{\"opIndex\":\"- index into the array of ops to the failed one (in simulateValidation, this is always zero)\",\"reason\":\"- revert reason      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,      so a failure can be attributed to the correct entity.   Should be caught in off-chain handleOps simulation and not happen on-chain.   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\"}}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"params\":{\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"params\":{\"aggregatorInfo\":\"signature aggregation info (if the account requires signature aggregator)      bundler MUST use it to verify the signature, or reject the UserOperation\",\"factoryInfo\":\"stake information about the factory (if any)\",\"paymasterInfo\":\"stake information about the paymaster (if any)\",\"returnInfo\":\"gas and time-range returned values\",\"senderInfo\":\"stake information about the sender\"}}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"params\":{\"factory\":\"the factory used to deploy this account (in the initCode)\",\"paymaster\":\"the paymaster used by this UserOp\",\"sender\":\"the account that is deployed\",\"userOpHash\":\"the userOp that deployed this account. UserOperationEvent will follow.\"}},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"params\":{\"nonce\":\"the nonce used in the request\",\"revertReason\":\"- the return bytes from the (reverted) call to \\\"callData\\\".\",\"sender\":\"the sender of this request\",\"userOpHash\":\"the request unique identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}},\"getSenderAddress(bytes)\":{\"params\":{\"initCode\":\"the constructor code to be passed into the UserOperation.\"}},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"opsPerAggregator\":\"the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\"}},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"params\":{\"beneficiary\":\"the address to receive the fees\",\"ops\":\"the operations to execute\"}},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"params\":{\"op\":\"the UserOperation to simulate\",\"target\":\"if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult        are set to the return from that call.\",\"targetCallData\":\"callData to pass to target address\"}},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"details\":\"this method always revert. Successful result is ValidationResult error. other errors are failures.The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\",\"params\":{\"userOp\":\"the user operation to validate.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)\":[{\"notice\":\"return value of simulateHandleOp\"}],\"FailedOp(uint256,string)\":[{\"notice\":\"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\"}],\"SenderAddressResult(address)\":[{\"notice\":\"return value of getSenderAddress\"}],\"SignatureValidationFailed(address)\":[{\"notice\":\"error case when a signature aggregator fails to verify the aggregated signature it had created.\"}],\"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))\":[{\"notice\":\"Successful result from simulateValidation.\"}],\"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))\":[{\"notice\":\"Successful result from simulateValidation, if the account returns a signature aggregator\"}]},\"events\":{\"AccountDeployed(bytes32,address,address,address)\":{\"notice\":\"account \\\"sender\\\" was deployed.\"},\"BeforeExecution()\":{\"notice\":\"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation.\"},\"SignatureAggregatorChanged(address)\":{\"notice\":\"signature aggregator used by the following UserOperationEvents within this bundle.\"},\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"},\"UserOperationRevertReason(bytes32,address,uint256,bytes)\":{\"notice\":\"An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"getSenderAddress(bytes)\":{\"notice\":\"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error\"},\"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\"},\"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation with Aggregators\"},\"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)\":{\"notice\":\"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"},\"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)\":{\"notice\":\"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \\\"ExecutionResult\\\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events.\"},\"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))\":{\"notice\":\"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/interfaces/IEntryPoint.sol\":\"IEntryPoint\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ExecutionResult(uint256,uint256,uint48,uint48,bool,bytes)":[{"notice":"return value of simulateHandleOp"}],"FailedOp(uint256,string)":[{"notice":"a custom revert error of handleOps, to identify the offending op.  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it."}],"SenderAddressResult(address)":[{"notice":"return value of getSenderAddress"}],"SignatureValidationFailed(address)":[{"notice":"error case when a signature aggregator fails to verify the aggregated signature it had created."}],"ValidationResult((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256))":[{"notice":"Successful result from simulateValidation."}],"ValidationResultWithAggregation((uint256,uint256,bool,uint48,uint48,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),(address,(uint256,uint256)))":[{"notice":"Successful result from simulateValidation, if the account returns a signature aggregator"}]},"events":{"AccountDeployed(bytes32,address,address,address)":{"notice":"account \"sender\" was deployed."},"BeforeExecution()":{"notice":"an event emitted by handleOps(), before starting the execution loop. any event emitted before this event, is part of the validation."},"SignatureAggregatorChanged(address)":{"notice":"signature aggregator used by the following UserOperationEvents within this bundle."},"StakeLocked(address,uint256,uint256)":{"notice":"Emitted when stake or unstake delay are modified"},"StakeUnlocked(address,uint256)":{"notice":"Emitted once a stake is scheduled for withdrawal"},"UserOperationRevertReason(bytes32,address,uint256,bytes)":{"notice":"An event emitted if the UserOperation \"callData\" reverted with non-zero length"}},"kind":"user","methods":{"addStake(uint32)":{"notice":"add to the account's stake - amount and delay any pending unstake is first cancelled."},"depositTo(address)":{"notice":"add to the deposit of the given account"},"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"getSenderAddress(bytes)":{"notice":"Get counterfactual sender address.  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation. this method always revert, and returns the address in SenderAddressResult error"},"getUserOpHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"generate a request Id - unique identifier for this request. the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid."},"handleAggregatedOps(((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address,bytes)[],address)":{"notice":"Execute a batch of UserOperation with Aggregators"},"handleOps((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes)[],address)":{"notice":"Execute a batch of UserOperation. no signature aggregator is used. if any account requires an aggregator (that is, it returned an aggregator when performing simulateValidation), then handleAggregatedOps() must be used instead."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."},"simulateHandleOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),address,bytes)":{"notice":"simulate full execution of a UserOperation (including both validation and target execution) this method will always revert with \"ExecutionResult\". it performs full validation of the UserOperation, but ignores signature error. an optional target address is called after the userop succeeds, and its value is returned (before the entire call is reverted) Note that in order to collect the the success/failure of the target call, it must be executed with trace enabled to track the emitted events."},"simulateValidation((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes))":{"notice":"Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp."},"unlockStake()":{"notice":"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"},"withdrawTo(address,uint256)":{"notice":"withdraw from the deposit."}},"version":1}}},"account-abstraction/contracts/interfaces/INonceManager.sol":{"INonceManager":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint192","name":"key","type":"uint192"}],"name":"getNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint192","name":"key","type":"uint192"}],"name":"incrementNonce","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"getNonce(address,uint192)":{"params":{"key":"the high 192 bit of the nonce","sender":"the account address"},"returns":{"nonce":"a full nonce to pass for next UserOp with this sender."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"getNonce(address,uint192)":"35567e1a","incrementNonce(uint192)":"0bd28e3b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"getNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint192\",\"name\":\"key\",\"type\":\"uint192\"}],\"name\":\"incrementNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getNonce(address,uint192)\":{\"params\":{\"key\":\"the high 192 bit of the nonce\",\"sender\":\"the account address\"},\"returns\":{\"nonce\":\"a full nonce to pass for next UserOp with this sender.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getNonce(address,uint192)\":{\"notice\":\"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order.\"},\"incrementNonce(uint192)\":{\"notice\":\"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/interfaces/INonceManager.sol\":\"INonceManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"getNonce(address,uint192)":{"notice":"Return the next nonce for this sender. Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop) But UserOp with different keys can come with arbitrary order."},"incrementNonce(uint192)":{"notice":"Manually increment the nonce of the sender. This method is exposed just for completeness.. Account does NOT need to call it, neither during validation, nor elsewhere, as the EntryPoint will update the nonce regardless. Possible use-case is call it with various keys to \"initialize\" their nonces to one, so that future UserOperations will not pay extra for the first transaction with a given key."}},"version":1}}},"account-abstraction/contracts/interfaces/IPaymaster.sol":{"IPaymaster":{"abi":[{"inputs":[{"internalType":"enum IPaymaster.PostOpMode","name":"mode","type":"uint8"},{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"uint256","name":"actualGasCost","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"maxCost","type":"uint256"}],"name":"validatePaymasterUserOp","outputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"postOp(uint8,bytes,uint256)":{"params":{"actualGasCost":"- actual gas used so far (without this postOp call).","context":"- the context value returned by validatePaymasterUserOp","mode":"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."}},"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"params":{"maxCost":"the maximum cost of this transaction (based on maximum gas and gas price from userOp)","userOp":"the user operation","userOpHash":"hash of the user's request data."},"returns":{"context":"value to send to a postOp      zero length to signify postOp is not required.","validationData":"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"postOp(uint8,bytes,uint256)":"a9a23409","validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"f465c77e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"the maximum cost of this transaction (based on maximum gas and gas price from userOp)\",\"userOp\":\"the user operation\",\"userOpHash\":\"hash of the user's request data.\"},\"returns\":{\"context\":\"value to send to a postOp      zero length to signify postOp is not required.\",\"validationData\":\"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"}},\"notice\":\"the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations. a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/interfaces/IPaymaster.sol\":\"IPaymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\\n    }\\n\\n    /**\\n     * payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @param userOpHash hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *      zero length to signify postOp is not required.\\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n}\\n\",\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"postOp(uint8,bytes,uint256)":{"notice":"post-operation handler. Must verify sender is the entryPoint"},"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."}},"notice":"the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations. a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.","version":1}}},"account-abstraction/contracts/interfaces/IStakeManager.sol":{"IStakeManager":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalDeposit","type":"uint256"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"totalStaked","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unstakeDelaySec","type":"uint256"}],"name":"StakeLocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"uint256","name":"withdrawTime","type":"uint256"}],"name":"StakeUnlocked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"StakeWithdrawn","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"withdrawAddress","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"Withdrawn","type":"event"},{"inputs":[{"internalType":"uint32","name":"_unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"depositTo","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getDepositInfo","outputs":[{"components":[{"internalType":"uint112","name":"deposit","type":"uint112"},{"internalType":"bool","name":"staked","type":"bool"},{"internalType":"uint112","name":"stake","type":"uint112"},{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"},{"internalType":"uint48","name":"withdrawTime","type":"uint48"}],"internalType":"struct IStakeManager.DepositInfo","name":"info","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"withdrawAmount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addStake(uint32)":{"params":{"_unstakeDelaySec":"the new lock duration before the deposit can be withdrawn."}},"balanceOf(address)":{"returns":{"_0":"the deposit (for gas payment) of the account"}},"getDepositInfo(address)":{"returns":{"info":"- full deposit information of given account"}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"withdrawAddress":"the address to send withdrawn value.","withdrawAmount":"the amount to withdraw."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"addStake(uint32)":"0396cb60","balanceOf(address)":"70a08231","depositTo(address)":"b760faf9","getDepositInfo(address)":"5287ce12","unlockStake()":"bb9fe6bf","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalDeposit\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unstakeDelaySec\",\"type\":\"uint256\"}],\"name\":\"StakeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawTime\",\"type\":\"uint256\"}],\"name\":\"StakeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDepositInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint112\",\"name\":\"deposit\",\"type\":\"uint112\"},{\"internalType\":\"bool\",\"name\":\"staked\",\"type\":\"bool\"},{\"internalType\":\"uint112\",\"name\":\"stake\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"},{\"internalType\":\"uint48\",\"name\":\"withdrawTime\",\"type\":\"uint48\"}],\"internalType\":\"struct IStakeManager.DepositInfo\",\"name\":\"info\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"_unstakeDelaySec\":\"the new lock duration before the deposit can be withdrawn.\"}},\"balanceOf(address)\":{\"returns\":{\"_0\":\"the deposit (for gas payment) of the account\"}},\"getDepositInfo(address)\":{\"returns\":{\"info\":\"- full deposit information of given account\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\",\"withdrawAmount\":\"the amount to withdraw.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StakeLocked(address,uint256,uint256)\":{\"notice\":\"Emitted when stake or unstake delay are modified\"},\"StakeUnlocked(address,uint256)\":{\"notice\":\"Emitted once a stake is scheduled for withdrawal\"}},\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add to the account's stake - amount and delay any pending unstake is first cancelled.\"},\"depositTo(address)\":{\"notice\":\"add to the deposit of the given account\"},\"unlockStake()\":{\"notice\":\"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw from the deposit.\"}},\"notice\":\"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/interfaces/IStakeManager.sol\":\"IStakeManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"StakeLocked(address,uint256,uint256)":{"notice":"Emitted when stake or unstake delay are modified"},"StakeUnlocked(address,uint256)":{"notice":"Emitted once a stake is scheduled for withdrawal"}},"kind":"user","methods":{"addStake(uint32)":{"notice":"add to the account's stake - amount and delay any pending unstake is first cancelled."},"depositTo(address)":{"notice":"add to the deposit of the given account"},"unlockStake()":{"notice":"attempt to unlock the stake. the value can be withdrawn (using withdrawStake) after the unstake delay."},"withdrawStake(address)":{"notice":"withdraw from the (unlocked) stake. must first call unlockStake and wait for the unstakeDelay to pass"},"withdrawTo(address,uint256)":{"notice":"withdraw from the deposit."}},"notice":"manage deposits and stakes. deposit is just a balance used to pay for UserOperations (either by a paymaster or an account) stake is value locked for at least \"unstakeDelay\" by the staked entity.","version":1}}},"account-abstraction/contracts/interfaces/UserOperation.sol":{"UserOperationLib":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"602d6037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x2D PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1630:2115:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1630:2115:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea164736f6c6343000813000a","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1630:2115:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"9000","executionCost":"94","totalCost":"9094"},"internal":{"gasPrice(struct UserOperation calldata)":"infinite","getSender(struct UserOperation calldata)":"infinite","hash(struct UserOperation calldata)":"infinite","min(uint256,uint256)":"infinite","pack(struct UserOperation calldata)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Utility functions helpful when working with UserOperation structs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"account-abstraction/contracts/interfaces/UserOperation.sol\":\"UserOperationLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Utility functions helpful when working with UserOperation structs.","version":1}}},"contracts/VerifyingPaymaster.sol":{"VerifyingPaymaster":{"abi":[{"inputs":[{"internalType":"contract IEntryPoint","name":"_entryPoint","type":"address"},{"internalType":"address","name":"_owner","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"POST_OP_GAS","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"unstakeDelaySec","type":"uint32"}],"name":"addStake","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"entryPoint","outputs":[{"internalType":"contract IEntryPoint","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDeposit","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"address","name":"erc20Token","type":"address"},{"internalType":"uint256","name":"exchangeRate","type":"uint256"}],"name":"getHash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"paymasterAndData","type":"bytes"}],"name":"parsePaymasterAndData","outputs":[{"internalType":"uint48","name":"validUntil","type":"uint48"},{"internalType":"uint48","name":"validAfter","type":"uint48"},{"internalType":"address","name":"erc20Token","type":"address"},{"internalType":"uint256","name":"exchangeRate","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"enum IPaymaster.PostOpMode","name":"mode","type":"uint8"},{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"uint256","name":"actualGasCost","type":"uint256"}],"name":"postOp","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"senderNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unlockStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"initCode","type":"bytes"},{"internalType":"bytes","name":"callData","type":"bytes"},{"internalType":"uint256","name":"callGasLimit","type":"uint256"},{"internalType":"uint256","name":"verificationGasLimit","type":"uint256"},{"internalType":"uint256","name":"preVerificationGas","type":"uint256"},{"internalType":"uint256","name":"maxFeePerGas","type":"uint256"},{"internalType":"uint256","name":"maxPriorityFeePerGas","type":"uint256"},{"internalType":"bytes","name":"paymasterAndData","type":"bytes"},{"internalType":"bytes","name":"signature","type":"bytes"}],"internalType":"struct UserOperation","name":"userOp","type":"tuple"},{"internalType":"bytes32","name":"userOpHash","type":"bytes32"},{"internalType":"uint256","name":"maxCost","type":"uint256"}],"name":"validatePaymasterUserOp","outputs":[{"internalType":"bytes","name":"context","type":"bytes"},{"internalType":"uint256","name":"validationData","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"}],"name":"withdrawStake","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"withdrawAddress","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTo","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"addStake(uint32)":{"params":{"unstakeDelaySec":"- the unstake delay for this paymaster. Can only be increased."}},"owner()":{"details":"Returns the address of the current owner."},"postOp(uint8,bytes,uint256)":{"params":{"actualGasCost":"- actual gas used so far (without this postOp call).","context":"- the context value returned by validatePaymasterUserOp","mode":"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."}},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"params":{"maxCost":"the maximum cost of this transaction (based on maximum gas and gas price from userOp)","userOp":"the user operation","userOpHash":"hash of the user's request data."},"returns":{"context":"value to send to a postOp      zero length to signify postOp is not required.","validationData":"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \"authorizer\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \"indefinite\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly."}},"withdrawStake(address)":{"params":{"withdrawAddress":"the address to send withdrawn value."}},"withdrawTo(address,uint256)":{"params":{"amount":"to withdraw","withdrawAddress":"target to send to"}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_23":{"entryPoint":null,"id":23,"parameterSlots":0,"returnSlots":0},"@_2897":{"entryPoint":null,"id":2897,"parameterSlots":1,"returnSlots":0},"@_3986":{"entryPoint":null,"id":3986,"parameterSlots":2,"returnSlots":0},"@_msgSender_1461":{"entryPoint":null,"id":1461,"parameterSlots":0,"returnSlots":1},"@_transferOwnership_111":{"entryPoint":95,"id":111,"parameterSlots":1,"returnSlots":0},"abi_decode_tuple_t_contract$_IEntryPoint_$3568t_address_fromMemory":{"entryPoint":200,"id":null,"parameterSlots":2,"returnSlots":2},"validator_revert_contract_IEntryPoint":{"entryPoint":175,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:596:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"72:86:21","statements":[{"body":{"nodeType":"YulBlock","src":"136:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"145:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"148:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"138:6:21"},"nodeType":"YulFunctionCall","src":"138:12:21"},"nodeType":"YulExpressionStatement","src":"138:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"95:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"106:5:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"121:3:21","type":"","value":"160"},{"kind":"number","nodeType":"YulLiteral","src":"126:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"117:3:21"},"nodeType":"YulFunctionCall","src":"117:11:21"},{"kind":"number","nodeType":"YulLiteral","src":"130:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"113:3:21"},"nodeType":"YulFunctionCall","src":"113:19:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"102:3:21"},"nodeType":"YulFunctionCall","src":"102:31:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"92:2:21"},"nodeType":"YulFunctionCall","src":"92:42:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"85:6:21"},"nodeType":"YulFunctionCall","src":"85:50:21"},"nodeType":"YulIf","src":"82:70:21"}]},"name":"validator_revert_contract_IEntryPoint","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"61:5:21","type":""}],"src":"14:144:21"},{"body":{"nodeType":"YulBlock","src":"281:313:21","statements":[{"body":{"nodeType":"YulBlock","src":"327:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"336:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"339:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"329:6:21"},"nodeType":"YulFunctionCall","src":"329:12:21"},"nodeType":"YulExpressionStatement","src":"329:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"302:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"311:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"298:3:21"},"nodeType":"YulFunctionCall","src":"298:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"323:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"294:3:21"},"nodeType":"YulFunctionCall","src":"294:32:21"},"nodeType":"YulIf","src":"291:52:21"},{"nodeType":"YulVariableDeclaration","src":"352:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"371:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"365:5:21"},"nodeType":"YulFunctionCall","src":"365:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"356:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"428:5:21"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"390:37:21"},"nodeType":"YulFunctionCall","src":"390:44:21"},"nodeType":"YulExpressionStatement","src":"390:44:21"},{"nodeType":"YulAssignment","src":"443:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"453:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"443:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"467:40:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"492:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"503:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"488:3:21"},"nodeType":"YulFunctionCall","src":"488:18:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"482:5:21"},"nodeType":"YulFunctionCall","src":"482:25:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"471:7:21","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"554:7:21"}],"functionName":{"name":"validator_revert_contract_IEntryPoint","nodeType":"YulIdentifier","src":"516:37:21"},"nodeType":"YulFunctionCall","src":"516:46:21"},"nodeType":"YulExpressionStatement","src":"516:46:21"},{"nodeType":"YulAssignment","src":"571:17:21","value":{"name":"value_1","nodeType":"YulIdentifier","src":"581:7:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"571:6:21"}]}]},"name":"abi_decode_tuple_t_contract$_IEntryPoint_$3568t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"239:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"250:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"262:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"270:6:21","type":""}],"src":"163:431:21"}]},"contents":"{\n    { }\n    function validator_revert_contract_IEntryPoint(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IEntryPoint_$3568t_address_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IEntryPoint(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IEntryPoint(value_1)\n        value1 := value_1\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b50604051620018f6380380620018f68339810160408190526200003491620000c8565b8162000040336200005f565b6001600160a01b031660805262000057816200005f565b505062000107565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0381168114620000c557600080fd5b50565b60008060408385031215620000dc57600080fd5b8251620000e981620000af565b6020840151909250620000fc81620000af565b809150509250929050565b6080516117a2620001546000396000818161023801528181610332015281816103c9015281816104ef01528181610583015281816105fa01528181610687015261089901526117a26000f3fe6080604052600436106100f35760003560e01c8063b0d691fe1161008a578063c399ec8811610059578063c399ec88146102a5578063d0e30db0146102ba578063f2fde38b146102c2578063f465c77e146102e257600080fd5b8063b0d691fe14610226578063b8202d8f1461025a578063bb9fe6bf14610270578063c23a5cea1461028557600080fd5b80638da5cb5b116100c65780638da5cb5b1461017557806394d4ad60146101a75780639c90b443146101d9578063a9a234091461020657600080fd5b80630396cb60146100f8578063205c28781461010d578063290da2ad1461012d578063715018a614610160575b600080fd5b61010b6101063660046111ee565b610310565b005b34801561011957600080fd5b5061010b610128366004611230565b61039b565b34801561013957600080fd5b5061014d610148366004611290565b61040d565b6040519081526020015b60405180910390f35b34801561016c57600080fd5b5061010b610470565b34801561018157600080fd5b506000546001600160a01b03165b6040516001600160a01b039091168152602001610157565b3480156101b357600080fd5b506101c76101c236600461134b565b610484565b6040516101579695949392919061138d565b3480156101e557600080fd5b5061014d6101f43660046113f0565b60016020526000908152604090205481565b34801561021257600080fd5b5061010b61022136600461140d565b6104cb565b34801561023257600080fd5b5061018f7f000000000000000000000000000000000000000000000000000000000000000081565b34801561026657600080fd5b5061014d6188b881565b34801561027c57600080fd5b5061010b6104e5565b34801561029157600080fd5b5061010b6102a03660046113f0565b61055c565b3480156102b157600080fd5b5061014d6105e2565b61010b610672565b3480156102ce57600080fd5b5061010b6102dd3660046113f0565b6106d4565b3480156102ee57600080fd5b506103026102fd36600461146d565b610769565b60405161015792919061150b565b61031861078d565b604051621cb65b60e51b815263ffffffff821660048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630396cb609034906024016000604051808303818588803b15801561037f57600080fd5b505af1158015610393573d6000803e3d6000fd5b505050505050565b6103a361078d565b60405163040b850f60e31b81526001600160a01b038381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063205c287890604401600060405180830381600087803b15801561037f57600080fd5b6000610418866107e7565b6001600160a01b0387351660009081526001602090815260409182902054915161044f9392469230928b918b918b918b910161152d565b60405160208183030381529060405280519060200120905095945050505050565b61047861078d565b6104826000610826565b565b6000808080368161049960946014898b61158b565b8101906104a691906115b5565b929850909650945092506104bd876094818b61158b565b915091509295509295509295565b6104d361088e565b6104df84848484610906565b50505050565b6104ed61078d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561054857600080fd5b505af11580156104df573d6000803e3d6000fd5b61056461078d565b60405163611d2e7560e11b81526001600160a01b0382811660048301527f0000000000000000000000000000000000000000000000000000000000000000169063c23a5cea90602401600060405180830381600087803b1580156105c757600080fd5b505af11580156105db573d6000803e3d6000fd5b5050505050565b6040516370a0823160e01b81523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015610649573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066d9190611602565b905090565b60405163b760faf960e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b760faf99034906024016000604051808303818588803b1580156105c757600080fd5b6106dc61078d565b6001600160a01b03811661075d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61076681610826565b50565b6060600061077561088e565b6107808585856109c7565b915091505b935093915050565b6000546001600160a01b031633146104825760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610754565b60603660006107fa61012085018561161b565b915091508360208184030360405194506020810185016040528085528082602087013750505050919050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146104825760405162461bcd60e51b815260206004820152601560248201527f53656e646572206e6f7420456e747279506f696e7400000000000000000000006044820152606401610754565b60008080808061091887890189611662565b945094509450945094506000818303610932575081610941565b61093e83488401610c25565b90505b6000670de0b6b3a764000085610959846188b86116c9565b610963908b6116e0565b61096d91906116c9565b61097791906116f3565b905060028b600281111561098d5761098d611715565b146109ba576109ba876109a86000546001600160a01b031690565b6001600160a01b038916919084610c3f565b5050505050505050505050565b606060008080808036816109e26101c26101208d018d61161b565b9550955095509550955095508181905060401480610a005750604181145b610a74576040805162461bcd60e51b81526020600482015260248101919091527f566572696679696e675061796d61737465723a20696e76616c6964207369676e60448201527f6174757265206c656e67746820696e207061796d6173746572416e64446174616064820152608401610754565b6000610ad9610a868d8989898961040d565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b6001600160a01b038d35166000908152600160205260408120805492935090610b018361172b565b909155505060408051602081019091526000815298506001600160a01b03851615610b7f57610b3360208d018d6113f0565b604080516001600160a01b039283166020820152918716908201526060810185905260e08d013560808201526101008d013560a082015260c00160405160208183030381529060405298505b610bbf8184848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610cae92505050565b6001600160a01b0316610bda6000546001600160a01b031690565b6001600160a01b031614610c055788610bf560018989610cd2565b9850985050505050505050610785565b88610c1260008989610cd2565b9850985050505050505050935093915050565b6000818310610c345781610c36565b825b90505b92915050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526104df908590610d0a565b6000806000610cbd8585610df4565b91509150610cca81610e39565b509392505050565b600060d08265ffffffffffff16901b60a08465ffffffffffff16901b85610cfa576000610cfd565b60015b60ff161717949350505050565b6000610d5f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610f839092919063ffffffff16565b805190915015610def5780806020019051810190610d7d9190611744565b610def5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610754565b505050565b6000808251604103610e2a5760208301516040840151606085015160001a610e1e87828585610f9a565b94509450505050610e32565b506000905060025b9250929050565b6000816004811115610e4d57610e4d611715565b03610e555750565b6001816004811115610e6957610e69611715565b03610eb65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610754565b6002816004811115610eca57610eca611715565b03610f175760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610754565b6003816004811115610f2b57610f2b611715565b036107665760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610754565b6060610f92848460008561105e565b949350505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610fd15750600090506003611055565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015611025573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661104e57600060019250925050611055565b9150600090505b94509492505050565b6060824710156110d65760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610754565b600080866001600160a01b031685876040516110f29190611766565b60006040518083038185875af1925050503d806000811461112f576040519150601f19603f3d011682016040523d82523d6000602084013e611134565b606091505b509150915061114587838387611150565b979650505050505050565b606083156111bf5782516000036111b8576001600160a01b0385163b6111b85760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610754565b5081610f92565b610f9283838151156111d45781518083602001fd5b8060405162461bcd60e51b81526004016107549190611782565b60006020828403121561120057600080fd5b813563ffffffff8116811461121457600080fd5b9392505050565b6001600160a01b038116811461076657600080fd5b6000806040838503121561124357600080fd5b823561124e8161121b565b946020939093013593505050565b6000610160828403121561126f57600080fd5b50919050565b803565ffffffffffff8116811461128b57600080fd5b919050565b600080600080600060a086880312156112a857600080fd5b853567ffffffffffffffff8111156112bf57600080fd5b6112cb8882890161125c565b9550506112da60208701611275565b93506112e860408701611275565b925060608601356112f88161121b565b949793965091946080013592915050565b60008083601f84011261131b57600080fd5b50813567ffffffffffffffff81111561133357600080fd5b602083019150836020828501011115610e3257600080fd5b6000806020838503121561135e57600080fd5b823567ffffffffffffffff81111561137557600080fd5b61138185828601611309565b90969095509350505050565b600065ffffffffffff80891683528088166020840152506001600160a01b038616604083015284606083015260a060808301528260a0830152828460c0840137600060c0848401015260c0601f19601f8501168301019050979650505050505050565b60006020828403121561140257600080fd5b81356112148161121b565b6000806000806060858703121561142357600080fd5b84356003811061143257600080fd5b9350602085013567ffffffffffffffff81111561144e57600080fd5b61145a87828801611309565b9598909750949560400135949350505050565b60008060006060848603121561148257600080fd5b833567ffffffffffffffff81111561149957600080fd5b6114a58682870161125c565b9660208601359650604090950135949350505050565b60005b838110156114d65781810151838201526020016114be565b50506000910152565b600081518084526114f78160208601602086016114bb565b601f01601f19169290920160200192915050565b60408152600061151e60408301856114df565b90508260208301529392505050565b60006101008083526115418184018c6114df565b602084019a909a5250506001600160a01b039687166040820152606081019590955265ffffffffffff93841660808601529190921660a0840152921660c082015260e00152919050565b6000808585111561159b57600080fd5b838611156115a857600080fd5b5050820193919092039150565b600080600080608085870312156115cb57600080fd5b6115d485611275565b93506115e260208601611275565b925060408501356115f28161121b565b9396929550929360600135925050565b60006020828403121561161457600080fd5b5051919050565b6000808335601e1984360301811261163257600080fd5b83018035915067ffffffffffffffff82111561164d57600080fd5b602001915036819003821315610e3257600080fd5b600080600080600060a0868803121561167a57600080fd5b85356116858161121b565b945060208601356116958161121b565b94979496505050506040830135926060810135926080909101359150565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c3957610c396116b3565b80820180821115610c3957610c396116b3565b60008261171057634e487b7160e01b600052601260045260246000fd5b500490565b634e487b7160e01b600052602160045260246000fd5b60006001820161173d5761173d6116b3565b5060010190565b60006020828403121561175657600080fd5b8151801515811461121457600080fd5b600082516117788184602087016114bb565b9190910192915050565b602081526000610c3660208301846114df56fea164736f6c6343000813000a","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x18F6 CODESIZE SUB DUP1 PUSH3 0x18F6 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0xC8 JUMP JUMPDEST DUP2 PUSH3 0x40 CALLER PUSH3 0x5F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH3 0x57 DUP2 PUSH3 0x5F JUMP JUMPDEST POP POP PUSH3 0x107 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0xDC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH3 0xE9 DUP2 PUSH3 0xAF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0xFC DUP2 PUSH3 0xAF JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x17A2 PUSH3 0x154 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x238 ADD MSTORE DUP2 DUP2 PUSH2 0x332 ADD MSTORE DUP2 DUP2 PUSH2 0x3C9 ADD MSTORE DUP2 DUP2 PUSH2 0x4EF ADD MSTORE DUP2 DUP2 PUSH2 0x583 ADD MSTORE DUP2 DUP2 PUSH2 0x5FA ADD MSTORE DUP2 DUP2 PUSH2 0x687 ADD MSTORE PUSH2 0x899 ADD MSTORE PUSH2 0x17A2 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB0D691FE GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC399EC88 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xF465C77E EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xB8202D8F EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xBB9FE6BF EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xC23A5CEA EQ PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x94D4AD60 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x9C90B443 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xA9A23409 EQ PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x396CB60 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x205C2878 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x290DA2AD EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x160 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10B PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x1230 JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x1290 JUMP JUMPDEST PUSH2 0x40D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x470 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x134B JUMP JUMPDEST PUSH2 0x484 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x157 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x13F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x140D JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x88B8 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x4E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x13F0 JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x10B PUSH2 0x672 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x13F0 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x302 PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x146D JUMP JUMPDEST PUSH2 0x769 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x157 SWAP3 SWAP2 SWAP1 PUSH2 0x150B JUMP JUMPDEST PUSH2 0x318 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x1CB65B PUSH1 0xE5 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x396CB60 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3A3 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x40B850F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x205C2878 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x418 DUP7 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 CALLDATALOAD AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD PUSH2 0x44F SWAP4 SWAP3 CHAINID SWAP3 ADDRESS SWAP3 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 ADD PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x478 PUSH2 0x78D JUMP JUMPDEST PUSH2 0x482 PUSH1 0x0 PUSH2 0x826 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 CALLDATASIZE DUP2 PUSH2 0x499 PUSH1 0x94 PUSH1 0x14 DUP10 DUP12 PUSH2 0x158B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x4A6 SWAP2 SWAP1 PUSH2 0x15B5 JUMP JUMPDEST SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP SWAP3 POP PUSH2 0x4BD DUP8 PUSH1 0x94 DUP2 DUP12 PUSH2 0x158B JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x4D3 PUSH2 0x88E JUMP JUMPDEST PUSH2 0x4DF DUP5 DUP5 DUP5 DUP5 PUSH2 0x906 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x4ED PUSH2 0x78D JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB9FE6BF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x564 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x611D2E75 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xC23A5CEA SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x649 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66D SWAP2 SWAP1 PUSH2 0x1602 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB760FAF9 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB760FAF9 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DC PUSH2 0x78D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x75D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x766 DUP2 PUSH2 0x826 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x775 PUSH2 0x88E JUMP JUMPDEST PUSH2 0x780 DUP6 DUP6 DUP6 PUSH2 0x9C7 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x60 CALLDATASIZE PUSH1 0x0 PUSH2 0x7FA PUSH2 0x120 DUP6 ADD DUP6 PUSH2 0x161B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH1 0x20 DUP2 DUP5 SUB SUB PUSH1 0x40 MLOAD SWAP5 POP PUSH1 0x20 DUP2 ADD DUP6 ADD PUSH1 0x40 MSTORE DUP1 DUP6 MSTORE DUP1 DUP3 PUSH1 0x20 DUP8 ADD CALLDATACOPY POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656E646572206E6F7420456E747279506F696E740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0x918 DUP8 DUP10 ADD DUP10 PUSH2 0x1662 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH1 0x0 DUP2 DUP4 SUB PUSH2 0x932 JUMPI POP DUP2 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x93E DUP4 BASEFEE DUP5 ADD PUSH2 0xC25 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x959 DUP5 PUSH2 0x88B8 PUSH2 0x16C9 JUMP JUMPDEST PUSH2 0x963 SWAP1 DUP12 PUSH2 0x16E0 JUMP JUMPDEST PUSH2 0x96D SWAP2 SWAP1 PUSH2 0x16C9 JUMP JUMPDEST PUSH2 0x977 SWAP2 SWAP1 PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP12 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x98D JUMPI PUSH2 0x98D PUSH2 0x1715 JUMP JUMPDEST EQ PUSH2 0x9BA JUMPI PUSH2 0x9BA DUP8 PUSH2 0x9A8 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 SWAP1 DUP5 PUSH2 0xC3F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 CALLDATASIZE DUP2 PUSH2 0x9E2 PUSH2 0x1C2 PUSH2 0x120 DUP14 ADD DUP14 PUSH2 0x161B JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP DUP2 DUP2 SWAP1 POP PUSH1 0x40 EQ DUP1 PUSH2 0xA00 JUMPI POP PUSH1 0x41 DUP2 EQ JUMPDEST PUSH2 0xA74 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x566572696679696E675061796D61737465723A20696E76616C6964207369676E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6174757265206C656E67746820696E207061796D6173746572416E6444617461 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD9 PUSH2 0xA86 DUP14 DUP10 DUP10 DUP10 DUP10 PUSH2 0x40D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 CALLDATALOAD AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP1 PUSH2 0xB01 DUP4 PUSH2 0x172B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP9 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0xB7F JUMPI PUSH2 0xB33 PUSH1 0x20 DUP14 ADD DUP14 PUSH2 0x13F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0xE0 DUP14 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x100 DUP14 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP9 POP JUMPDEST PUSH2 0xBBF DUP2 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xCAE SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBDA PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC05 JUMPI DUP9 PUSH2 0xBF5 PUSH1 0x1 DUP10 DUP10 PUSH2 0xCD2 JUMP JUMPDEST SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP PUSH2 0x785 JUMP JUMPDEST DUP9 PUSH2 0xC12 PUSH1 0x0 DUP10 DUP10 PUSH2 0xCD2 JUMP JUMPDEST SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xC34 JUMPI DUP2 PUSH2 0xC36 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x4DF SWAP1 DUP6 SWAP1 PUSH2 0xD0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xCBD DUP6 DUP6 PUSH2 0xDF4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xCCA DUP2 PUSH2 0xE39 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 DUP3 PUSH6 0xFFFFFFFFFFFF AND SWAP1 SHL PUSH1 0xA0 DUP5 PUSH6 0xFFFFFFFFFFFF AND SWAP1 SHL DUP6 PUSH2 0xCFA JUMPI PUSH1 0x0 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND OR OR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF83 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xDEF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD7D SWAP2 SWAP1 PUSH2 0x1744 JUMP JUMPDEST PUSH2 0xDEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xE2A JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xE1E DUP8 DUP3 DUP6 DUP6 PUSH2 0xF9A JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xE32 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE4D JUMPI PUSH2 0xE4D PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0xE55 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE69 JUMPI PUSH2 0xE69 PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0xEB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xECA JUMPI PUSH2 0xECA PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0xF17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF2B JUMPI PUSH2 0xF2B PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF92 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x105E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0xFD1 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1025 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x104E JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1055 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x10F2 SWAP2 SWAP1 PUSH2 0x1766 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x112F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1134 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1145 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1150 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x11BF JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x11B8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x11B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST POP DUP2 PUSH2 0xF92 JUMP JUMPDEST PUSH2 0xF92 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x11D4 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x754 SWAP2 SWAP1 PUSH2 0x1782 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x124E DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x126F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x128B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12CB DUP9 DUP3 DUP10 ADD PUSH2 0x125C JUMP JUMPDEST SWAP6 POP POP PUSH2 0x12DA PUSH1 0x20 DUP8 ADD PUSH2 0x1275 JUMP JUMPDEST SWAP4 POP PUSH2 0x12E8 PUSH1 0x40 DUP8 ADD PUSH2 0x1275 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x12F8 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x135E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1381 DUP6 DUP3 DUP7 ADD PUSH2 0x1309 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0xC0 DUP5 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xC0 DUP5 DUP5 ADD ADD MSTORE PUSH1 0xC0 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP4 ADD ADD SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1214 DUP2 PUSH2 0x121B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x1432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x144E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x145A DUP8 DUP3 DUP9 ADD PUSH2 0x1309 JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A5 DUP7 DUP3 DUP8 ADD PUSH2 0x125C JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14D6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x14BE JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x14F7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x14BB JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x151E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 MSTORE PUSH2 0x1541 DUP2 DUP5 ADD DUP13 PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP11 SWAP1 SWAP11 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x80 DUP7 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0xA0 DUP5 ADD MSTORE SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x159B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x15CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15D4 DUP6 PUSH2 0x1275 JUMP JUMPDEST SWAP4 POP PUSH2 0x15E2 PUSH1 0x20 DUP7 ADD PUSH2 0x1275 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x15F2 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1614 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x164D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x167A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1685 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1695 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xC39 JUMPI PUSH2 0xC39 PUSH2 0x16B3 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xC39 JUMPI PUSH2 0xC39 PUSH2 0x16B3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1710 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x173D JUMPI PUSH2 0x173D PUSH2 0x16B3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1778 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x14BB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC36 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x14DF JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1247:4393:19:-:0;;;1629:123;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1696:11;936:32:0;719:10:7;936:18:0;:32::i;:::-;-1:-1:-1;;;;;564:24:11;;;1719:26:19::1;1738:6:::0;1719:18:::1;:26::i;:::-;1629:123:::0;;1247:4393;;2433:187:0;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;-1:-1:-1;;;;;;2541:17:0;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;14:144:21:-;-1:-1:-1;;;;;102:31:21;;92:42;;82:70;;148:1;145;138:12;82:70;14:144;:::o;163:431::-;262:6;270;323:2;311:9;302:7;298:23;294:32;291:52;;;339:1;336;329:12;291:52;371:9;365:16;390:44;428:5;390:44;:::i;:::-;503:2;488:18;;482:25;453:5;;-1:-1:-1;516:46:21;482:25;516:46;:::i;:::-;581:7;571:17;;;163:431;;;;;:::o;:::-;1247:4393:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@POST_OP_GAS_3970":{"entryPoint":null,"id":3970,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_1118":{"entryPoint":3338,"id":1118,"parameterSlots":2,"returnSlots":0},"@_checkOwner_54":{"entryPoint":1933,"id":54,"parameterSlots":0,"returnSlots":0},"@_msgSender_1461":{"entryPoint":null,"id":1461,"parameterSlots":0,"returnSlots":1},"@_packValidationData_3320":{"entryPoint":3282,"id":3320,"parameterSlots":3,"returnSlots":1},"@_postOp_4256":{"entryPoint":2310,"id":4256,"parameterSlots":4,"returnSlots":0},"@_requireFromEntryPoint_3091":{"entryPoint":2190,"id":3091,"parameterSlots":0,"returnSlots":0},"@_revert_1448":{"entryPoint":null,"id":1448,"parameterSlots":2,"returnSlots":0},"@_throwError_1700":{"entryPoint":3641,"id":1700,"parameterSlots":1,"returnSlots":0},"@_transferOwnership_111":{"entryPoint":2086,"id":111,"parameterSlots":1,"returnSlots":0},"@_validatePaymasterUserOp_4163":{"entryPoint":2503,"id":4163,"parameterSlots":3,"returnSlots":2},"@addStake_3033":{"entryPoint":784,"id":3033,"parameterSlots":1,"returnSlots":0},"@deposit_2997":{"entryPoint":1650,"id":2997,"parameterSlots":0,"returnSlots":0},"@entryPoint_2886":{"entryPoint":null,"id":2886,"parameterSlots":0,"returnSlots":0},"@functionCallWithValue_1273":{"entryPoint":4190,"id":1273,"parameterSlots":4,"returnSlots":1},"@functionCall_1209":{"entryPoint":3971,"id":1209,"parameterSlots":3,"returnSlots":1},"@getDeposit_3048":{"entryPoint":1506,"id":3048,"parameterSlots":0,"returnSlots":1},"@getHash_4042":{"entryPoint":1037,"id":4042,"parameterSlots":5,"returnSlots":1},"@getSender_3776":{"entryPoint":null,"id":3776,"parameterSlots":1,"returnSlots":1},"@isContract_1137":{"entryPoint":null,"id":1137,"parameterSlots":1,"returnSlots":1},"@min_2050":{"entryPoint":3109,"id":2050,"parameterSlots":2,"returnSlots":1},"@owner_40":{"entryPoint":null,"id":40,"parameterSlots":0,"returnSlots":1},"@pack_4001":{"entryPoint":2023,"id":4001,"parameterSlots":1,"returnSlots":1},"@parsePaymasterAndData_4301":{"entryPoint":1156,"id":4301,"parameterSlots":2,"returnSlots":6},"@postOp_2959":{"entryPoint":1227,"id":2959,"parameterSlots":4,"returnSlots":0},"@recover_1773":{"entryPoint":3246,"id":1773,"parameterSlots":2,"returnSlots":1},"@renounceOwnership_68":{"entryPoint":1136,"id":68,"parameterSlots":0,"returnSlots":0},"@safeTransferFrom_896":{"entryPoint":3135,"id":896,"parameterSlots":4,"returnSlots":0},"@senderNonce_3961":{"entryPoint":null,"id":3961,"parameterSlots":0,"returnSlots":0},"@toEthSignedMessageHash_1964":{"entryPoint":null,"id":1964,"parameterSlots":1,"returnSlots":1},"@transferOwnership_91":{"entryPoint":1748,"id":91,"parameterSlots":1,"returnSlots":0},"@tryRecover_1746":{"entryPoint":3572,"id":1746,"parameterSlots":2,"returnSlots":2},"@tryRecover_1914":{"entryPoint":3994,"id":1914,"parameterSlots":4,"returnSlots":2},"@unlockStake_3060":{"entryPoint":1253,"id":3060,"parameterSlots":0,"returnSlots":0},"@validatePaymasterUserOp_2923":{"entryPoint":1897,"id":2923,"parameterSlots":3,"returnSlots":2},"@verifyCallResultFromTarget_1404":{"entryPoint":4432,"id":1404,"parameterSlots":4,"returnSlots":1},"@withdrawStake_3075":{"entryPoint":1372,"id":3075,"parameterSlots":1,"returnSlots":0},"@withdrawTo_3015":{"entryPoint":923,"id":3015,"parameterSlots":2,"returnSlots":0},"abi_decode_bytes_calldata":{"entryPoint":4873,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_struct_UserOperation_calldata":{"entryPoint":4700,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":5104,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payablet_contract$_IERC20_$777t_uint256t_uint256t_uint256":{"entryPoint":5730,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_address_payablet_uint256":{"entryPoint":4656,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":5956,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes_calldata_ptr":{"entryPoint":4939,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_enum$_PostOpMode_$3595t_bytes_calldata_ptrt_uint256":{"entryPoint":5133,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_struct$_UserOperation_$3754_calldata_ptrt_bytes32t_uint256":{"entryPoint":5229,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_struct$_UserOperation_$3754_calldata_ptrt_uint48t_uint48t_addresst_uint256":{"entryPoint":4752,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":5634,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint32":{"entryPoint":4590,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint48t_uint48t_address_payablet_uint256":{"entryPoint":5557,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_uint48":{"entryPoint":4725,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_bytes":{"entryPoint":5343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":5990,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":5387,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_uint256_t_address_t_uint256_t_uint48_t_uint48_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint256_t_address_t_uint256_t_uint48_t_uint48_t_address_t_uint256__fromStack_reversed":{"entryPoint":5421,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_contract$_IEntryPoint_$3568__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6018,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4f1183fece38266d89bbd94d1c93e02d713970166951c4c8f2c10a21e7cddae9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c0ccd72718b49b9af08aac30156bc47d10e177349cbe5dac0a36b471195929a7__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint48_t_uint48_t_address_t_uint256_t_bytes_calldata_ptr__to_t_uint48_t_uint48_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":5005,"id":null,"parameterSlots":7,"returnSlots":1},"access_calldata_tail_t_bytes_calldata_ptr":{"entryPoint":5659,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":5515,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":5856,"id":null,"parameterSlots":2,"returnSlots":1},"checked_div_t_uint256":{"entryPoint":5875,"id":null,"parameterSlots":2,"returnSlots":1},"checked_mul_t_uint256":{"entryPoint":5833,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":5307,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":5931,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":5811,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x21":{"entryPoint":5909,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address_payable":{"entryPoint":4635,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:17866:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"83:207:21","statements":[{"body":{"nodeType":"YulBlock","src":"129:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"138:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"141:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"131:6:21"},"nodeType":"YulFunctionCall","src":"131:12:21"},"nodeType":"YulExpressionStatement","src":"131:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"104:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"113:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"100:3:21"},"nodeType":"YulFunctionCall","src":"100:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"125:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"96:3:21"},"nodeType":"YulFunctionCall","src":"96:32:21"},"nodeType":"YulIf","src":"93:52:21"},{"nodeType":"YulVariableDeclaration","src":"154:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"180:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"167:12:21"},"nodeType":"YulFunctionCall","src":"167:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"158:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"244:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"253:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"256:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"246:6:21"},"nodeType":"YulFunctionCall","src":"246:12:21"},"nodeType":"YulExpressionStatement","src":"246:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"212:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"230:10:21","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"219:3:21"},"nodeType":"YulFunctionCall","src":"219:22:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"209:2:21"},"nodeType":"YulFunctionCall","src":"209:33:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"202:6:21"},"nodeType":"YulFunctionCall","src":"202:41:21"},"nodeType":"YulIf","src":"199:61:21"},{"nodeType":"YulAssignment","src":"269:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"279:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"269:6:21"}]}]},"name":"abi_decode_tuple_t_uint32","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"49:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"60:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"72:6:21","type":""}],"src":"14:276:21"},{"body":{"nodeType":"YulBlock","src":"348:109:21","statements":[{"body":{"nodeType":"YulBlock","src":"435:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"447:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"437:6:21"},"nodeType":"YulFunctionCall","src":"437:12:21"},"nodeType":"YulExpressionStatement","src":"437:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"371:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"382:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"389:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"378:3:21"},"nodeType":"YulFunctionCall","src":"378:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"368:2:21"},"nodeType":"YulFunctionCall","src":"368:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"361:6:21"},"nodeType":"YulFunctionCall","src":"361:73:21"},"nodeType":"YulIf","src":"358:93:21"}]},"name":"validator_revert_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"337:5:21","type":""}],"src":"295:162:21"},{"body":{"nodeType":"YulBlock","src":"557:236:21","statements":[{"body":{"nodeType":"YulBlock","src":"603:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"612:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"615:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"605:6:21"},"nodeType":"YulFunctionCall","src":"605:12:21"},"nodeType":"YulExpressionStatement","src":"605:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"578:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"587:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"574:3:21"},"nodeType":"YulFunctionCall","src":"574:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"599:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"570:3:21"},"nodeType":"YulFunctionCall","src":"570:32:21"},"nodeType":"YulIf","src":"567:52:21"},{"nodeType":"YulVariableDeclaration","src":"628:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"654:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"641:12:21"},"nodeType":"YulFunctionCall","src":"641:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"632:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"706:5:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"673:32:21"},"nodeType":"YulFunctionCall","src":"673:39:21"},"nodeType":"YulExpressionStatement","src":"673:39:21"},{"nodeType":"YulAssignment","src":"721:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"731:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"721:6:21"}]},{"nodeType":"YulAssignment","src":"745:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"772:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"783:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"768:3:21"},"nodeType":"YulFunctionCall","src":"768:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"755:12:21"},"nodeType":"YulFunctionCall","src":"755:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"745:6:21"}]}]},"name":"abi_decode_tuple_t_address_payablet_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"515:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"526:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"538:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"546:6:21","type":""}],"src":"462:331:21"},{"body":{"nodeType":"YulBlock","src":"874:86:21","statements":[{"body":{"nodeType":"YulBlock","src":"914:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"923:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"926:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"916:6:21"},"nodeType":"YulFunctionCall","src":"916:12:21"},"nodeType":"YulExpressionStatement","src":"916:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"895:3:21"},{"name":"offset","nodeType":"YulIdentifier","src":"900:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"891:3:21"},"nodeType":"YulFunctionCall","src":"891:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"909:3:21","type":"","value":"352"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"887:3:21"},"nodeType":"YulFunctionCall","src":"887:26:21"},"nodeType":"YulIf","src":"884:46:21"},{"nodeType":"YulAssignment","src":"939:15:21","value":{"name":"offset","nodeType":"YulIdentifier","src":"948:6:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"939:5:21"}]}]},"name":"abi_decode_struct_UserOperation_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"848:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"856:3:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"864:5:21","type":""}],"src":"798:162:21"},{"body":{"nodeType":"YulBlock","src":"1013:119:21","statements":[{"nodeType":"YulAssignment","src":"1023:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1045:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1032:12:21"},"nodeType":"YulFunctionCall","src":"1032:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1023:5:21"}]},{"body":{"nodeType":"YulBlock","src":"1110:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1119:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1122:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1112:6:21"},"nodeType":"YulFunctionCall","src":"1112:12:21"},"nodeType":"YulExpressionStatement","src":"1112:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1074:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1085:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1092:14:21","type":"","value":"0xffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1081:3:21"},"nodeType":"YulFunctionCall","src":"1081:26:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1071:2:21"},"nodeType":"YulFunctionCall","src":"1071:37:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1064:6:21"},"nodeType":"YulFunctionCall","src":"1064:45:21"},"nodeType":"YulIf","src":"1061:65:21"}]},"name":"abi_decode_uint48","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"992:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"1003:5:21","type":""}],"src":"965:167:21"},{"body":{"nodeType":"YulBlock","src":"1306:556:21","statements":[{"body":{"nodeType":"YulBlock","src":"1353:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1362:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1365:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1355:6:21"},"nodeType":"YulFunctionCall","src":"1355:12:21"},"nodeType":"YulExpressionStatement","src":"1355:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1327:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1336:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1323:3:21"},"nodeType":"YulFunctionCall","src":"1323:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1348:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1319:3:21"},"nodeType":"YulFunctionCall","src":"1319:33:21"},"nodeType":"YulIf","src":"1316:53:21"},{"nodeType":"YulVariableDeclaration","src":"1378:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1405:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1392:12:21"},"nodeType":"YulFunctionCall","src":"1392:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1382:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1458:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1467:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1470:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1460:6:21"},"nodeType":"YulFunctionCall","src":"1460:12:21"},"nodeType":"YulExpressionStatement","src":"1460:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1430:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1438:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1427:2:21"},"nodeType":"YulFunctionCall","src":"1427:30:21"},"nodeType":"YulIf","src":"1424:50:21"},{"nodeType":"YulAssignment","src":"1483:83:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1538:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1549:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1534:3:21"},"nodeType":"YulFunctionCall","src":"1534:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1558:7:21"}],"functionName":{"name":"abi_decode_struct_UserOperation_calldata","nodeType":"YulIdentifier","src":"1493:40:21"},"nodeType":"YulFunctionCall","src":"1493:73:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1483:6:21"}]},{"nodeType":"YulAssignment","src":"1575:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1607:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1618:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1603:3:21"},"nodeType":"YulFunctionCall","src":"1603:18:21"}],"functionName":{"name":"abi_decode_uint48","nodeType":"YulIdentifier","src":"1585:17:21"},"nodeType":"YulFunctionCall","src":"1585:37:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1575:6:21"}]},{"nodeType":"YulAssignment","src":"1631:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1663:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1674:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1659:3:21"},"nodeType":"YulFunctionCall","src":"1659:18:21"}],"functionName":{"name":"abi_decode_uint48","nodeType":"YulIdentifier","src":"1641:17:21"},"nodeType":"YulFunctionCall","src":"1641:37:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1631:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1687:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1717:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1728:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1713:3:21"},"nodeType":"YulFunctionCall","src":"1713:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1700:12:21"},"nodeType":"YulFunctionCall","src":"1700:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1691:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1774:5:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"1741:32:21"},"nodeType":"YulFunctionCall","src":"1741:39:21"},"nodeType":"YulExpressionStatement","src":"1741:39:21"},{"nodeType":"YulAssignment","src":"1789:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1799:5:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"1789:6:21"}]},{"nodeType":"YulAssignment","src":"1813:43:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1840:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1851:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1836:3:21"},"nodeType":"YulFunctionCall","src":"1836:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1823:12:21"},"nodeType":"YulFunctionCall","src":"1823:33:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"1813:6:21"}]}]},"name":"abi_decode_tuple_t_struct$_UserOperation_$3754_calldata_ptrt_uint48t_uint48t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1240:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1251:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1263:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1271:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1279:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"1287:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"1295:6:21","type":""}],"src":"1137:725:21"},{"body":{"nodeType":"YulBlock","src":"1968:76:21","statements":[{"nodeType":"YulAssignment","src":"1978:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1990:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2001:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1986:3:21"},"nodeType":"YulFunctionCall","src":"1986:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1978:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2020:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"2031:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2013:6:21"},"nodeType":"YulFunctionCall","src":"2013:25:21"},"nodeType":"YulExpressionStatement","src":"2013:25:21"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1937:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1948:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1959:4:21","type":""}],"src":"1867:177:21"},{"body":{"nodeType":"YulBlock","src":"2150:125:21","statements":[{"nodeType":"YulAssignment","src":"2160:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2172:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2183:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2168:3:21"},"nodeType":"YulFunctionCall","src":"2168:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2160:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2202:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2217:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2225:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2213:3:21"},"nodeType":"YulFunctionCall","src":"2213:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2195:6:21"},"nodeType":"YulFunctionCall","src":"2195:74:21"},"nodeType":"YulExpressionStatement","src":"2195:74:21"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2119:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2130:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2141:4:21","type":""}],"src":"2049:226:21"},{"body":{"nodeType":"YulBlock","src":"2352:275:21","statements":[{"body":{"nodeType":"YulBlock","src":"2401:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2410:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2413:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2403:6:21"},"nodeType":"YulFunctionCall","src":"2403:12:21"},"nodeType":"YulExpressionStatement","src":"2403:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2380:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2388:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2376:3:21"},"nodeType":"YulFunctionCall","src":"2376:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"2395:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2372:3:21"},"nodeType":"YulFunctionCall","src":"2372:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2365:6:21"},"nodeType":"YulFunctionCall","src":"2365:35:21"},"nodeType":"YulIf","src":"2362:55:21"},{"nodeType":"YulAssignment","src":"2426:30:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2449:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2436:12:21"},"nodeType":"YulFunctionCall","src":"2436:20:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2426:6:21"}]},{"body":{"nodeType":"YulBlock","src":"2499:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2508:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2511:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2501:6:21"},"nodeType":"YulFunctionCall","src":"2501:12:21"},"nodeType":"YulExpressionStatement","src":"2501:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2471:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2479:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2468:2:21"},"nodeType":"YulFunctionCall","src":"2468:30:21"},"nodeType":"YulIf","src":"2465:50:21"},{"nodeType":"YulAssignment","src":"2524:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2540:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2548:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2536:3:21"},"nodeType":"YulFunctionCall","src":"2536:17:21"},"variableNames":[{"name":"arrayPos","nodeType":"YulIdentifier","src":"2524:8:21"}]},{"body":{"nodeType":"YulBlock","src":"2605:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2614:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2617:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2607:6:21"},"nodeType":"YulFunctionCall","src":"2607:12:21"},"nodeType":"YulExpressionStatement","src":"2607:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2576:6:21"},{"name":"length","nodeType":"YulIdentifier","src":"2584:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2572:3:21"},"nodeType":"YulFunctionCall","src":"2572:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"2593:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2568:3:21"},"nodeType":"YulFunctionCall","src":"2568:30:21"},{"name":"end","nodeType":"YulIdentifier","src":"2600:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2565:2:21"},"nodeType":"YulFunctionCall","src":"2565:39:21"},"nodeType":"YulIf","src":"2562:59:21"}]},"name":"abi_decode_bytes_calldata","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2315:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"2323:3:21","type":""}],"returnVariables":[{"name":"arrayPos","nodeType":"YulTypedName","src":"2331:8:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"2341:6:21","type":""}],"src":"2280:347:21"},{"body":{"nodeType":"YulBlock","src":"2721:320:21","statements":[{"body":{"nodeType":"YulBlock","src":"2767:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2776:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2779:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2769:6:21"},"nodeType":"YulFunctionCall","src":"2769:12:21"},"nodeType":"YulExpressionStatement","src":"2769:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2742:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2751:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2738:3:21"},"nodeType":"YulFunctionCall","src":"2738:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2763:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2734:3:21"},"nodeType":"YulFunctionCall","src":"2734:32:21"},"nodeType":"YulIf","src":"2731:52:21"},{"nodeType":"YulVariableDeclaration","src":"2792:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2819:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2806:12:21"},"nodeType":"YulFunctionCall","src":"2806:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2796:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2872:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2881:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2884:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2874:6:21"},"nodeType":"YulFunctionCall","src":"2874:12:21"},"nodeType":"YulExpressionStatement","src":"2874:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2844:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2852:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2841:2:21"},"nodeType":"YulFunctionCall","src":"2841:30:21"},"nodeType":"YulIf","src":"2838:50:21"},{"nodeType":"YulVariableDeclaration","src":"2897:84:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2953:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"2964:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2949:3:21"},"nodeType":"YulFunctionCall","src":"2949:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"2973:7:21"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"2923:25:21"},"nodeType":"YulFunctionCall","src":"2923:58:21"},"variables":[{"name":"value0_1","nodeType":"YulTypedName","src":"2901:8:21","type":""},{"name":"value1_1","nodeType":"YulTypedName","src":"2911:8:21","type":""}]},{"nodeType":"YulAssignment","src":"2990:18:21","value":{"name":"value0_1","nodeType":"YulIdentifier","src":"3000:8:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2990:6:21"}]},{"nodeType":"YulAssignment","src":"3017:18:21","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"3027:8:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3017:6:21"}]}]},"name":"abi_decode_tuple_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2679:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2690:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2702:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2710:6:21","type":""}],"src":"2632:409:21"},{"body":{"nodeType":"YulBlock","src":"3283:537:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3293:24:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3303:14:21","type":"","value":"0xffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"3297:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3333:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3348:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3356:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3344:3:21"},"nodeType":"YulFunctionCall","src":"3344:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3326:6:21"},"nodeType":"YulFunctionCall","src":"3326:34:21"},"nodeType":"YulExpressionStatement","src":"3326:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3380:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3391:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3376:3:21"},"nodeType":"YulFunctionCall","src":"3376:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"3400:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"3408:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3396:3:21"},"nodeType":"YulFunctionCall","src":"3396:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3369:6:21"},"nodeType":"YulFunctionCall","src":"3369:43:21"},"nodeType":"YulExpressionStatement","src":"3369:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3432:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3443:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:21"},"nodeType":"YulFunctionCall","src":"3428:18:21"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"3452:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3460:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3448:3:21"},"nodeType":"YulFunctionCall","src":"3448:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3421:6:21"},"nodeType":"YulFunctionCall","src":"3421:83:21"},"nodeType":"YulExpressionStatement","src":"3421:83:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3524:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3535:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3520:3:21"},"nodeType":"YulFunctionCall","src":"3520:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"3540:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3513:6:21"},"nodeType":"YulFunctionCall","src":"3513:34:21"},"nodeType":"YulExpressionStatement","src":"3513:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3567:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3578:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3563:3:21"},"nodeType":"YulFunctionCall","src":"3563:19:21"},{"kind":"number","nodeType":"YulLiteral","src":"3584:3:21","type":"","value":"160"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3556:6:21"},"nodeType":"YulFunctionCall","src":"3556:32:21"},"nodeType":"YulExpressionStatement","src":"3556:32:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3608:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3619:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3604:3:21"},"nodeType":"YulFunctionCall","src":"3604:19:21"},{"name":"value5","nodeType":"YulIdentifier","src":"3625:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3597:6:21"},"nodeType":"YulFunctionCall","src":"3597:35:21"},"nodeType":"YulExpressionStatement","src":"3597:35:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3658:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3669:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3654:3:21"},"nodeType":"YulFunctionCall","src":"3654:19:21"},{"name":"value4","nodeType":"YulIdentifier","src":"3675:6:21"},{"name":"value5","nodeType":"YulIdentifier","src":"3683:6:21"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"3641:12:21"},"nodeType":"YulFunctionCall","src":"3641:49:21"},"nodeType":"YulExpressionStatement","src":"3641:49:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3714:9:21"},{"name":"value5","nodeType":"YulIdentifier","src":"3725:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3710:3:21"},"nodeType":"YulFunctionCall","src":"3710:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"3734:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3706:3:21"},"nodeType":"YulFunctionCall","src":"3706:32:21"},{"kind":"number","nodeType":"YulLiteral","src":"3740:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3699:6:21"},"nodeType":"YulFunctionCall","src":"3699:43:21"},"nodeType":"YulExpressionStatement","src":"3699:43:21"},{"nodeType":"YulAssignment","src":"3751:63:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3767:9:21"},{"arguments":[{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"3786:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3794:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3782:3:21"},"nodeType":"YulFunctionCall","src":"3782:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3803:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3799:3:21"},"nodeType":"YulFunctionCall","src":"3799:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3778:3:21"},"nodeType":"YulFunctionCall","src":"3778:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3763:3:21"},"nodeType":"YulFunctionCall","src":"3763:45:21"},{"kind":"number","nodeType":"YulLiteral","src":"3810:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3759:3:21"},"nodeType":"YulFunctionCall","src":"3759:55:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3751:4:21"}]}]},"name":"abi_encode_tuple_t_uint48_t_uint48_t_address_t_uint256_t_bytes_calldata_ptr__to_t_uint48_t_uint48_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3212:9:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"3223:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"3231:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"3239:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"3247:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3255:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3263:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3274:4:21","type":""}],"src":"3046:774:21"},{"body":{"nodeType":"YulBlock","src":"3895:185:21","statements":[{"body":{"nodeType":"YulBlock","src":"3941:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3950:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3953:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3943:6:21"},"nodeType":"YulFunctionCall","src":"3943:12:21"},"nodeType":"YulExpressionStatement","src":"3943:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3916:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"3925:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3912:3:21"},"nodeType":"YulFunctionCall","src":"3912:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"3937:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3908:3:21"},"nodeType":"YulFunctionCall","src":"3908:32:21"},"nodeType":"YulIf","src":"3905:52:21"},{"nodeType":"YulVariableDeclaration","src":"3966:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3992:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3979:12:21"},"nodeType":"YulFunctionCall","src":"3979:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"3970:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4044:5:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"4011:32:21"},"nodeType":"YulFunctionCall","src":"4011:39:21"},"nodeType":"YulExpressionStatement","src":"4011:39:21"},{"nodeType":"YulAssignment","src":"4059:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"4069:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4059:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3861:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3872:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3884:6:21","type":""}],"src":"3825:255:21"},{"body":{"nodeType":"YulBlock","src":"4186:76:21","statements":[{"nodeType":"YulAssignment","src":"4196:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4208:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4219:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4204:3:21"},"nodeType":"YulFunctionCall","src":"4204:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4196:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4238:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"4249:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4231:6:21"},"nodeType":"YulFunctionCall","src":"4231:25:21"},"nodeType":"YulExpressionStatement","src":"4231:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4155:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"4166:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4177:4:21","type":""}],"src":"4085:177:21"},{"body":{"nodeType":"YulBlock","src":"4405:498:21","statements":[{"body":{"nodeType":"YulBlock","src":"4451:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4460:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4463:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4453:6:21"},"nodeType":"YulFunctionCall","src":"4453:12:21"},"nodeType":"YulExpressionStatement","src":"4453:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4426:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"4435:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4422:3:21"},"nodeType":"YulFunctionCall","src":"4422:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"4447:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4418:3:21"},"nodeType":"YulFunctionCall","src":"4418:32:21"},"nodeType":"YulIf","src":"4415:52:21"},{"nodeType":"YulVariableDeclaration","src":"4476:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4502:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4489:12:21"},"nodeType":"YulFunctionCall","src":"4489:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4480:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4545:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4554:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4557:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4547:6:21"},"nodeType":"YulFunctionCall","src":"4547:12:21"},"nodeType":"YulExpressionStatement","src":"4547:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4534:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"4541:1:21","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4531:2:21"},"nodeType":"YulFunctionCall","src":"4531:12:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4524:6:21"},"nodeType":"YulFunctionCall","src":"4524:20:21"},"nodeType":"YulIf","src":"4521:40:21"},{"nodeType":"YulAssignment","src":"4570:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"4580:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4570:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"4594:46:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4625:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4636:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4621:3:21"},"nodeType":"YulFunctionCall","src":"4621:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4608:12:21"},"nodeType":"YulFunctionCall","src":"4608:32:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4598:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4683:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4692:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4695:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4685:6:21"},"nodeType":"YulFunctionCall","src":"4685:12:21"},"nodeType":"YulExpressionStatement","src":"4685:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4655:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"4663:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4652:2:21"},"nodeType":"YulFunctionCall","src":"4652:30:21"},"nodeType":"YulIf","src":"4649:50:21"},{"nodeType":"YulVariableDeclaration","src":"4708:84:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4764:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"4775:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4760:3:21"},"nodeType":"YulFunctionCall","src":"4760:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4784:7:21"}],"functionName":{"name":"abi_decode_bytes_calldata","nodeType":"YulIdentifier","src":"4734:25:21"},"nodeType":"YulFunctionCall","src":"4734:58:21"},"variables":[{"name":"value1_1","nodeType":"YulTypedName","src":"4712:8:21","type":""},{"name":"value2_1","nodeType":"YulTypedName","src":"4722:8:21","type":""}]},{"nodeType":"YulAssignment","src":"4801:18:21","value":{"name":"value1_1","nodeType":"YulIdentifier","src":"4811:8:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4801:6:21"}]},{"nodeType":"YulAssignment","src":"4828:18:21","value":{"name":"value2_1","nodeType":"YulIdentifier","src":"4838:8:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"4828:6:21"}]},{"nodeType":"YulAssignment","src":"4855:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4882:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4893:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4878:3:21"},"nodeType":"YulFunctionCall","src":"4878:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4865:12:21"},"nodeType":"YulFunctionCall","src":"4865:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"4855:6:21"}]}]},"name":"abi_decode_tuple_t_enum$_PostOpMode_$3595t_bytes_calldata_ptrt_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4347:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4358:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4370:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4378:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4386:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"4394:6:21","type":""}],"src":"4267:636:21"},{"body":{"nodeType":"YulBlock","src":"5029:125:21","statements":[{"nodeType":"YulAssignment","src":"5039:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5051:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5062:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5047:3:21"},"nodeType":"YulFunctionCall","src":"5047:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5039:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5081:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5096:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5104:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"5092:3:21"},"nodeType":"YulFunctionCall","src":"5092:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5074:6:21"},"nodeType":"YulFunctionCall","src":"5074:74:21"},"nodeType":"YulExpressionStatement","src":"5074:74:21"}]},"name":"abi_encode_tuple_t_contract$_IEntryPoint_$3568__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4998:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5009:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5020:4:21","type":""}],"src":"4908:246:21"},{"body":{"nodeType":"YulBlock","src":"5237:185:21","statements":[{"body":{"nodeType":"YulBlock","src":"5283:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5292:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5295:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5285:6:21"},"nodeType":"YulFunctionCall","src":"5285:12:21"},"nodeType":"YulExpressionStatement","src":"5285:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5258:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5267:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5254:3:21"},"nodeType":"YulFunctionCall","src":"5254:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5279:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5250:3:21"},"nodeType":"YulFunctionCall","src":"5250:32:21"},"nodeType":"YulIf","src":"5247:52:21"},{"nodeType":"YulVariableDeclaration","src":"5308:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5334:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5321:12:21"},"nodeType":"YulFunctionCall","src":"5321:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5312:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5386:5:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"5353:32:21"},"nodeType":"YulFunctionCall","src":"5353:39:21"},"nodeType":"YulExpressionStatement","src":"5353:39:21"},{"nodeType":"YulAssignment","src":"5401:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"5411:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5401:6:21"}]}]},"name":"abi_decode_tuple_t_address_payable","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5203:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5214:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5226:6:21","type":""}],"src":"5159:263:21"},{"body":{"nodeType":"YulBlock","src":"5564:367:21","statements":[{"body":{"nodeType":"YulBlock","src":"5610:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5619:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5622:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5612:6:21"},"nodeType":"YulFunctionCall","src":"5612:12:21"},"nodeType":"YulExpressionStatement","src":"5612:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5585:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"5594:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5581:3:21"},"nodeType":"YulFunctionCall","src":"5581:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"5606:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5577:3:21"},"nodeType":"YulFunctionCall","src":"5577:32:21"},"nodeType":"YulIf","src":"5574:52:21"},{"nodeType":"YulVariableDeclaration","src":"5635:37:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5662:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5649:12:21"},"nodeType":"YulFunctionCall","src":"5649:23:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5639:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"5715:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5724:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5727:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5717:6:21"},"nodeType":"YulFunctionCall","src":"5717:12:21"},"nodeType":"YulExpressionStatement","src":"5717:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5687:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"5695:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"5684:2:21"},"nodeType":"YulFunctionCall","src":"5684:30:21"},"nodeType":"YulIf","src":"5681:50:21"},{"nodeType":"YulAssignment","src":"5740:83:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5795:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"5806:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5791:3:21"},"nodeType":"YulFunctionCall","src":"5791:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5815:7:21"}],"functionName":{"name":"abi_decode_struct_UserOperation_calldata","nodeType":"YulIdentifier","src":"5750:40:21"},"nodeType":"YulFunctionCall","src":"5750:73:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5740:6:21"}]},{"nodeType":"YulAssignment","src":"5832:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5859:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5870:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5855:3:21"},"nodeType":"YulFunctionCall","src":"5855:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5842:12:21"},"nodeType":"YulFunctionCall","src":"5842:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5832:6:21"}]},{"nodeType":"YulAssignment","src":"5883:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5910:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5921:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5906:3:21"},"nodeType":"YulFunctionCall","src":"5906:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"5893:12:21"},"nodeType":"YulFunctionCall","src":"5893:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5883:6:21"}]}]},"name":"abi_decode_tuple_t_struct$_UserOperation_$3754_calldata_ptrt_bytes32t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5514:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5525:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5537:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5545:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5553:6:21","type":""}],"src":"5427:504:21"},{"body":{"nodeType":"YulBlock","src":"6002:184:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6012:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"6021:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"6016:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"6081:63:21","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6106:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"6111:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6102:3:21"},"nodeType":"YulFunctionCall","src":"6102:11:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"6125:3:21"},{"name":"i","nodeType":"YulIdentifier","src":"6130:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6121:3:21"},"nodeType":"YulFunctionCall","src":"6121:11:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6115:5:21"},"nodeType":"YulFunctionCall","src":"6115:18:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6095:6:21"},"nodeType":"YulFunctionCall","src":"6095:39:21"},"nodeType":"YulExpressionStatement","src":"6095:39:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6042:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"6045:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6039:2:21"},"nodeType":"YulFunctionCall","src":"6039:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"6053:19:21","statements":[{"nodeType":"YulAssignment","src":"6055:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"6064:1:21"},{"kind":"number","nodeType":"YulLiteral","src":"6067:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6060:3:21"},"nodeType":"YulFunctionCall","src":"6060:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"6055:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"6035:3:21","statements":[]},"src":"6031:113:21"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"6164:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6169:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6160:3:21"},"nodeType":"YulFunctionCall","src":"6160:16:21"},{"kind":"number","nodeType":"YulLiteral","src":"6178:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6153:6:21"},"nodeType":"YulFunctionCall","src":"6153:27:21"},"nodeType":"YulExpressionStatement","src":"6153:27:21"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"5980:3:21","type":""},{"name":"dst","nodeType":"YulTypedName","src":"5985:3:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"5990:6:21","type":""}],"src":"5936:250:21"},{"body":{"nodeType":"YulBlock","src":"6240:221:21","statements":[{"nodeType":"YulVariableDeclaration","src":"6250:26:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6270:5:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6264:5:21"},"nodeType":"YulFunctionCall","src":"6264:12:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"6254:6:21","type":""}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6292:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"6297:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6285:6:21"},"nodeType":"YulFunctionCall","src":"6285:19:21"},"nodeType":"YulExpressionStatement","src":"6285:19:21"},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6352:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"6359:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6348:3:21"},"nodeType":"YulFunctionCall","src":"6348:16:21"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6370:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"6375:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6366:3:21"},"nodeType":"YulFunctionCall","src":"6366:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"6382:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"6313:34:21"},"nodeType":"YulFunctionCall","src":"6313:76:21"},"nodeType":"YulExpressionStatement","src":"6313:76:21"},{"nodeType":"YulAssignment","src":"6398:57:21","value":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6413:3:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"6426:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6434:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6422:3:21"},"nodeType":"YulFunctionCall","src":"6422:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6443:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6439:3:21"},"nodeType":"YulFunctionCall","src":"6439:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6418:3:21"},"nodeType":"YulFunctionCall","src":"6418:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6409:3:21"},"nodeType":"YulFunctionCall","src":"6409:39:21"},{"kind":"number","nodeType":"YulLiteral","src":"6450:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6405:3:21"},"nodeType":"YulFunctionCall","src":"6405:50:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6398:3:21"}]}]},"name":"abi_encode_bytes","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6217:5:21","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6224:3:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6232:3:21","type":""}],"src":"6191:270:21"},{"body":{"nodeType":"YulBlock","src":"6613:141:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6630:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6641:2:21","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6623:6:21"},"nodeType":"YulFunctionCall","src":"6623:21:21"},"nodeType":"YulExpressionStatement","src":"6623:21:21"},{"nodeType":"YulAssignment","src":"6653:52:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6678:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6690:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6701:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6686:3:21"},"nodeType":"YulFunctionCall","src":"6686:18:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"6661:16:21"},"nodeType":"YulFunctionCall","src":"6661:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6653:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6725:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6736:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6721:3:21"},"nodeType":"YulFunctionCall","src":"6721:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"6741:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6714:6:21"},"nodeType":"YulFunctionCall","src":"6714:34:21"},"nodeType":"YulExpressionStatement","src":"6714:34:21"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6574:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6585:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6593:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6604:4:21","type":""}],"src":"6466:288:21"},{"body":{"nodeType":"YulBlock","src":"6858:93:21","statements":[{"nodeType":"YulAssignment","src":"6868:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6880:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6891:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6876:3:21"},"nodeType":"YulFunctionCall","src":"6876:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6868:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6910:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6925:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"6933:10:21","type":"","value":"0xffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6921:3:21"},"nodeType":"YulFunctionCall","src":"6921:23:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6903:6:21"},"nodeType":"YulFunctionCall","src":"6903:42:21"},"nodeType":"YulExpressionStatement","src":"6903:42:21"}]},"name":"abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6827:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6838:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6849:4:21","type":""}],"src":"6759:192:21"},{"body":{"nodeType":"YulBlock","src":"7101:168:21","statements":[{"nodeType":"YulAssignment","src":"7111:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7123:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7134:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7119:3:21"},"nodeType":"YulFunctionCall","src":"7119:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7111:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7153:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7168:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"7176:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7164:3:21"},"nodeType":"YulFunctionCall","src":"7164:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7146:6:21"},"nodeType":"YulFunctionCall","src":"7146:74:21"},"nodeType":"YulExpressionStatement","src":"7146:74:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7240:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7251:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7236:3:21"},"nodeType":"YulFunctionCall","src":"7236:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"7256:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7229:6:21"},"nodeType":"YulFunctionCall","src":"7229:34:21"},"nodeType":"YulExpressionStatement","src":"7229:34:21"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7062:9:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7073:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7081:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7092:4:21","type":""}],"src":"6956:313:21"},{"body":{"nodeType":"YulBlock","src":"7585:555:21","statements":[{"nodeType":"YulVariableDeclaration","src":"7595:13:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7605:3:21","type":"","value":"256"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"7599:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7624:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7635:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7617:6:21"},"nodeType":"YulFunctionCall","src":"7617:21:21"},"nodeType":"YulExpressionStatement","src":"7617:21:21"},{"nodeType":"YulAssignment","src":"7647:52:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7672:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7684:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"7695:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7680:3:21"},"nodeType":"YulFunctionCall","src":"7680:18:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"7655:16:21"},"nodeType":"YulFunctionCall","src":"7655:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7647:4:21"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7719:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7730:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7715:3:21"},"nodeType":"YulFunctionCall","src":"7715:18:21"},{"name":"value1","nodeType":"YulIdentifier","src":"7735:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7708:6:21"},"nodeType":"YulFunctionCall","src":"7708:34:21"},"nodeType":"YulExpressionStatement","src":"7708:34:21"},{"nodeType":"YulVariableDeclaration","src":"7751:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7761:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"7755:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7823:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7834:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7819:3:21"},"nodeType":"YulFunctionCall","src":"7819:18:21"},{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"7843:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"7851:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7839:3:21"},"nodeType":"YulFunctionCall","src":"7839:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7812:6:21"},"nodeType":"YulFunctionCall","src":"7812:43:21"},"nodeType":"YulExpressionStatement","src":"7812:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7875:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7886:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7871:3:21"},"nodeType":"YulFunctionCall","src":"7871:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"7891:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7864:6:21"},"nodeType":"YulFunctionCall","src":"7864:34:21"},"nodeType":"YulExpressionStatement","src":"7864:34:21"},{"nodeType":"YulVariableDeclaration","src":"7907:24:21","value":{"kind":"number","nodeType":"YulLiteral","src":"7917:14:21","type":"","value":"0xffffffffffff"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"7911:2:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7951:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"7962:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7947:3:21"},"nodeType":"YulFunctionCall","src":"7947:19:21"},{"arguments":[{"name":"value4","nodeType":"YulIdentifier","src":"7972:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"7980:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7968:3:21"},"nodeType":"YulFunctionCall","src":"7968:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7940:6:21"},"nodeType":"YulFunctionCall","src":"7940:44:21"},"nodeType":"YulExpressionStatement","src":"7940:44:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8004:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8015:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8000:3:21"},"nodeType":"YulFunctionCall","src":"8000:19:21"},{"arguments":[{"name":"value5","nodeType":"YulIdentifier","src":"8025:6:21"},{"name":"_3","nodeType":"YulIdentifier","src":"8033:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8021:3:21"},"nodeType":"YulFunctionCall","src":"8021:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7993:6:21"},"nodeType":"YulFunctionCall","src":"7993:44:21"},"nodeType":"YulExpressionStatement","src":"7993:44:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8057:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8068:3:21","type":"","value":"192"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8053:3:21"},"nodeType":"YulFunctionCall","src":"8053:19:21"},{"arguments":[{"name":"value6","nodeType":"YulIdentifier","src":"8078:6:21"},{"name":"_2","nodeType":"YulIdentifier","src":"8086:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8074:3:21"},"nodeType":"YulFunctionCall","src":"8074:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8046:6:21"},"nodeType":"YulFunctionCall","src":"8046:44:21"},"nodeType":"YulExpressionStatement","src":"8046:44:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8110:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8121:3:21","type":"","value":"224"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8106:3:21"},"nodeType":"YulFunctionCall","src":"8106:19:21"},{"name":"value7","nodeType":"YulIdentifier","src":"8127:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8099:6:21"},"nodeType":"YulFunctionCall","src":"8099:35:21"},"nodeType":"YulExpressionStatement","src":"8099:35:21"}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_uint256_t_address_t_uint256_t_uint48_t_uint48_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint256_t_address_t_uint256_t_uint48_t_uint48_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7498:9:21","type":""},{"name":"value7","nodeType":"YulTypedName","src":"7509:6:21","type":""},{"name":"value6","nodeType":"YulTypedName","src":"7517:6:21","type":""},{"name":"value5","nodeType":"YulTypedName","src":"7525:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"7533:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"7541:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"7549:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"7557:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7565:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7576:4:21","type":""}],"src":"7274:866:21"},{"body":{"nodeType":"YulBlock","src":"8275:201:21","statements":[{"body":{"nodeType":"YulBlock","src":"8313:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8322:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8325:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8315:6:21"},"nodeType":"YulFunctionCall","src":"8315:12:21"},"nodeType":"YulExpressionStatement","src":"8315:12:21"}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"8291:10:21"},{"name":"endIndex","nodeType":"YulIdentifier","src":"8303:8:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8288:2:21"},"nodeType":"YulFunctionCall","src":"8288:24:21"},"nodeType":"YulIf","src":"8285:44:21"},{"body":{"nodeType":"YulBlock","src":"8362:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8371:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8374:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8364:6:21"},"nodeType":"YulFunctionCall","src":"8364:12:21"},"nodeType":"YulExpressionStatement","src":"8364:12:21"}]},"condition":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"8344:8:21"},{"name":"length","nodeType":"YulIdentifier","src":"8354:6:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8341:2:21"},"nodeType":"YulFunctionCall","src":"8341:20:21"},"nodeType":"YulIf","src":"8338:40:21"},{"nodeType":"YulAssignment","src":"8387:36:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8404:6:21"},{"name":"startIndex","nodeType":"YulIdentifier","src":"8412:10:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8400:3:21"},"nodeType":"YulFunctionCall","src":"8400:23:21"},"variableNames":[{"name":"offsetOut","nodeType":"YulIdentifier","src":"8387:9:21"}]},{"nodeType":"YulAssignment","src":"8432:38:21","value":{"arguments":[{"name":"endIndex","nodeType":"YulIdentifier","src":"8449:8:21"},{"name":"startIndex","nodeType":"YulIdentifier","src":"8459:10:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8445:3:21"},"nodeType":"YulFunctionCall","src":"8445:25:21"},"variableNames":[{"name":"lengthOut","nodeType":"YulIdentifier","src":"8432:9:21"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8209:6:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"8217:6:21","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"8225:10:21","type":""},{"name":"endIndex","nodeType":"YulTypedName","src":"8237:8:21","type":""}],"returnVariables":[{"name":"offsetOut","nodeType":"YulTypedName","src":"8250:9:21","type":""},{"name":"lengthOut","nodeType":"YulTypedName","src":"8261:9:21","type":""}],"src":"8145:331:21"},{"body":{"nodeType":"YulBlock","src":"8608:349:21","statements":[{"body":{"nodeType":"YulBlock","src":"8655:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8664:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8667:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8657:6:21"},"nodeType":"YulFunctionCall","src":"8657:12:21"},"nodeType":"YulExpressionStatement","src":"8657:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8629:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"8638:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8625:3:21"},"nodeType":"YulFunctionCall","src":"8625:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"8650:3:21","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8621:3:21"},"nodeType":"YulFunctionCall","src":"8621:33:21"},"nodeType":"YulIf","src":"8618:53:21"},{"nodeType":"YulAssignment","src":"8680:38:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8708:9:21"}],"functionName":{"name":"abi_decode_uint48","nodeType":"YulIdentifier","src":"8690:17:21"},"nodeType":"YulFunctionCall","src":"8690:28:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"8680:6:21"}]},{"nodeType":"YulAssignment","src":"8727:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8759:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8770:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8755:3:21"},"nodeType":"YulFunctionCall","src":"8755:18:21"}],"functionName":{"name":"abi_decode_uint48","nodeType":"YulIdentifier","src":"8737:17:21"},"nodeType":"YulFunctionCall","src":"8737:37:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"8727:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"8783:45:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8813:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8824:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8809:3:21"},"nodeType":"YulFunctionCall","src":"8809:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8796:12:21"},"nodeType":"YulFunctionCall","src":"8796:32:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8787:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8870:5:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"8837:32:21"},"nodeType":"YulFunctionCall","src":"8837:39:21"},"nodeType":"YulExpressionStatement","src":"8837:39:21"},{"nodeType":"YulAssignment","src":"8885:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"8895:5:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"8885:6:21"}]},{"nodeType":"YulAssignment","src":"8909:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8936:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"8947:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8932:3:21"},"nodeType":"YulFunctionCall","src":"8932:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8919:12:21"},"nodeType":"YulFunctionCall","src":"8919:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"8909:6:21"}]}]},"name":"abi_decode_tuple_t_uint48t_uint48t_address_payablet_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8550:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8561:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8573:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8581:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8589:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"8597:6:21","type":""}],"src":"8481:476:21"},{"body":{"nodeType":"YulBlock","src":"9079:125:21","statements":[{"nodeType":"YulAssignment","src":"9089:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9101:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9112:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9097:3:21"},"nodeType":"YulFunctionCall","src":"9097:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9089:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9131:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"9146:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"9154:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"9142:3:21"},"nodeType":"YulFunctionCall","src":"9142:55:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9124:6:21"},"nodeType":"YulFunctionCall","src":"9124:74:21"},"nodeType":"YulExpressionStatement","src":"9124:74:21"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9048:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"9059:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9070:4:21","type":""}],"src":"8962:242:21"},{"body":{"nodeType":"YulBlock","src":"9290:103:21","statements":[{"body":{"nodeType":"YulBlock","src":"9336:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9345:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"9348:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9338:6:21"},"nodeType":"YulFunctionCall","src":"9338:12:21"},"nodeType":"YulExpressionStatement","src":"9338:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9311:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"9320:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9307:3:21"},"nodeType":"YulFunctionCall","src":"9307:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"9332:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9303:3:21"},"nodeType":"YulFunctionCall","src":"9303:32:21"},"nodeType":"YulIf","src":"9300:52:21"},{"nodeType":"YulAssignment","src":"9361:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9377:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9371:5:21"},"nodeType":"YulFunctionCall","src":"9371:16:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9361:6:21"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9256:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9267:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9279:6:21","type":""}],"src":"9209:184:21"},{"body":{"nodeType":"YulBlock","src":"9572:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9589:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9600:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9582:6:21"},"nodeType":"YulFunctionCall","src":"9582:21:21"},"nodeType":"YulExpressionStatement","src":"9582:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9623:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9634:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9619:3:21"},"nodeType":"YulFunctionCall","src":"9619:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"9639:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9612:6:21"},"nodeType":"YulFunctionCall","src":"9612:30:21"},"nodeType":"YulExpressionStatement","src":"9612:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9662:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9673:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9658:3:21"},"nodeType":"YulFunctionCall","src":"9658:18:21"},{"hexValue":"4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061","kind":"string","nodeType":"YulLiteral","src":"9678:34:21","type":"","value":"Ownable: new owner is the zero a"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9651:6:21"},"nodeType":"YulFunctionCall","src":"9651:62:21"},"nodeType":"YulExpressionStatement","src":"9651:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9733:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9744:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9729:3:21"},"nodeType":"YulFunctionCall","src":"9729:18:21"},{"hexValue":"646472657373","kind":"string","nodeType":"YulLiteral","src":"9749:8:21","type":"","value":"ddress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9722:6:21"},"nodeType":"YulFunctionCall","src":"9722:36:21"},"nodeType":"YulExpressionStatement","src":"9722:36:21"},{"nodeType":"YulAssignment","src":"9767:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9779:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"9790:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9775:3:21"},"nodeType":"YulFunctionCall","src":"9775:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"9767:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9549:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9563:4:21","type":""}],"src":"9398:402:21"},{"body":{"nodeType":"YulBlock","src":"9979:182:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9996:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10007:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9989:6:21"},"nodeType":"YulFunctionCall","src":"9989:21:21"},"nodeType":"YulExpressionStatement","src":"9989:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10030:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10041:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10026:3:21"},"nodeType":"YulFunctionCall","src":"10026:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10046:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10019:6:21"},"nodeType":"YulFunctionCall","src":"10019:30:21"},"nodeType":"YulExpressionStatement","src":"10019:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10069:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10080:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10065:3:21"},"nodeType":"YulFunctionCall","src":"10065:18:21"},{"hexValue":"4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572","kind":"string","nodeType":"YulLiteral","src":"10085:34:21","type":"","value":"Ownable: caller is not the owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10058:6:21"},"nodeType":"YulFunctionCall","src":"10058:62:21"},"nodeType":"YulExpressionStatement","src":"10058:62:21"},{"nodeType":"YulAssignment","src":"10129:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10141:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10152:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10137:3:21"},"nodeType":"YulFunctionCall","src":"10137:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"10129:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9956:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"9970:4:21","type":""}],"src":"9805:356:21"},{"body":{"nodeType":"YulBlock","src":"10260:427:21","statements":[{"nodeType":"YulVariableDeclaration","src":"10270:51:21","value":{"arguments":[{"name":"ptr_to_tail","nodeType":"YulIdentifier","src":"10309:11:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10296:12:21"},"nodeType":"YulFunctionCall","src":"10296:25:21"},"variables":[{"name":"rel_offset_of_tail","nodeType":"YulTypedName","src":"10274:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"10410:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10419:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10422:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10412:6:21"},"nodeType":"YulFunctionCall","src":"10412:12:21"},"nodeType":"YulExpressionStatement","src":"10412:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10344:18:21"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10372:12:21"},"nodeType":"YulFunctionCall","src":"10372:14:21"},{"name":"base_ref","nodeType":"YulIdentifier","src":"10388:8:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10368:3:21"},"nodeType":"YulFunctionCall","src":"10368:29:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10403:2:21","type":"","value":"30"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10399:3:21"},"nodeType":"YulFunctionCall","src":"10399:7:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10364:3:21"},"nodeType":"YulFunctionCall","src":"10364:43:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10340:3:21"},"nodeType":"YulFunctionCall","src":"10340:68:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10333:6:21"},"nodeType":"YulFunctionCall","src":"10333:76:21"},"nodeType":"YulIf","src":"10330:96:21"},{"nodeType":"YulVariableDeclaration","src":"10435:47:21","value":{"arguments":[{"name":"base_ref","nodeType":"YulIdentifier","src":"10453:8:21"},{"name":"rel_offset_of_tail","nodeType":"YulIdentifier","src":"10463:18:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10449:3:21"},"nodeType":"YulFunctionCall","src":"10449:33:21"},"variables":[{"name":"addr_1","nodeType":"YulTypedName","src":"10439:6:21","type":""}]},{"nodeType":"YulAssignment","src":"10491:30:21","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"10514:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"10501:12:21"},"nodeType":"YulFunctionCall","src":"10501:20:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10491:6:21"}]},{"body":{"nodeType":"YulBlock","src":"10564:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10573:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10576:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10566:6:21"},"nodeType":"YulFunctionCall","src":"10566:12:21"},"nodeType":"YulExpressionStatement","src":"10566:12:21"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10536:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10544:18:21","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"10533:2:21"},"nodeType":"YulFunctionCall","src":"10533:30:21"},"nodeType":"YulIf","src":"10530:50:21"},{"nodeType":"YulAssignment","src":"10589:25:21","value":{"arguments":[{"name":"addr_1","nodeType":"YulIdentifier","src":"10601:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"10609:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10597:3:21"},"nodeType":"YulFunctionCall","src":"10597:17:21"},"variableNames":[{"name":"addr","nodeType":"YulIdentifier","src":"10589:4:21"}]},{"body":{"nodeType":"YulBlock","src":"10665:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10674:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10677:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10667:6:21"},"nodeType":"YulFunctionCall","src":"10667:12:21"},"nodeType":"YulExpressionStatement","src":"10667:12:21"}]},"condition":{"arguments":[{"name":"addr","nodeType":"YulIdentifier","src":"10630:4:21"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"10640:12:21"},"nodeType":"YulFunctionCall","src":"10640:14:21"},{"name":"length","nodeType":"YulIdentifier","src":"10656:6:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10636:3:21"},"nodeType":"YulFunctionCall","src":"10636:27:21"}],"functionName":{"name":"sgt","nodeType":"YulIdentifier","src":"10626:3:21"},"nodeType":"YulFunctionCall","src":"10626:38:21"},"nodeType":"YulIf","src":"10623:58:21"}]},"name":"access_calldata_tail_t_bytes_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nodeType":"YulTypedName","src":"10217:8:21","type":""},{"name":"ptr_to_tail","nodeType":"YulTypedName","src":"10227:11:21","type":""}],"returnVariables":[{"name":"addr","nodeType":"YulTypedName","src":"10243:4:21","type":""},{"name":"length","nodeType":"YulTypedName","src":"10249:6:21","type":""}],"src":"10166:521:21"},{"body":{"nodeType":"YulBlock","src":"10866:171:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10883:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10894:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10876:6:21"},"nodeType":"YulFunctionCall","src":"10876:21:21"},"nodeType":"YulExpressionStatement","src":"10876:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10917:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10928:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10913:3:21"},"nodeType":"YulFunctionCall","src":"10913:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"10933:2:21","type":"","value":"21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10906:6:21"},"nodeType":"YulFunctionCall","src":"10906:30:21"},"nodeType":"YulExpressionStatement","src":"10906:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10956:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"10967:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10952:3:21"},"nodeType":"YulFunctionCall","src":"10952:18:21"},{"hexValue":"53656e646572206e6f7420456e747279506f696e74","kind":"string","nodeType":"YulLiteral","src":"10972:23:21","type":"","value":"Sender not EntryPoint"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10945:6:21"},"nodeType":"YulFunctionCall","src":"10945:51:21"},"nodeType":"YulExpressionStatement","src":"10945:51:21"},{"nodeType":"YulAssignment","src":"11005:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11017:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11028:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11013:3:21"},"nodeType":"YulFunctionCall","src":"11013:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11005:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4f1183fece38266d89bbd94d1c93e02d713970166951c4c8f2c10a21e7cddae9__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10843:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"10857:4:21","type":""}],"src":"10692:345:21"},{"body":{"nodeType":"YulBlock","src":"11202:472:21","statements":[{"body":{"nodeType":"YulBlock","src":"11249:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11258:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11261:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11251:6:21"},"nodeType":"YulFunctionCall","src":"11251:12:21"},"nodeType":"YulExpressionStatement","src":"11251:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"11223:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"11232:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11219:3:21"},"nodeType":"YulFunctionCall","src":"11219:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"11244:3:21","type":"","value":"160"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"11215:3:21"},"nodeType":"YulFunctionCall","src":"11215:33:21"},"nodeType":"YulIf","src":"11212:53:21"},{"nodeType":"YulVariableDeclaration","src":"11274:36:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11300:9:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11287:12:21"},"nodeType":"YulFunctionCall","src":"11287:23:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"11278:5:21","type":""}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11352:5:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"11319:32:21"},"nodeType":"YulFunctionCall","src":"11319:39:21"},"nodeType":"YulExpressionStatement","src":"11319:39:21"},{"nodeType":"YulAssignment","src":"11367:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"11377:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"11367:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"11391:47:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11423:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11434:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11419:3:21"},"nodeType":"YulFunctionCall","src":"11419:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11406:12:21"},"nodeType":"YulFunctionCall","src":"11406:32:21"},"variables":[{"name":"value_1","nodeType":"YulTypedName","src":"11395:7:21","type":""}]},{"expression":{"arguments":[{"name":"value_1","nodeType":"YulIdentifier","src":"11480:7:21"}],"functionName":{"name":"validator_revert_address_payable","nodeType":"YulIdentifier","src":"11447:32:21"},"nodeType":"YulFunctionCall","src":"11447:41:21"},"nodeType":"YulExpressionStatement","src":"11447:41:21"},{"nodeType":"YulAssignment","src":"11497:17:21","value":{"name":"value_1","nodeType":"YulIdentifier","src":"11507:7:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"11497:6:21"}]},{"nodeType":"YulAssignment","src":"11523:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11550:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11561:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11546:3:21"},"nodeType":"YulFunctionCall","src":"11546:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11533:12:21"},"nodeType":"YulFunctionCall","src":"11533:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"11523:6:21"}]},{"nodeType":"YulAssignment","src":"11574:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11601:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11612:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11597:3:21"},"nodeType":"YulFunctionCall","src":"11597:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11584:12:21"},"nodeType":"YulFunctionCall","src":"11584:32:21"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"11574:6:21"}]},{"nodeType":"YulAssignment","src":"11625:43:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11652:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"11663:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11648:3:21"},"nodeType":"YulFunctionCall","src":"11648:19:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"11635:12:21"},"nodeType":"YulFunctionCall","src":"11635:33:21"},"variableNames":[{"name":"value4","nodeType":"YulIdentifier","src":"11625:6:21"}]}]},"name":"abi_decode_tuple_t_address_payablet_contract$_IERC20_$777t_uint256t_uint256t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11136:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"11147:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"11159:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"11167:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"11175:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"11183:6:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"11191:6:21","type":""}],"src":"11042:632:21"},{"body":{"nodeType":"YulBlock","src":"11711:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11728:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11735:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"11740:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"11731:3:21"},"nodeType":"YulFunctionCall","src":"11731:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11721:6:21"},"nodeType":"YulFunctionCall","src":"11721:31:21"},"nodeType":"YulExpressionStatement","src":"11721:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11768:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"11771:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11761:6:21"},"nodeType":"YulFunctionCall","src":"11761:15:21"},"nodeType":"YulExpressionStatement","src":"11761:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"11792:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"11795:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"11785:6:21"},"nodeType":"YulFunctionCall","src":"11785:15:21"},"nodeType":"YulExpressionStatement","src":"11785:15:21"}]},"name":"panic_error_0x11","nodeType":"YulFunctionDefinition","src":"11679:127:21"},{"body":{"nodeType":"YulBlock","src":"11863:116:21","statements":[{"nodeType":"YulAssignment","src":"11873:20:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11888:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"11891:1:21"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"11884:3:21"},"nodeType":"YulFunctionCall","src":"11884:9:21"},"variableNames":[{"name":"product","nodeType":"YulIdentifier","src":"11873:7:21"}]},{"body":{"nodeType":"YulBlock","src":"11951:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"11953:16:21"},"nodeType":"YulFunctionCall","src":"11953:18:21"},"nodeType":"YulExpressionStatement","src":"11953:18:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"11922:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11915:6:21"},"nodeType":"YulFunctionCall","src":"11915:9:21"},{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"11929:1:21"},{"arguments":[{"name":"product","nodeType":"YulIdentifier","src":"11936:7:21"},{"name":"x","nodeType":"YulIdentifier","src":"11945:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"11932:3:21"},"nodeType":"YulFunctionCall","src":"11932:15:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"11926:2:21"},"nodeType":"YulFunctionCall","src":"11926:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"11912:2:21"},"nodeType":"YulFunctionCall","src":"11912:37:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"11905:6:21"},"nodeType":"YulFunctionCall","src":"11905:45:21"},"nodeType":"YulIf","src":"11902:71:21"}]},"name":"checked_mul_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"11842:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"11845:1:21","type":""}],"returnVariables":[{"name":"product","nodeType":"YulTypedName","src":"11851:7:21","type":""}],"src":"11811:168:21"},{"body":{"nodeType":"YulBlock","src":"12032:77:21","statements":[{"nodeType":"YulAssignment","src":"12042:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12053:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"12056:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12049:3:21"},"nodeType":"YulFunctionCall","src":"12049:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"12042:3:21"}]},{"body":{"nodeType":"YulBlock","src":"12081:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12083:16:21"},"nodeType":"YulFunctionCall","src":"12083:18:21"},"nodeType":"YulExpressionStatement","src":"12083:18:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12073:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"12076:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"12070:2:21"},"nodeType":"YulFunctionCall","src":"12070:10:21"},"nodeType":"YulIf","src":"12067:36:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12015:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"12018:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"12024:3:21","type":""}],"src":"11984:125:21"},{"body":{"nodeType":"YulBlock","src":"12160:171:21","statements":[{"body":{"nodeType":"YulBlock","src":"12191:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12212:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12219:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12224:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12215:3:21"},"nodeType":"YulFunctionCall","src":"12215:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12205:6:21"},"nodeType":"YulFunctionCall","src":"12205:31:21"},"nodeType":"YulExpressionStatement","src":"12205:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12256:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12259:4:21","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12249:6:21"},"nodeType":"YulFunctionCall","src":"12249:15:21"},"nodeType":"YulExpressionStatement","src":"12249:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12284:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12287:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12277:6:21"},"nodeType":"YulFunctionCall","src":"12277:15:21"},"nodeType":"YulExpressionStatement","src":"12277:15:21"}]},"condition":{"arguments":[{"name":"y","nodeType":"YulIdentifier","src":"12180:1:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"12173:6:21"},"nodeType":"YulFunctionCall","src":"12173:9:21"},"nodeType":"YulIf","src":"12170:132:21"},{"nodeType":"YulAssignment","src":"12311:14:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"12320:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"12323:1:21"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"12316:3:21"},"nodeType":"YulFunctionCall","src":"12316:9:21"},"variableNames":[{"name":"r","nodeType":"YulIdentifier","src":"12311:1:21"}]}]},"name":"checked_div_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"12145:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"12148:1:21","type":""}],"returnVariables":[{"name":"r","nodeType":"YulTypedName","src":"12154:1:21","type":""}],"src":"12114:217:21"},{"body":{"nodeType":"YulBlock","src":"12368:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12385:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12392:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"12397:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"12388:3:21"},"nodeType":"YulFunctionCall","src":"12388:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12378:6:21"},"nodeType":"YulFunctionCall","src":"12378:31:21"},"nodeType":"YulExpressionStatement","src":"12378:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12425:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"12428:4:21","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12418:6:21"},"nodeType":"YulFunctionCall","src":"12418:15:21"},"nodeType":"YulExpressionStatement","src":"12418:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12449:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"12452:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"12442:6:21"},"nodeType":"YulFunctionCall","src":"12442:15:21"},"nodeType":"YulExpressionStatement","src":"12442:15:21"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"12336:127:21"},{"body":{"nodeType":"YulBlock","src":"12642:254:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12659:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12670:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12652:6:21"},"nodeType":"YulFunctionCall","src":"12652:21:21"},"nodeType":"YulExpressionStatement","src":"12652:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12693:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12704:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12689:3:21"},"nodeType":"YulFunctionCall","src":"12689:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"12709:2:21","type":"","value":"64"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12682:6:21"},"nodeType":"YulFunctionCall","src":"12682:30:21"},"nodeType":"YulExpressionStatement","src":"12682:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12732:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12743:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12728:3:21"},"nodeType":"YulFunctionCall","src":"12728:18:21"},{"hexValue":"566572696679696e675061796d61737465723a20696e76616c6964207369676e","kind":"string","nodeType":"YulLiteral","src":"12748:34:21","type":"","value":"VerifyingPaymaster: invalid sign"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12721:6:21"},"nodeType":"YulFunctionCall","src":"12721:62:21"},"nodeType":"YulExpressionStatement","src":"12721:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12803:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12814:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12799:3:21"},"nodeType":"YulFunctionCall","src":"12799:18:21"},{"hexValue":"6174757265206c656e67746820696e207061796d6173746572416e6444617461","kind":"string","nodeType":"YulLiteral","src":"12819:34:21","type":"","value":"ature length in paymasterAndData"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12792:6:21"},"nodeType":"YulFunctionCall","src":"12792:62:21"},"nodeType":"YulExpressionStatement","src":"12792:62:21"},{"nodeType":"YulAssignment","src":"12863:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12875:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"12886:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12871:3:21"},"nodeType":"YulFunctionCall","src":"12871:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12863:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c0ccd72718b49b9af08aac30156bc47d10e177349cbe5dac0a36b471195929a7__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12619:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12633:4:21","type":""}],"src":"12468:428:21"},{"body":{"nodeType":"YulBlock","src":"12948:88:21","statements":[{"body":{"nodeType":"YulBlock","src":"12979:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nodeType":"YulIdentifier","src":"12981:16:21"},"nodeType":"YulFunctionCall","src":"12981:18:21"},"nodeType":"YulExpressionStatement","src":"12981:18:21"}]},"condition":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12964:5:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"12975:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"12971:3:21"},"nodeType":"YulFunctionCall","src":"12971:6:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"12961:2:21"},"nodeType":"YulFunctionCall","src":"12961:17:21"},"nodeType":"YulIf","src":"12958:43:21"},{"nodeType":"YulAssignment","src":"13010:20:21","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13021:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"13028:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13017:3:21"},"nodeType":"YulFunctionCall","src":"13017:13:21"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"13010:3:21"}]}]},"name":"increment_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12930:5:21","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"12940:3:21","type":""}],"src":"12901:135:21"},{"body":{"nodeType":"YulBlock","src":"13254:329:21","statements":[{"nodeType":"YulAssignment","src":"13264:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13276:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13287:3:21","type":"","value":"160"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13272:3:21"},"nodeType":"YulFunctionCall","src":"13272:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13264:4:21"}]},{"nodeType":"YulVariableDeclaration","src":"13300:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"13310:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13304:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13368:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13383:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"13391:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13379:3:21"},"nodeType":"YulFunctionCall","src":"13379:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13361:6:21"},"nodeType":"YulFunctionCall","src":"13361:34:21"},"nodeType":"YulExpressionStatement","src":"13361:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13415:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13426:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13411:3:21"},"nodeType":"YulFunctionCall","src":"13411:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13435:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"13443:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13431:3:21"},"nodeType":"YulFunctionCall","src":"13431:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13404:6:21"},"nodeType":"YulFunctionCall","src":"13404:43:21"},"nodeType":"YulExpressionStatement","src":"13404:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13467:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13478:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13463:3:21"},"nodeType":"YulFunctionCall","src":"13463:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"13483:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13456:6:21"},"nodeType":"YulFunctionCall","src":"13456:34:21"},"nodeType":"YulExpressionStatement","src":"13456:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13510:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13521:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13506:3:21"},"nodeType":"YulFunctionCall","src":"13506:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"13526:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13499:6:21"},"nodeType":"YulFunctionCall","src":"13499:34:21"},"nodeType":"YulExpressionStatement","src":"13499:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13553:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13564:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13549:3:21"},"nodeType":"YulFunctionCall","src":"13549:19:21"},{"name":"value4","nodeType":"YulIdentifier","src":"13570:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13542:6:21"},"nodeType":"YulFunctionCall","src":"13542:35:21"},"nodeType":"YulExpressionStatement","src":"13542:35:21"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13191:9:21","type":""},{"name":"value4","nodeType":"YulTypedName","src":"13202:6:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"13210:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13218:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13226:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13234:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13245:4:21","type":""}],"src":"13041:542:21"},{"body":{"nodeType":"YulBlock","src":"13745:241:21","statements":[{"nodeType":"YulAssignment","src":"13755:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13767:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13778:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13763:3:21"},"nodeType":"YulFunctionCall","src":"13763:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13755:4:21"}]},{"nodeType":"YulVariableDeclaration","src":"13790:52:21","value":{"kind":"number","nodeType":"YulLiteral","src":"13800:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"13794:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13858:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"13873:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"13881:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13869:3:21"},"nodeType":"YulFunctionCall","src":"13869:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13851:6:21"},"nodeType":"YulFunctionCall","src":"13851:34:21"},"nodeType":"YulExpressionStatement","src":"13851:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13905:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13916:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13901:3:21"},"nodeType":"YulFunctionCall","src":"13901:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"13925:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"13933:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"13921:3:21"},"nodeType":"YulFunctionCall","src":"13921:15:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13894:6:21"},"nodeType":"YulFunctionCall","src":"13894:43:21"},"nodeType":"YulExpressionStatement","src":"13894:43:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13957:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"13968:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13953:3:21"},"nodeType":"YulFunctionCall","src":"13953:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"13973:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13946:6:21"},"nodeType":"YulFunctionCall","src":"13946:34:21"},"nodeType":"YulExpressionStatement","src":"13946:34:21"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13698:9:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"13709:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"13717:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"13725:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13736:4:21","type":""}],"src":"13588:398:21"},{"body":{"nodeType":"YulBlock","src":"14211:160:21","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14228:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"14233:66:21","type":"","value":"0x19457468657265756d205369676e6564204d6573736167653a0a333200000000"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14221:6:21"},"nodeType":"YulFunctionCall","src":"14221:79:21"},"nodeType":"YulExpressionStatement","src":"14221:79:21"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14320:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"14325:2:21","type":"","value":"28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14316:3:21"},"nodeType":"YulFunctionCall","src":"14316:12:21"},{"name":"value0","nodeType":"YulIdentifier","src":"14330:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14309:6:21"},"nodeType":"YulFunctionCall","src":"14309:28:21"},"nodeType":"YulExpressionStatement","src":"14309:28:21"},{"nodeType":"YulAssignment","src":"14346:19:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14357:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"14362:2:21","type":"","value":"60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14353:3:21"},"nodeType":"YulFunctionCall","src":"14353:12:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14346:3:21"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14187:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14192:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14203:3:21","type":""}],"src":"13991:380:21"},{"body":{"nodeType":"YulBlock","src":"14454:199:21","statements":[{"body":{"nodeType":"YulBlock","src":"14500:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14509:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14512:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14502:6:21"},"nodeType":"YulFunctionCall","src":"14502:12:21"},"nodeType":"YulExpressionStatement","src":"14502:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"14475:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"14484:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14471:3:21"},"nodeType":"YulFunctionCall","src":"14471:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"14496:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"14467:3:21"},"nodeType":"YulFunctionCall","src":"14467:32:21"},"nodeType":"YulIf","src":"14464:52:21"},{"nodeType":"YulVariableDeclaration","src":"14525:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14544:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14538:5:21"},"nodeType":"YulFunctionCall","src":"14538:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"14529:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"14607:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14616:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"14619:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14609:6:21"},"nodeType":"YulFunctionCall","src":"14609:12:21"},"nodeType":"YulExpressionStatement","src":"14609:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14576:5:21"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14597:5:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14590:6:21"},"nodeType":"YulFunctionCall","src":"14590:13:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14583:6:21"},"nodeType":"YulFunctionCall","src":"14583:21:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"14573:2:21"},"nodeType":"YulFunctionCall","src":"14573:32:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"14566:6:21"},"nodeType":"YulFunctionCall","src":"14566:40:21"},"nodeType":"YulIf","src":"14563:60:21"},{"nodeType":"YulAssignment","src":"14632:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"14642:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"14632:6:21"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14420:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"14431:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"14443:6:21","type":""}],"src":"14376:277:21"},{"body":{"nodeType":"YulBlock","src":"14832:232:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14849:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14860:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14842:6:21"},"nodeType":"YulFunctionCall","src":"14842:21:21"},"nodeType":"YulExpressionStatement","src":"14842:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14883:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14894:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14879:3:21"},"nodeType":"YulFunctionCall","src":"14879:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"14899:2:21","type":"","value":"42"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14872:6:21"},"nodeType":"YulFunctionCall","src":"14872:30:21"},"nodeType":"YulExpressionStatement","src":"14872:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14922:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"14933:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14918:3:21"},"nodeType":"YulFunctionCall","src":"14918:18:21"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nodeType":"YulLiteral","src":"14938:34:21","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14911:6:21"},"nodeType":"YulFunctionCall","src":"14911:62:21"},"nodeType":"YulExpressionStatement","src":"14911:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14993:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15004:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14989:3:21"},"nodeType":"YulFunctionCall","src":"14989:18:21"},{"hexValue":"6f742073756363656564","kind":"string","nodeType":"YulLiteral","src":"15009:12:21","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14982:6:21"},"nodeType":"YulFunctionCall","src":"14982:40:21"},"nodeType":"YulExpressionStatement","src":"14982:40:21"},{"nodeType":"YulAssignment","src":"15031:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15043:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15054:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15039:3:21"},"nodeType":"YulFunctionCall","src":"15039:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15031:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14809:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14823:4:21","type":""}],"src":"14658:406:21"},{"body":{"nodeType":"YulBlock","src":"15243:174:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15260:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15271:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15253:6:21"},"nodeType":"YulFunctionCall","src":"15253:21:21"},"nodeType":"YulExpressionStatement","src":"15253:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15294:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15305:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15290:3:21"},"nodeType":"YulFunctionCall","src":"15290:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15310:2:21","type":"","value":"24"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15283:6:21"},"nodeType":"YulFunctionCall","src":"15283:30:21"},"nodeType":"YulExpressionStatement","src":"15283:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15333:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15344:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15329:3:21"},"nodeType":"YulFunctionCall","src":"15329:18:21"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nodeType":"YulLiteral","src":"15349:26:21","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15322:6:21"},"nodeType":"YulFunctionCall","src":"15322:54:21"},"nodeType":"YulExpressionStatement","src":"15322:54:21"},{"nodeType":"YulAssignment","src":"15385:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15397:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15408:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15393:3:21"},"nodeType":"YulFunctionCall","src":"15393:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15385:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15220:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15234:4:21","type":""}],"src":"15069:348:21"},{"body":{"nodeType":"YulBlock","src":"15596:181:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15613:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15624:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15606:6:21"},"nodeType":"YulFunctionCall","src":"15606:21:21"},"nodeType":"YulExpressionStatement","src":"15606:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15647:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15658:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15643:3:21"},"nodeType":"YulFunctionCall","src":"15643:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"15663:2:21","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15636:6:21"},"nodeType":"YulFunctionCall","src":"15636:30:21"},"nodeType":"YulExpressionStatement","src":"15636:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15686:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15697:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15682:3:21"},"nodeType":"YulFunctionCall","src":"15682:18:21"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nodeType":"YulLiteral","src":"15702:33:21","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15675:6:21"},"nodeType":"YulFunctionCall","src":"15675:61:21"},"nodeType":"YulExpressionStatement","src":"15675:61:21"},{"nodeType":"YulAssignment","src":"15745:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15757:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15768:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15753:3:21"},"nodeType":"YulFunctionCall","src":"15753:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15745:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15573:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15587:4:21","type":""}],"src":"15422:355:21"},{"body":{"nodeType":"YulBlock","src":"15956:224:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15973:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"15984:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15966:6:21"},"nodeType":"YulFunctionCall","src":"15966:21:21"},"nodeType":"YulExpressionStatement","src":"15966:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16007:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16018:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16003:3:21"},"nodeType":"YulFunctionCall","src":"16003:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16023:2:21","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15996:6:21"},"nodeType":"YulFunctionCall","src":"15996:30:21"},"nodeType":"YulExpressionStatement","src":"15996:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16046:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16057:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16042:3:21"},"nodeType":"YulFunctionCall","src":"16042:18:21"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nodeType":"YulLiteral","src":"16062:34:21","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16035:6:21"},"nodeType":"YulFunctionCall","src":"16035:62:21"},"nodeType":"YulExpressionStatement","src":"16035:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16117:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16128:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16113:3:21"},"nodeType":"YulFunctionCall","src":"16113:18:21"},{"hexValue":"7565","kind":"string","nodeType":"YulLiteral","src":"16133:4:21","type":"","value":"ue"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16106:6:21"},"nodeType":"YulFunctionCall","src":"16106:32:21"},"nodeType":"YulExpressionStatement","src":"16106:32:21"},{"nodeType":"YulAssignment","src":"16147:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16159:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16170:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16155:3:21"},"nodeType":"YulFunctionCall","src":"16155:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16147:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15933:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15947:4:21","type":""}],"src":"15782:398:21"},{"body":{"nodeType":"YulBlock","src":"16366:217:21","statements":[{"nodeType":"YulAssignment","src":"16376:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16388:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16399:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16384:3:21"},"nodeType":"YulFunctionCall","src":"16384:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16376:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16419:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"16430:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16412:6:21"},"nodeType":"YulFunctionCall","src":"16412:25:21"},"nodeType":"YulExpressionStatement","src":"16412:25:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16457:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16468:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16453:3:21"},"nodeType":"YulFunctionCall","src":"16453:18:21"},{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"16477:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"16485:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"16473:3:21"},"nodeType":"YulFunctionCall","src":"16473:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16446:6:21"},"nodeType":"YulFunctionCall","src":"16446:45:21"},"nodeType":"YulExpressionStatement","src":"16446:45:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16511:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16522:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16507:3:21"},"nodeType":"YulFunctionCall","src":"16507:18:21"},{"name":"value2","nodeType":"YulIdentifier","src":"16527:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16500:6:21"},"nodeType":"YulFunctionCall","src":"16500:34:21"},"nodeType":"YulExpressionStatement","src":"16500:34:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16554:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16565:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16550:3:21"},"nodeType":"YulFunctionCall","src":"16550:18:21"},{"name":"value3","nodeType":"YulIdentifier","src":"16570:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16543:6:21"},"nodeType":"YulFunctionCall","src":"16543:34:21"},"nodeType":"YulExpressionStatement","src":"16543:34:21"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16311:9:21","type":""},{"name":"value3","nodeType":"YulTypedName","src":"16322:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"16330:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16338:6:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16346:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16357:4:21","type":""}],"src":"16185:398:21"},{"body":{"nodeType":"YulBlock","src":"16762:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16779:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16790:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16772:6:21"},"nodeType":"YulFunctionCall","src":"16772:21:21"},"nodeType":"YulExpressionStatement","src":"16772:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16813:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16824:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16809:3:21"},"nodeType":"YulFunctionCall","src":"16809:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"16829:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16802:6:21"},"nodeType":"YulFunctionCall","src":"16802:30:21"},"nodeType":"YulExpressionStatement","src":"16802:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16852:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16863:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16848:3:21"},"nodeType":"YulFunctionCall","src":"16848:18:21"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nodeType":"YulLiteral","src":"16868:34:21","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16841:6:21"},"nodeType":"YulFunctionCall","src":"16841:62:21"},"nodeType":"YulExpressionStatement","src":"16841:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16923:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16934:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16919:3:21"},"nodeType":"YulFunctionCall","src":"16919:18:21"},{"hexValue":"722063616c6c","kind":"string","nodeType":"YulLiteral","src":"16939:8:21","type":"","value":"r call"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16912:6:21"},"nodeType":"YulFunctionCall","src":"16912:36:21"},"nodeType":"YulExpressionStatement","src":"16912:36:21"},{"nodeType":"YulAssignment","src":"16957:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"16969:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"16980:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16965:3:21"},"nodeType":"YulFunctionCall","src":"16965:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"16957:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"16739:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"16753:4:21","type":""}],"src":"16588:402:21"},{"body":{"nodeType":"YulBlock","src":"17132:150:21","statements":[{"nodeType":"YulVariableDeclaration","src":"17142:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17162:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"17156:5:21"},"nodeType":"YulFunctionCall","src":"17156:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17146:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17217:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"17225:4:21","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17213:3:21"},"nodeType":"YulFunctionCall","src":"17213:17:21"},{"name":"pos","nodeType":"YulIdentifier","src":"17232:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17237:6:21"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"17178:34:21"},"nodeType":"YulFunctionCall","src":"17178:66:21"},"nodeType":"YulExpressionStatement","src":"17178:66:21"},{"nodeType":"YulAssignment","src":"17253:23:21","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17264:3:21"},{"name":"length","nodeType":"YulIdentifier","src":"17269:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17260:3:21"},"nodeType":"YulFunctionCall","src":"17260:16:21"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17253:3:21"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17108:3:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17113:6:21","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17124:3:21","type":""}],"src":"16995:287:21"},{"body":{"nodeType":"YulBlock","src":"17461:179:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17478:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17489:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17471:6:21"},"nodeType":"YulFunctionCall","src":"17471:21:21"},"nodeType":"YulExpressionStatement","src":"17471:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17512:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17523:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17508:3:21"},"nodeType":"YulFunctionCall","src":"17508:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"17528:2:21","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17501:6:21"},"nodeType":"YulFunctionCall","src":"17501:30:21"},"nodeType":"YulExpressionStatement","src":"17501:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17551:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17562:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17547:3:21"},"nodeType":"YulFunctionCall","src":"17547:18:21"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"17567:31:21","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17540:6:21"},"nodeType":"YulFunctionCall","src":"17540:59:21"},"nodeType":"YulExpressionStatement","src":"17540:59:21"},{"nodeType":"YulAssignment","src":"17608:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17620:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17631:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17616:3:21"},"nodeType":"YulFunctionCall","src":"17616:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17608:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17438:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17452:4:21","type":""}],"src":"17287:353:21"},{"body":{"nodeType":"YulBlock","src":"17766:98:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17783:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17794:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17776:6:21"},"nodeType":"YulFunctionCall","src":"17776:21:21"},"nodeType":"YulExpressionStatement","src":"17776:21:21"},{"nodeType":"YulAssignment","src":"17806:52:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"17831:6:21"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17843:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"17854:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17839:3:21"},"nodeType":"YulFunctionCall","src":"17839:18:21"}],"functionName":{"name":"abi_encode_bytes","nodeType":"YulIdentifier","src":"17814:16:21"},"nodeType":"YulFunctionCall","src":"17814:44:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17806:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17735:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17746:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17757:4:21","type":""}],"src":"17645:219:21"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_uint32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function validator_revert_address_payable(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address_payablet_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_struct_UserOperation_calldata(offset, end) -> value\n    {\n        if slt(sub(end, offset), 352) { revert(0, 0) }\n        value := offset\n    }\n    function abi_decode_uint48(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_struct$_UserOperation_$3754_calldata_ptrt_uint48t_uint48t_addresst_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_struct_UserOperation_calldata(add(headStart, offset), dataEnd)\n        value1 := abi_decode_uint48(add(headStart, 32))\n        value2 := abi_decode_uint48(add(headStart, 64))\n        let value := calldataload(add(headStart, 96))\n        validator_revert_address_payable(value)\n        value3 := value\n        value4 := calldataload(add(headStart, 128))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n    }\n    function abi_encode_tuple_t_uint48_t_uint48_t_address_t_uint256_t_bytes_calldata_ptr__to_t_uint48_t_uint48_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), 160)\n        mstore(add(headStart, 160), value5)\n        calldatacopy(add(headStart, 192), value4, value5)\n        mstore(add(add(headStart, value5), 192), 0)\n        tail := add(add(headStart, and(add(value5, 31), not(31))), 192)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_enum$_PostOpMode_$3595t_bytes_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(lt(value, 3)) { revert(0, 0) }\n        value0 := value\n        let offset := calldataload(add(headStart, 32))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value1_1, value2_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value1 := value1_1\n        value2 := value2_1\n        value3 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_contract$_IEntryPoint_$3568__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_struct$_UserOperation_$3754_calldata_ptrt_bytes32t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        value0 := abi_decode_struct_UserOperation_calldata(add(headStart, offset), dataEnd)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_bytes(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint256__to_t_bytes_memory_ptr_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        tail := abi_encode_bytes(value0, add(headStart, 64))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_uint32__to_t_uint32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff))\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_payable_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_uint256_t_address_t_uint256_t_uint48_t_uint48_t_address_t_uint256__to_t_bytes_memory_ptr_t_uint256_t_address_t_uint256_t_uint48_t_uint48_t_address_t_uint256__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 256\n        mstore(headStart, _1)\n        tail := abi_encode_bytes(value0, add(headStart, _1))\n        mstore(add(headStart, 32), value1)\n        let _2 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), value3)\n        let _3 := 0xffffffffffff\n        mstore(add(headStart, 128), and(value4, _3))\n        mstore(add(headStart, 160), and(value5, _3))\n        mstore(add(headStart, 192), and(value6, _2))\n        mstore(add(headStart, 224), value7)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_decode_tuple_t_uint48t_uint48t_address_payablet_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_uint48(headStart)\n        value1 := abi_decode_uint48(add(headStart, 32))\n        let value := calldataload(add(headStart, 64))\n        validator_revert_address_payable(value)\n        value2 := value\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function access_calldata_tail_t_bytes_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), not(30)))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_t_stringliteral_4f1183fece38266d89bbd94d1c93e02d713970166951c4c8f2c10a21e7cddae9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Sender not EntryPoint\")\n        tail := add(headStart, 96)\n    }\n    function abi_decode_tuple_t_address_payablet_contract$_IERC20_$777t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address_payable(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address_payable(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(0, 0x24)\n        }\n        r := div(x, y)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_c0ccd72718b49b9af08aac30156bc47d10e177349cbe5dac0a36b471195929a7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 64)\n        mstore(add(headStart, 64), \"VerifyingPaymaster: invalid sign\")\n        mstore(add(headStart, 96), \"ature length in paymasterAndData\")\n        tail := add(headStart, 128)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_178a2411ab6fbc1ba11064408972259c558d0e82fd48b0aba3ad81d14f065e73_t_bytes32__to_t_string_memory_ptr_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        mstore(pos, 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000)\n        mstore(add(pos, 28), value0)\n        end := add(pos, 60)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_bytes(value0, add(headStart, 32))\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2886":[{"length":32,"start":568},{"length":32,"start":818},{"length":32,"start":969},{"length":32,"start":1263},{"length":32,"start":1411},{"length":32,"start":1530},{"length":32,"start":1671},{"length":32,"start":2201}]},"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xF3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xB0D691FE GT PUSH2 0x8A JUMPI DUP1 PUSH4 0xC399EC88 GT PUSH2 0x59 JUMPI DUP1 PUSH4 0xC399EC88 EQ PUSH2 0x2A5 JUMPI DUP1 PUSH4 0xD0E30DB0 EQ PUSH2 0x2BA JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2C2 JUMPI DUP1 PUSH4 0xF465C77E EQ PUSH2 0x2E2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xB0D691FE EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0xB8202D8F EQ PUSH2 0x25A JUMPI DUP1 PUSH4 0xBB9FE6BF EQ PUSH2 0x270 JUMPI DUP1 PUSH4 0xC23A5CEA EQ PUSH2 0x285 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0xC6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x175 JUMPI DUP1 PUSH4 0x94D4AD60 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x9C90B443 EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xA9A23409 EQ PUSH2 0x206 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x396CB60 EQ PUSH2 0xF8 JUMPI DUP1 PUSH4 0x205C2878 EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0x290DA2AD EQ PUSH2 0x12D JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x160 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10B PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0x11EE JUMP JUMPDEST PUSH2 0x310 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x119 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x128 CALLDATASIZE PUSH1 0x4 PUSH2 0x1230 JUMP JUMPDEST PUSH2 0x39B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x139 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x148 CALLDATASIZE PUSH1 0x4 PUSH2 0x1290 JUMP JUMPDEST PUSH2 0x40D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x470 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x181 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x157 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1C7 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0x134B JUMP JUMPDEST PUSH2 0x484 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x157 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x138D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x1F4 CALLDATASIZE PUSH1 0x4 PUSH2 0x13F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x212 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x221 CALLDATASIZE PUSH1 0x4 PUSH2 0x140D JUMP JUMPDEST PUSH2 0x4CB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x232 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x18F PUSH32 0x0 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x266 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x88B8 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x4E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x291 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x2A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x13F0 JUMP JUMPDEST PUSH2 0x55C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x14D PUSH2 0x5E2 JUMP JUMPDEST PUSH2 0x10B PUSH2 0x672 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2CE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x10B PUSH2 0x2DD CALLDATASIZE PUSH1 0x4 PUSH2 0x13F0 JUMP JUMPDEST PUSH2 0x6D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x302 PUSH2 0x2FD CALLDATASIZE PUSH1 0x4 PUSH2 0x146D JUMP JUMPDEST PUSH2 0x769 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x157 SWAP3 SWAP2 SWAP1 PUSH2 0x150B JUMP JUMPDEST PUSH2 0x318 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x1CB65B PUSH1 0xE5 SHL DUP2 MSTORE PUSH4 0xFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x396CB60 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x393 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x3A3 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x40B850F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x205C2878 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x37F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x418 DUP7 PUSH2 0x7E7 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 CALLDATALOAD AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD PUSH2 0x44F SWAP4 SWAP3 CHAINID SWAP3 ADDRESS SWAP3 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 DUP12 SWAP2 ADD PUSH2 0x152D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 0x478 PUSH2 0x78D JUMP JUMPDEST PUSH2 0x482 PUSH1 0x0 PUSH2 0x826 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 CALLDATASIZE DUP2 PUSH2 0x499 PUSH1 0x94 PUSH1 0x14 DUP10 DUP12 PUSH2 0x158B JUMP JUMPDEST DUP2 ADD SWAP1 PUSH2 0x4A6 SWAP2 SWAP1 PUSH2 0x15B5 JUMP JUMPDEST SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP5 POP SWAP3 POP PUSH2 0x4BD DUP8 PUSH1 0x94 DUP2 DUP12 PUSH2 0x158B JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH2 0x4D3 PUSH2 0x88E JUMP JUMPDEST PUSH2 0x4DF DUP5 DUP5 DUP5 DUP5 PUSH2 0x906 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x4ED PUSH2 0x78D JUMP JUMPDEST PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xBB9FE6BF PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x548 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x4DF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH2 0x564 PUSH2 0x78D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x611D2E75 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xC23A5CEA SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5DB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x649 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x66D SWAP2 SWAP1 PUSH2 0x1602 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xB760FAF9 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH32 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xB760FAF9 SWAP1 CALLVALUE SWAP1 PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x6DC PUSH2 0x78D JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x75D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x766 DUP2 PUSH2 0x826 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH2 0x775 PUSH2 0x88E JUMP JUMPDEST PUSH2 0x780 DUP6 DUP6 DUP6 PUSH2 0x9C7 JUMP JUMPDEST SWAP2 POP SWAP2 POP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x60 CALLDATASIZE PUSH1 0x0 PUSH2 0x7FA PUSH2 0x120 DUP6 ADD DUP6 PUSH2 0x161B JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP4 PUSH1 0x20 DUP2 DUP5 SUB SUB PUSH1 0x40 MLOAD SWAP5 POP PUSH1 0x20 DUP2 ADD DUP6 ADD PUSH1 0x40 MSTORE DUP1 DUP6 MSTORE DUP1 DUP3 PUSH1 0x20 DUP8 ADD CALLDATACOPY POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ PUSH2 0x482 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53656E646572206E6F7420456E747279506F696E740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 PUSH2 0x918 DUP8 DUP10 ADD DUP10 PUSH2 0x1662 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH1 0x0 DUP2 DUP4 SUB PUSH2 0x932 JUMPI POP DUP2 PUSH2 0x941 JUMP JUMPDEST PUSH2 0x93E DUP4 BASEFEE DUP5 ADD PUSH2 0xC25 JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0x959 DUP5 PUSH2 0x88B8 PUSH2 0x16C9 JUMP JUMPDEST PUSH2 0x963 SWAP1 DUP12 PUSH2 0x16E0 JUMP JUMPDEST PUSH2 0x96D SWAP2 SWAP1 PUSH2 0x16C9 JUMP JUMPDEST PUSH2 0x977 SWAP2 SWAP1 PUSH2 0x16F3 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP12 PUSH1 0x2 DUP2 GT ISZERO PUSH2 0x98D JUMPI PUSH2 0x98D PUSH2 0x1715 JUMP JUMPDEST EQ PUSH2 0x9BA JUMPI PUSH2 0x9BA DUP8 PUSH2 0x9A8 PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 AND SWAP2 SWAP1 DUP5 PUSH2 0xC3F JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP1 DUP1 DUP1 CALLDATASIZE DUP2 PUSH2 0x9E2 PUSH2 0x1C2 PUSH2 0x120 DUP14 ADD DUP14 PUSH2 0x161B JUMP JUMPDEST SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP SWAP6 POP DUP2 DUP2 SWAP1 POP PUSH1 0x40 EQ DUP1 PUSH2 0xA00 JUMPI POP PUSH1 0x41 DUP2 EQ JUMPDEST PUSH2 0xA74 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x566572696679696E675061796D61737465723A20696E76616C6964207369676E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6174757265206C656E67746820696E207061796D6173746572416E6444617461 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xAD9 PUSH2 0xA86 DUP14 DUP10 DUP10 DUP10 DUP10 PUSH2 0x40D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x19457468657265756D205369676E6564204D6573736167653A0A333200000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x3C DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH1 0x5C ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP14 CALLDATALOAD AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP SWAP1 PUSH2 0xB01 DUP4 PUSH2 0x172B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x0 DUP2 MSTORE SWAP9 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0xB7F JUMPI PUSH2 0xB33 PUSH1 0x20 DUP14 ADD DUP14 PUSH2 0x13F0 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP2 DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0xE0 DUP14 ADD CALLDATALOAD PUSH1 0x80 DUP3 ADD MSTORE PUSH2 0x100 DUP14 ADD CALLDATALOAD PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP9 POP JUMPDEST PUSH2 0xBBF DUP2 DUP5 DUP5 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP PUSH2 0xCAE SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBDA PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0xC05 JUMPI DUP9 PUSH2 0xBF5 PUSH1 0x1 DUP10 DUP10 PUSH2 0xCD2 JUMP JUMPDEST SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP PUSH2 0x785 JUMP JUMPDEST DUP9 PUSH2 0xC12 PUSH1 0x0 DUP10 DUP10 PUSH2 0xCD2 JUMP JUMPDEST SWAP9 POP SWAP9 POP POP POP POP POP POP POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0xC34 JUMPI DUP2 PUSH2 0xC36 JUMP JUMPDEST DUP3 JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x84 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x4DF SWAP1 DUP6 SWAP1 PUSH2 0xD0A JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xCBD DUP6 DUP6 PUSH2 0xDF4 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xCCA DUP2 PUSH2 0xE39 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xD0 DUP3 PUSH6 0xFFFFFFFFFFFF AND SWAP1 SHL PUSH1 0xA0 DUP5 PUSH6 0xFFFFFFFFFFFF AND SWAP1 SHL DUP6 PUSH2 0xCFA JUMPI PUSH1 0x0 PUSH2 0xCFD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0xFF AND OR OR SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xD5F DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xF83 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0xDEF JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xD7D SWAP2 SWAP1 PUSH2 0x1744 JUMP JUMPDEST PUSH2 0xDEF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xE2A JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xE1E DUP8 DUP3 DUP6 DUP6 PUSH2 0xF9A JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xE32 JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE4D JUMPI PUSH2 0xE4D PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0xE55 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE69 JUMPI PUSH2 0xE69 PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0xEB6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xECA JUMPI PUSH2 0xECA PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0xF17 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xF2B JUMPI PUSH2 0xF2B PUSH2 0x1715 JUMP JUMPDEST SUB PUSH2 0x766 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7565 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF92 DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x105E JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0xFD1 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0x1055 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1025 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x104E JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0x1055 JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x10D6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x754 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x10F2 SWAP2 SWAP1 PUSH2 0x1766 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x112F JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1134 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1145 DUP8 DUP4 DUP4 DUP8 PUSH2 0x1150 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x11BF JUMPI DUP3 MLOAD PUSH1 0x0 SUB PUSH2 0x11B8 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND EXTCODESIZE PUSH2 0x11B8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x754 JUMP JUMPDEST POP DUP2 PUSH2 0xF92 JUMP JUMPDEST PUSH2 0xF92 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x11D4 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x754 SWAP2 SWAP1 PUSH2 0x1782 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1200 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x1214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x766 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1243 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x124E DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x160 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x126F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH6 0xFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x128B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x12A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x12BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x12CB DUP9 DUP3 DUP10 ADD PUSH2 0x125C JUMP JUMPDEST SWAP6 POP POP PUSH2 0x12DA PUSH1 0x20 DUP8 ADD PUSH2 0x1275 JUMP JUMPDEST SWAP4 POP PUSH2 0x12E8 PUSH1 0x40 DUP8 ADD PUSH2 0x1275 JUMP JUMPDEST SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH2 0x12F8 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 SWAP8 SWAP4 SWAP7 POP SWAP2 SWAP5 PUSH1 0x80 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x131B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1333 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x135E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1381 DUP6 DUP3 DUP7 ADD PUSH2 0x1309 JUMP JUMPDEST SWAP1 SWAP7 SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH6 0xFFFFFFFFFFFF DUP1 DUP10 AND DUP4 MSTORE DUP1 DUP9 AND PUSH1 0x20 DUP5 ADD MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x40 DUP4 ADD MSTORE DUP5 PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0xA0 PUSH1 0x80 DUP4 ADD MSTORE DUP3 PUSH1 0xA0 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0xC0 DUP5 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xC0 DUP5 DUP5 ADD ADD MSTORE PUSH1 0xC0 PUSH1 0x1F NOT PUSH1 0x1F DUP6 ADD AND DUP4 ADD ADD SWAP1 POP SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1402 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1214 DUP2 PUSH2 0x121B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1423 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH1 0x3 DUP2 LT PUSH2 0x1432 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x144E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x145A DUP8 DUP3 DUP9 ADD PUSH2 0x1309 JUMP JUMPDEST SWAP6 SWAP9 SWAP1 SWAP8 POP SWAP5 SWAP6 PUSH1 0x40 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1482 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1499 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x14A5 DUP7 DUP3 DUP8 ADD PUSH2 0x125C JUMP JUMPDEST SWAP7 PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP7 POP PUSH1 0x40 SWAP1 SWAP6 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x14D6 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x14BE JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x14F7 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x14BB JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x151E PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x14DF JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x100 DUP1 DUP4 MSTORE PUSH2 0x1541 DUP2 DUP5 ADD DUP13 PUSH2 0x14DF JUMP JUMPDEST PUSH1 0x20 DUP5 ADD SWAP11 SWAP1 SWAP11 MSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP7 DUP8 AND PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD SWAP6 SWAP1 SWAP6 MSTORE PUSH6 0xFFFFFFFFFFFF SWAP4 DUP5 AND PUSH1 0x80 DUP7 ADD MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0xA0 DUP5 ADD MSTORE SWAP3 AND PUSH1 0xC0 DUP3 ADD MSTORE PUSH1 0xE0 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x159B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x15A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x15CB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15D4 DUP6 PUSH2 0x1275 JUMP JUMPDEST SWAP4 POP PUSH2 0x15E2 PUSH1 0x20 DUP7 ADD PUSH2 0x1275 JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH2 0x15F2 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP3 SWAP4 PUSH1 0x60 ADD CALLDATALOAD SWAP3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1614 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH1 0x1E NOT DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1632 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x164D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xE32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x167A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x1685 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x1695 DUP2 PUSH2 0x121B JUMP JUMPDEST SWAP5 SWAP8 SWAP5 SWAP7 POP POP POP POP PUSH1 0x40 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP3 PUSH1 0x80 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0xC39 JUMPI PUSH2 0xC39 PUSH2 0x16B3 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0xC39 JUMPI PUSH2 0xC39 PUSH2 0x16B3 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1710 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x173D JUMPI PUSH2 0x173D PUSH2 0x16B3 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1756 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1214 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1778 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x14BB JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0xC36 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x14DF JUMP INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"1247:4393:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3094:141:11;;;;;;:::i;:::-;;:::i;:::-;;2721:149;;;;;;;;;;-1:-1:-1;2721:149:11;;;;;:::i;:::-;;:::i;2237:596:19:-;;;;;;;;;;-1:-1:-1;2237:596:19;;;;;:::i;:::-;;:::i;:::-;;;2013:25:21;;;2001:2;1986:18;2237:596:19;;;;;;;;1831:101:0;;;;;;;;;;;;;:::i;1201:85::-;;;;;;;;;;-1:-1:-1;1247:7:0;1273:6;-1:-1:-1;;;;;1273:6:0;1201:85;;;-1:-1:-1;;;;;2213:55:21;;;2195:74;;2183:2;2168:18;1201:85:0;2049:226:21;5075:563:19;;;;;;;;;;-1:-1:-1;5075:563:19;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;1406:59::-;;;;;;;;;;-1:-1:-1;1406:59:19;;;;;:::i;:::-;;;;;;;;;;;;;;1143:186:11;;;;;;;;;;-1:-1:-1;1143:186:11;;;;;:::i;:::-;;:::i;471:39::-;;;;;;;;;;;;;;;1579:43:19;;;;;;;;;;;;1617:5;1579:43;;3588:83:11;;;;;;;;;;;;;:::i;3890:133::-;;;;;;;;;;-1:-1:-1;3890:133:11;;;;;:::i;:::-;;:::i;3318:111::-;;;;;;;;;;;;;:::i;2474:105::-;;;:::i;2081:198:0:-;;;;;;;;;;-1:-1:-1;2081:198:0;;;;;:::i;:::-;;:::i;632:290:11:-;;;;;;;;;;-1:-1:-1;632:290:11;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;3094:141::-;1094:13:0;:11;:13::i;:::-;3173:55:11::1;::::0;-1:-1:-1;;;3173:55:11;;6933:10:21;6921:23;;3173:55:11::1;::::0;::::1;6903:42:21::0;3173:10:11::1;-1:-1:-1::0;;;;;3173:19:11::1;::::0;::::1;::::0;3201:9:::1;::::0;6876:18:21;;3173:55:11::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;3094:141:::0;:::o;2721:149::-;1094:13:0;:11;:13::i;:::-;2817:46:11::1;::::0;-1:-1:-1;;;2817:46:11;;-1:-1:-1;;;;;7164:55:21;;;2817:46:11::1;::::0;::::1;7146:74:21::0;7236:18;;;7229:34;;;2817:10:11::1;:21;::::0;::::1;::::0;7119:18:21;;2817:46:11::1;;;;;;;;;;;;;;;;;::::0;::::1;2237:596:19::0;2432:7;2529:12;2534:6;2529:4;:12::i;:::-;-1:-1:-1;;;;;1877:20:18;;2633:31:19;;;;;:11;:31;;;;;;;;;;2497:315;;;;;2563:13;;2606:4;;2686:10;;2718;;2750;;2782:12;;2497:315;;:::i;:::-;;;;;;;;;;;;;2470:356;;;;;;2451:375;;2237:596;;;;;;;:::o;1831:101:0:-;1094:13;:11;:13::i;:::-;1895:30:::1;1922:1;1895:18;:30::i;:::-;1831:101::o:0;5075:563:19:-;5211:17;;;;5339:24;5211:17;5465:51;1569:3;1516:2;5465:16;;:51;:::i;:::-;5441:133;;;;;;;:::i;:::-;5388:186;;-1:-1:-1;5388:186:19;;-1:-1:-1;5388:186:19;-1:-1:-1;5388:186:19;-1:-1:-1;5596:35:19;:16;1569:3;5596:16;;:35;:::i;:::-;5584:47;;;;5075:563;;;;;;;;:::o;1143:186:11:-;1251:24;:22;:24::i;:::-;1285:37;1293:4;1299:7;;1308:13;1285:7;:37::i;:::-;1143:186;;;;:::o;3588:83::-;1094:13:0;:11;:13::i;:::-;3640:10:11::1;-1:-1:-1::0;;;;;3640:22:11::1;;:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;3890:133:::0;1094:13:0;:11;:13::i;:::-;3975:41:11::1;::::0;-1:-1:-1;;;3975:41:11;;-1:-1:-1;;;;;2213:55:21;;;3975:41:11::1;::::0;::::1;2195:74:21::0;3975:10:11::1;:24;::::0;::::1;::::0;2168:18:21;;3975:41:11::1;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;3890:133:::0;:::o;3318:111::-;3387:35;;-1:-1:-1;;;3387:35:11;;3416:4;3387:35;;;2195:74:21;3361:7:11;;3387:10;-1:-1:-1;;;;;3387:20:11;;;;2168:18:21;;3387:35:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3380:42;;3318:111;:::o;2474:105::-;2518:54;;-1:-1:-1;;;2518:54:11;;2566:4;2518:54;;;2195:74:21;2518:10:11;-1:-1:-1;;;;;2518:20:11;;;;2547:9;;2168:18:21;;2518:54:11;;;;;;;;;;;;;;;;;;;2081:198:0;1094:13;:11;:13::i;:::-;-1:-1:-1;;;;;2169:22:0;::::1;2161:73;;;::::0;-1:-1:-1;;;2161:73:0;;9600:2:21;2161:73:0::1;::::0;::::1;9582:21:21::0;9639:2;9619:18;;;9612:30;9678:34;9658:18;;;9651:62;9749:8;9729:18;;;9722:36;9775:19;;2161:73:0::1;;;;;;;;;2244:28;2263:8;2244:18;:28::i;:::-;2081:198:::0;:::o;632:290:11:-;764:20;786:22;821:24;:22;:24::i;:::-;862:53;887:6;895:10;907:7;862:24;:53::i;:::-;855:60;;;;632:290;;;;;;;:::o;1359:130:0:-;1247:7;1273:6;-1:-1:-1;;;;;1273:6:0;719:10:7;1422:23:0;1414:68;;;;-1:-1:-1;;;1414:68:0;;10007:2:21;1414:68:0;;;9989:21:21;;;10026:18;;;10019:30;10085:34;10065:18;;;10058:62;10137:18;;1414:68:0;9805:356:21;1758:473:19;1826:16;1854:18;;1875:23;;;;:6;:23;:::i;:::-;1854:44;;;;1998:6;2054:2;2048:3;2036:10;2032:20;2028:29;2083:4;2077:11;2070:18;;2132:2;2127:3;2123:12;2118:3;2114:22;2108:4;2101:36;2162:3;2157;2150:16;2211:3;2206;2201:2;2196:3;2192:12;2179:36;;;1973:252;;1758:473;;;:::o;2433:187:0:-;2506:16;2525:6;;-1:-1:-1;;;;;2541:17:0;;;;;;;;;;2573:40;;2525:6;;;;;;;2573:40;;2506:16;2573:40;2496:124;2433:187;:::o;4087:135:11:-;4156:10;-1:-1:-1;;;;;4178:10:11;4156:33;;4148:67;;;;-1:-1:-1;;;4148:67:11;;10894:2:21;4148:67:11;;;10876:21:21;10933:2;10913:18;;;10906:30;10972:23;10952:18;;;10945:51;11013:18;;4148:67:11;10692:345:21;4250:819:19;4360:14;;;;;4466:78;;;;4490:7;4466:78;:::i;:::-;4359:185;;;;;;;;;;4555:18;4627:20;4611:12;:36;4607:212;;-1:-1:-1;4680:12:19;4607:212;;;4744:60;4753:12;4790:13;4767:20;:36;4744:8;:60::i;:::-;4731:73;;4607:212;4839:23;4929:4;4913:12;4884:24;4898:10;1617:5;4884:24;:::i;:::-;4867:42;;:13;:42;:::i;:::-;4866:59;;;;:::i;:::-;4865:68;;;;:::i;:::-;4839:94;-1:-1:-1;4955:25:19;4947:4;:33;;;;;;;;:::i;:::-;;4943:120;;4996:56;5019:6;5027:7;1247::0;1273:6;-1:-1:-1;;;;;1273:6:0;;1201:85;5027:7:19;-1:-1:-1;;;;;4996:22:19;;;:56;5036:15;4996:22;:56::i;:::-;4349:720;;;;;;;4250:819;;;;:::o;2839:1405::-;3010:20;3032:22;;;;;3236:24;3032:22;3273:46;3295:23;;;;:6;:23;:::i;3273:46::-;3094:225;;;;;;;;;;;;3401:9;;:16;;3421:2;3401:22;:48;;;-1:-1:-1;3447:2:19;3427:22;;3401:48;3380:159;;;;;-1:-1:-1;;;3380:159:19;;12670:2:21;3380:159:19;;;12652:21:21;12689:18;;;12682:30;;;;12748:34;12728:18;;;12721:62;12819:34;12799:18;;;12792:62;12871:19;;3380:159:19;12468:428:21;3380:159:19;3549:12;3564:95;3593:65;3601:6;3609:10;3621;3633;3645:12;3593:7;:65::i;:::-;7455:58:9;;14233:66:21;7455:58:9;;;14221:79:21;14316:12;;;14309:28;;;7325:7:9;;14353:12:21;;7455:58:9;;;;;;;;;;;;7445:69;;;;;;7438:76;;7256:265;;;;3564:95:19;-1:-1:-1;;;;;1877:20:18;;3669:31:19;;;;;:11;:31;;;;;:33;;3549:110;;-1:-1:-1;3669:31:19;:33;;;:::i;:::-;;;;-1:-1:-1;;3712:12:19;;;;;;;;;-1:-1:-1;3712:12:19;;;-1:-1:-1;;;;;;3738:24:19;;;3734:260;;3816:13;;;;:6;:13;:::i;:::-;3788:195;;;-1:-1:-1;;;;;13379:15:21;;;3788:195:19;;;13361:34:21;13431:15;;;13411:18;;;13404:43;13463:18;;;13456:34;;;3905:19:19;;;;13506:18:21;;;13499:34;3942:27:19;;;;13549:19:21;;;13542:35;13272:19;;3788:195:19;;;;;;;;;;;;3778:205;;3734:260;4019:30;4033:4;4039:9;;4019:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4019:13:19;;-1:-1:-1;;;4019:30:19:i;:::-;-1:-1:-1;;;;;4008:41:19;:7;1247::0;1273:6;-1:-1:-1;;;;;1273:6:0;;1201:85;4008:7:19;-1:-1:-1;;;;;4008:41:19;;4004:147;;4073:7;4082:57;4110:4;4116:10;4128;4082:27;:57::i;:::-;4065:75;;;;;;;;;;;;;4004:147;4169:7;4178:58;4206:5;4213:10;4225;4178:27;:58::i;:::-;4161:76;;;;;;;;;;;2839:1405;;;;;;:::o;588:104:10:-;646:7;676:1;672;:5;:13;;684:1;672:13;;;680:1;672:13;665:20;;588:104;;;;;:::o;974:241:5:-;1139:68;;;-1:-1:-1;;;;;13869:15:21;;;1139:68:5;;;13851:34:21;13921:15;;13901:18;;;13894:43;13953:18;;;;13946:34;;;1139:68:5;;;;;;;;;;13763:18:21;;;;1139:68:5;;;;;;;;;;-1:-1:-1;;;1139:68:5;;;1112:96;;1132:5;;1112:19;:96::i;3661:227:9:-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;-1:-1:-1;3872:9:9;3661:227;-1:-1:-1;;;3661:227:9:o;2956:218:12:-;3053:7;3157:8;3141:10;3133:19;;:33;;3125:3;3110:10;3102:19;;:26;;3080:9;:17;;3096:1;3080:17;;;3092:1;3080:17;3079:50;;;:88;;2956:218;-1:-1:-1;;;;2956:218:12:o;3747:706:5:-;4166:23;4192:69;4220:4;4192:69;;;;;;;;;;;;;;;;;4200:5;-1:-1:-1;;;;;4192:27:5;;;:69;;;;;:::i;:::-;4275:17;;4166:95;;-1:-1:-1;4275:21:5;4271:176;;4370:10;4359:30;;;;;;;;;;;;:::i;:::-;4351:85;;;;-1:-1:-1;;;4351:85:5;;14860:2:21;4351:85:5;;;14842:21:21;14899:2;14879:18;;;14872:30;14938:34;14918:18;;;14911:62;15009:12;14989:18;;;14982:40;15039:19;;4351:85:5;14658:406:21;4351:85:5;3817:636;3747:706;;:::o;2145:730:9:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:9;;-1:-1:-1;2822:35:9;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;788:34;;-1:-1:-1;;;788:34:9;;15271:2:21;788:34:9;;;15253:21:21;15310:2;15290:18;;;15283:30;15349:26;15329:18;;;15322:54;15393:18;;788:34:9;15069:348:21;730:345:9;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;903:41;;-1:-1:-1;;;903:41:9;;15624:2:21;903:41:9;;;15606:21:21;15663:2;15643:18;;;15636:30;15702:33;15682:18;;;15675:61;15753:18;;903:41:9;15422:355:21;839:236:9;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;1020:44;;-1:-1:-1;;;1020:44:9;;15984:2:21;1020:44:9;;;15966:21:21;16023:2;16003:18;;;15996:30;16062:34;16042:18;;;16035:62;-1:-1:-1;;;16113:18:21;;;16106:32;16155:19;;1020:44:9;15782:398:21;3873:223:6;4006:12;4037:52;4059:6;4067:4;4073:1;4076:12;4037:21;:52::i;:::-;4030:59;3873:223;-1:-1:-1;;;;3873:223:6:o;5069:1494:9:-;5195:7;;6119:66;6106:79;;6102:161;;;-1:-1:-1;6217:1:9;;-1:-1:-1;6221:30:9;6201:51;;6102:161;6374:24;;;6357:14;6374:24;;;;;;;;;16412:25:21;;;16485:4;16473:17;;16453:18;;;16446:45;;;;16507:18;;;16500:34;;;16550:18;;;16543:34;;;6374:24:9;;16384:19:21;;6374:24:9;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6374:24:9;;-1:-1:-1;;6374:24:9;;;-1:-1:-1;;;;;;;6412:20:9;;6408:101;;6464:1;6468:29;6448:50;;;;;;;6408:101;6527:6;-1:-1:-1;6535:20:9;;-1:-1:-1;5069:1494:9;;;;;;;;:::o;4960:446:6:-;5125:12;5182:5;5157:21;:30;;5149:81;;;;-1:-1:-1;;;5149:81:6;;16790:2:21;5149:81:6;;;16772:21:21;16829:2;16809:18;;;16802:30;16868:34;16848:18;;;16841:62;16939:8;16919:18;;;16912:36;16965:19;;5149:81:6;16588:402:21;5149:81:6;5241:12;5255:23;5282:6;-1:-1:-1;;;;;5282:11:6;5301:5;5308:4;5282:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5240:73;;;;5330:69;5357:6;5365:7;5374:10;5386:12;5330:26;:69::i;:::-;5323:76;4960:446;-1:-1:-1;;;;;;;4960:446:6:o;7466:628::-;7646:12;7674:7;7670:418;;;7701:10;:17;7722:1;7701:22;7697:286;;-1:-1:-1;;;;;1465:19:6;;;7908:60;;;;-1:-1:-1;;;7908:60:6;;17489:2:21;7908:60:6;;;17471:21:21;17528:2;17508:18;;;17501:30;17567:31;17547:18;;;17540:59;17616:18;;7908:60:6;17287:353:21;7908:60:6;-1:-1:-1;8003:10:6;7996:17;;7670:418;8044:33;8052:10;8064:12;8775:17;;:21;8771:379;;9003:10;8997:17;9059:15;9046:10;9042:2;9038:19;9031:44;8771:379;9126:12;9119:20;;-1:-1:-1;;;9119:20:6;;;;;;;;:::i;14:276:21:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:10;223:5;219:22;212:5;209:33;199:61;;256:1;253;246:12;199:61;279:5;14:276;-1:-1:-1;;;14:276:21:o;295:162::-;-1:-1:-1;;;;;382:5:21;378:54;371:5;368:65;358:93;;447:1;444;437:12;462:331;538:6;546;599:2;587:9;578:7;574:23;570:32;567:52;;;615:1;612;605:12;567:52;654:9;641:23;673:39;706:5;673:39;:::i;:::-;731:5;783:2;768:18;;;;755:32;;-1:-1:-1;;;462:331:21:o;798:162::-;864:5;909:3;900:6;895:3;891:16;887:26;884:46;;;926:1;923;916:12;884:46;-1:-1:-1;948:6:21;798:162;-1:-1:-1;798:162:21:o;965:167::-;1032:20;;1092:14;1081:26;;1071:37;;1061:65;;1122:1;1119;1112:12;1061:65;965:167;;;:::o;1137:725::-;1263:6;1271;1279;1287;1295;1348:3;1336:9;1327:7;1323:23;1319:33;1316:53;;;1365:1;1362;1355:12;1316:53;1405:9;1392:23;1438:18;1430:6;1427:30;1424:50;;;1470:1;1467;1460:12;1424:50;1493:73;1558:7;1549:6;1538:9;1534:22;1493:73;:::i;:::-;1483:83;;;1585:37;1618:2;1607:9;1603:18;1585:37;:::i;:::-;1575:47;;1641:37;1674:2;1663:9;1659:18;1641:37;:::i;:::-;1631:47;;1728:2;1717:9;1713:18;1700:32;1741:39;1774:5;1741:39;:::i;:::-;1137:725;;;;-1:-1:-1;1137:725:21;;1851:3;1836:19;1823:33;;1137:725;-1:-1:-1;;1137:725:21:o;2280:347::-;2331:8;2341:6;2395:3;2388:4;2380:6;2376:17;2372:27;2362:55;;2413:1;2410;2403:12;2362:55;-1:-1:-1;2436:20:21;;2479:18;2468:30;;2465:50;;;2511:1;2508;2501:12;2465:50;2548:4;2540:6;2536:17;2524:29;;2600:3;2593:4;2584:6;2576;2572:19;2568:30;2565:39;2562:59;;;2617:1;2614;2607:12;2632:409;2702:6;2710;2763:2;2751:9;2742:7;2738:23;2734:32;2731:52;;;2779:1;2776;2769:12;2731:52;2819:9;2806:23;2852:18;2844:6;2841:30;2838:50;;;2884:1;2881;2874:12;2838:50;2923:58;2973:7;2964:6;2953:9;2949:22;2923:58;:::i;:::-;3000:8;;2897:84;;-1:-1:-1;2632:409:21;-1:-1:-1;;;;2632:409:21:o;3046:774::-;3274:4;3303:14;3356:2;3348:6;3344:15;3333:9;3326:34;3408:2;3400:6;3396:15;3391:2;3380:9;3376:18;3369:43;;-1:-1:-1;;;;;3452:6:21;3448:55;3443:2;3432:9;3428:18;3421:83;3540:6;3535:2;3524:9;3520:18;3513:34;3584:3;3578;3567:9;3563:19;3556:32;3625:6;3619:3;3608:9;3604:19;3597:35;3683:6;3675;3669:3;3658:9;3654:19;3641:49;3740:1;3734:3;3725:6;3714:9;3710:22;3706:32;3699:43;3810:3;3803:2;3799:7;3794:2;3786:6;3782:15;3778:29;3767:9;3763:45;3759:55;3751:63;;3046:774;;;;;;;;;:::o;3825:255::-;3884:6;3937:2;3925:9;3916:7;3912:23;3908:32;3905:52;;;3953:1;3950;3943:12;3905:52;3992:9;3979:23;4011:39;4044:5;4011:39;:::i;4267:636::-;4370:6;4378;4386;4394;4447:2;4435:9;4426:7;4422:23;4418:32;4415:52;;;4463:1;4460;4453:12;4415:52;4502:9;4489:23;4541:1;4534:5;4531:12;4521:40;;4557:1;4554;4547:12;4521:40;4580:5;-1:-1:-1;4636:2:21;4621:18;;4608:32;4663:18;4652:30;;4649:50;;;4695:1;4692;4685:12;4649:50;4734:58;4784:7;4775:6;4764:9;4760:22;4734:58;:::i;:::-;4267:636;;4811:8;;-1:-1:-1;4708:84:21;;4893:2;4878:18;4865:32;;4267:636;-1:-1:-1;;;;4267:636:21:o;5427:504::-;5537:6;5545;5553;5606:2;5594:9;5585:7;5581:23;5577:32;5574:52;;;5622:1;5619;5612:12;5574:52;5662:9;5649:23;5695:18;5687:6;5684:30;5681:50;;;5727:1;5724;5717:12;5681:50;5750:73;5815:7;5806:6;5795:9;5791:22;5750:73;:::i;:::-;5740:83;5870:2;5855:18;;5842:32;;-1:-1:-1;5921:2:21;5906:18;;;5893:32;;5427:504;-1:-1:-1;;;;5427:504:21:o;5936:250::-;6021:1;6031:113;6045:6;6042:1;6039:13;6031:113;;;6121:11;;;6115:18;6102:11;;;6095:39;6067:2;6060:10;6031:113;;;-1:-1:-1;;6178:1:21;6160:16;;6153:27;5936:250::o;6191:270::-;6232:3;6270:5;6264:12;6297:6;6292:3;6285:19;6313:76;6382:6;6375:4;6370:3;6366:14;6359:4;6352:5;6348:16;6313:76;:::i;:::-;6443:2;6422:15;-1:-1:-1;;6418:29:21;6409:39;;;;6450:4;6405:50;;6191:270;-1:-1:-1;;6191:270:21:o;6466:288::-;6641:2;6630:9;6623:21;6604:4;6661:44;6701:2;6690:9;6686:18;6678:6;6661:44;:::i;:::-;6653:52;;6741:6;6736:2;6725:9;6721:18;6714:34;6466:288;;;;;:::o;7274:866::-;7576:4;7605:3;7635:2;7624:9;7617:21;7655:44;7695:2;7684:9;7680:18;7672:6;7655:44;:::i;:::-;7730:2;7715:18;;7708:34;;;;-1:-1:-1;;;;;;;7839:15:21;;;7834:2;7819:18;;7812:43;7886:2;7871:18;;7864:34;;;;7917:14;7968:15;;;7962:3;7947:19;;7940:44;8021:15;;;;8015:3;8000:19;;7993:44;8074:15;;8068:3;8053:19;;8046:44;8121:3;8106:19;8099:35;7647:52;7274:866;-1:-1:-1;7274:866:21:o;8145:331::-;8250:9;8261;8303:8;8291:10;8288:24;8285:44;;;8325:1;8322;8315:12;8285:44;8354:6;8344:8;8341:20;8338:40;;;8374:1;8371;8364:12;8338:40;-1:-1:-1;;8400:23:21;;;8445:25;;;;;-1:-1:-1;8145:331:21:o;8481:476::-;8573:6;8581;8589;8597;8650:3;8638:9;8629:7;8625:23;8621:33;8618:53;;;8667:1;8664;8657:12;8618:53;8690:28;8708:9;8690:28;:::i;:::-;8680:38;;8737:37;8770:2;8759:9;8755:18;8737:37;:::i;:::-;8727:47;;8824:2;8813:9;8809:18;8796:32;8837:39;8870:5;8837:39;:::i;:::-;8481:476;;;;-1:-1:-1;8895:5:21;;8947:2;8932:18;8919:32;;-1:-1:-1;;8481:476:21:o;9209:184::-;9279:6;9332:2;9320:9;9311:7;9307:23;9303:32;9300:52;;;9348:1;9345;9338:12;9300:52;-1:-1:-1;9371:16:21;;9209:184;-1:-1:-1;9209:184:21:o;10166:521::-;10243:4;10249:6;10309:11;10296:25;10403:2;10399:7;10388:8;10372:14;10368:29;10364:43;10344:18;10340:68;10330:96;;10422:1;10419;10412:12;10330:96;10449:33;;10501:20;;;-1:-1:-1;10544:18:21;10533:30;;10530:50;;;10576:1;10573;10566:12;10530:50;10609:4;10597:17;;-1:-1:-1;10640:14:21;10636:27;;;10626:38;;10623:58;;;10677:1;10674;10667:12;11042:632;11159:6;11167;11175;11183;11191;11244:3;11232:9;11223:7;11219:23;11215:33;11212:53;;;11261:1;11258;11251:12;11212:53;11300:9;11287:23;11319:39;11352:5;11319:39;:::i;:::-;11377:5;-1:-1:-1;11434:2:21;11419:18;;11406:32;11447:41;11406:32;11447:41;:::i;:::-;11042:632;;11507:7;;-1:-1:-1;;;;11561:2:21;11546:18;;11533:32;;11612:2;11597:18;;11584:32;;11663:3;11648:19;;;11635:33;;-1:-1:-1;11042:632:21:o;11679:127::-;11740:10;11735:3;11731:20;11728:1;11721:31;11771:4;11768:1;11761:15;11795:4;11792:1;11785:15;11811:168;11884:9;;;11915;;11932:15;;;11926:22;;11912:37;11902:71;;11953:18;;:::i;11984:125::-;12049:9;;;12070:10;;;12067:36;;;12083:18;;:::i;12114:217::-;12154:1;12180;12170:132;;12224:10;12219:3;12215:20;12212:1;12205:31;12259:4;12256:1;12249:15;12287:4;12284:1;12277:15;12170:132;-1:-1:-1;12316:9:21;;12114:217::o;12336:127::-;12397:10;12392:3;12388:20;12385:1;12378:31;12428:4;12425:1;12418:15;12452:4;12449:1;12442:15;12901:135;12940:3;12961:17;;;12958:43;;12981:18;;:::i;:::-;-1:-1:-1;13028:1:21;13017:13;;12901:135::o;14376:277::-;14443:6;14496:2;14484:9;14475:7;14471:23;14467:32;14464:52;;;14512:1;14509;14502:12;14464:52;14544:9;14538:16;14597:5;14590:13;14583:21;14576:5;14573:32;14563:60;;14619:1;14616;14609:12;16995:287;17124:3;17162:6;17156:13;17178:66;17237:6;17232:3;17225:4;17217:6;17213:17;17178:66;:::i;:::-;17260:16;;;;;16995:287;-1:-1:-1;;16995:287:21:o;17645:219::-;17794:2;17783:9;17776:21;17757:4;17814:44;17854:2;17843:9;17839:18;17831:6;17814:44;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"1210000","executionCost":"infinite","totalCost":"infinite"},"external":{"POST_OP_GAS()":"229","addStake(uint32)":"infinite","deposit()":"infinite","entryPoint()":"infinite","getDeposit()":"infinite","getHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint48,uint48,address,uint256)":"infinite","owner()":"2343","parsePaymasterAndData(bytes)":"infinite","postOp(uint8,bytes,uint256)":"infinite","renounceOwnership()":"infinite","senderNonce(address)":"2569","transferOwnership(address)":"infinite","unlockStake()":"infinite","validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"infinite","withdrawStake(address)":"infinite","withdrawTo(address,uint256)":"infinite"},"internal":{"_postOp(enum IPaymaster.PostOpMode,bytes calldata,uint256)":"infinite","_validatePaymasterUserOp(struct UserOperation calldata,bytes32,uint256)":"infinite","pack(struct UserOperation calldata)":"infinite"}},"methodIdentifiers":{"POST_OP_GAS()":"b8202d8f","addStake(uint32)":"0396cb60","deposit()":"d0e30db0","entryPoint()":"b0d691fe","getDeposit()":"c399ec88","getHash((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),uint48,uint48,address,uint256)":"290da2ad","owner()":"8da5cb5b","parsePaymasterAndData(bytes)":"94d4ad60","postOp(uint8,bytes,uint256)":"a9a23409","renounceOwnership()":"715018a6","senderNonce(address)":"9c90b443","transferOwnership(address)":"f2fde38b","unlockStake()":"bb9fe6bf","validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":"f465c77e","withdrawStake(address)":"c23a5cea","withdrawTo(address,uint256)":"205c2878"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POST_OP_GAS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"unstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"}],\"name\":\"getHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"}],\"name\":\"parsePaymasterAndData\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"validUntil\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"validAfter\",\"type\":\"uint48\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"exchangeRate\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"senderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"initCode\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preVerificationGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"userOpHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"maxCost\",\"type\":\"uint256\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"validationData\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"unstakeDelaySec\":\"- the unstake delay for this paymaster. Can only be increased.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"params\":{\"maxCost\":\"the maximum cost of this transaction (based on maximum gas and gas price from userOp)\",\"userOp\":\"the user operation\",\"userOpHash\":\"hash of the user's request data.\"},\"returns\":{\"context\":\"value to send to a postOp      zero length to signify postOp is not required.\",\"validationData\":\"signature and time-range of this operation, encoded the same as the return value of validateUserOperation      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,         otherwise, an address of an \\\"authorizer\\\" contract.      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"      <6-byte> validAfter - first timestamp this operation is valid      Note that the validation code cannot use block.timestamp (or block.number) directly.\"}},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"deposit()\":{\"notice\":\"add a deposit for this paymaster, used for paying for transaction fees\"},\"getDeposit()\":{\"notice\":\"return current paymaster's deposit on the entryPoint.\"},\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"unlockStake()\":{\"notice\":\"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)\":{\"notice\":\"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\"},\"withdrawStake(address)\":{\"notice\":\"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw value from the deposit\"}},\"notice\":\"A paymaster based on the eth-infinitism sample VerifyingPaymaster contract. It has the same functionality as the sample, but with added support for withdrawing ERC20 tokens. All withdrawn tokens will be transferred to the owner address. Note that the off-chain signer should have a strategy in place to handle a failed token withdrawal. See account-abstraction/contracts/samples/VerifyingPaymaster.sol for detailed comments.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VerifyingPaymaster.sol\":\"VerifyingPaymaster\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"account-abstraction/contracts/core/BasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n\\n/* solhint-disable reason-string */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IPaymaster.sol\\\";\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\nimport \\\"./Helpers.sol\\\";\\n\\n/**\\n * Helper class for creating a paymaster.\\n * provides helper methods for staking.\\n * validates that the postOp is called only by the entryPoint\\n */\\nabstract contract BasePaymaster is IPaymaster, Ownable {\\n\\n    IEntryPoint immutable public entryPoint;\\n\\n    constructor(IEntryPoint _entryPoint) {\\n        entryPoint = _entryPoint;\\n    }\\n\\n    /// @inheritdoc IPaymaster\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external override returns (bytes memory context, uint256 validationData) {\\n         _requireFromEntryPoint();\\n        return _validatePaymasterUserOp(userOp, userOpHash, maxCost);\\n    }\\n\\n    function _validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    internal virtual returns (bytes memory context, uint256 validationData);\\n\\n    /// @inheritdoc IPaymaster\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external override {\\n        _requireFromEntryPoint();\\n        _postOp(mode, context, actualGasCost);\\n    }\\n\\n    /**\\n     * post-operation handler.\\n     * (verified to be called only through the entryPoint)\\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal virtual {\\n\\n        (mode,context,actualGasCost); // unused params\\n        // subclass must override this method if validatePaymasterUserOp returns a context\\n        revert(\\\"must override\\\");\\n    }\\n\\n    /**\\n     * add a deposit for this paymaster, used for paying for transaction fees\\n     */\\n    function deposit() public payable {\\n        entryPoint.depositTo{value : msg.value}(address(this));\\n    }\\n\\n    /**\\n     * withdraw value from the deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\n        entryPoint.withdrawTo(withdrawAddress, amount);\\n    }\\n    /**\\n     * add stake for this paymaster.\\n     * This method can also carry eth value to add to the current stake.\\n     * @param unstakeDelaySec - the unstake delay for this paymaster. Can only be increased.\\n     */\\n    function addStake(uint32 unstakeDelaySec) external payable onlyOwner {\\n        entryPoint.addStake{value : msg.value}(unstakeDelaySec);\\n    }\\n\\n    /**\\n     * return current paymaster's deposit on the entryPoint.\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * unlock the stake, in order to withdraw it.\\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\\n     */\\n    function unlockStake() external onlyOwner {\\n        entryPoint.unlockStake();\\n    }\\n\\n    /**\\n     * withdraw the entire paymaster's stake.\\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\\n        entryPoint.withdrawStake(withdrawAddress);\\n    }\\n\\n    /// validate the call is made from a valid entrypoint\\n    function _requireFromEntryPoint() internal virtual {\\n        require(msg.sender == address(entryPoint), \\\"Sender not EntryPoint\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x27f658d545b5f26c2e09a7ac4fba72f9975433839d10225a520e557540b84443\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * returned data from validateUserOp.\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\n * @param aggregator - address(0) - the account validated the signature by itself.\\n *              address(1) - the account failed to validate the signature.\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\n * @param validAfter - this UserOp is valid only after this timestamp.\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\n */\\n    struct ValidationData {\\n        address aggregator;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n    }\\n\\n//extract sigFailed, validAfter, validUntil.\\n// also convert zero validUntil to type(uint48).max\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\n        address aggregator = address(uint160(validationData));\\n        uint48 validUntil = uint48(validationData >> 160);\\n        if (validUntil == 0) {\\n            validUntil = type(uint48).max;\\n        }\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n// intersect account and paymaster ranges.\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\n        address aggregator = accountValidationData.aggregator;\\n        if (aggregator == address(0)) {\\n            aggregator = pmValidationData.aggregator;\\n        }\\n        uint48 validAfter = accountValidationData.validAfter;\\n        uint48 validUntil = accountValidationData.validUntil;\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\n\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\n        return ValidationData(aggregator, validAfter, validUntil);\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp\\n * @param data - the ValidationData to pack\\n */\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\n * @param sigFailed - true for signature failure, false for success\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\n * @param validAfter first timestamp this UserOperation is valid\\n */\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\n    }\\n\\n/**\\n * keccak function over calldata.\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\n */\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\n        assembly {\\n            let mem := mload(0x40)\\n            let len := data.length\\n            calldatacopy(mem, data.offset, len)\\n            ret := keccak256(mem, len)\\n        }\\n    }\\n\\n\",\"keccak256\":\"0x591c87519f7155d1909210276b77925ab2722a99b7b5d5649aecc36ebbdb045a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * Aggregated Signatures validator.\\n */\\ninterface IAggregator {\\n\\n    /**\\n     * validate aggregated signature.\\n     * revert if the aggregated signature does not match the given list of operations.\\n     */\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\n\\n    /**\\n     * validate signature of a single userOp\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\n     * @param userOp the userOperation received from the user.\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\n     */\\n    function validateUserOpSignature(UserOperation calldata userOp)\\n    external view returns (bytes memory sigForUserOp);\\n\\n    /**\\n     * aggregate multiple signatures into a single value.\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\n     * bundler MAY use optimized custom code perform this aggregation\\n     * @param userOps array of UserOperations to collect the signatures from.\\n     * @return aggregatedSignature the aggregated signature\\n     */\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\n}\\n\",\"keccak256\":\"0x060e9ddb0152250c269ba0640dc5753834ac44cf182a2837d508c0c529cae26a\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./UserOperation.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\nimport \\\"./IAggregator.sol\\\";\\nimport \\\"./INonceManager.sol\\\";\\n\\ninterface IEntryPoint is IStakeManager, INonceManager {\\n\\n    /***\\n     * An event emitted after each successful request\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\n     * @param sender - the account that generates this request.\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param nonce - the nonce value from the request.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\n     */\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\n\\n    /**\\n     * account \\\"sender\\\" was deployed.\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\n     * @param sender the account that is deployed\\n     * @param factory the factory used to deploy this account (in the initCode)\\n     * @param paymaster the paymaster used by this UserOp\\n     */\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param userOpHash the request unique identifier.\\n     * @param sender the sender of this request\\n     * @param nonce the nonce used in the request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\n\\n    /**\\n     * an event emitted by handleOps(), before starting the execution loop.\\n     * any event emitted before this event, is part of the validation.\\n     */\\n    event BeforeExecution();\\n\\n    /**\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\n     */\\n    event SignatureAggregatorChanged(address indexed aggregator);\\n\\n    /**\\n     * a custom revert error of handleOps, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\n     *  @param reason - revert reason\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\n     *      so a failure can be attributed to the correct entity.\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\n     */\\n    error FailedOp(uint256 opIndex, string reason);\\n\\n    /**\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\n     */\\n    error SignatureValidationFailed(address aggregator);\\n\\n    /**\\n     * Successful result from simulateValidation.\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     */\\n    error ValidationResult(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\n\\n    /**\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\n     * @param returnInfo gas and time-range returned values\\n     * @param senderInfo stake information about the sender\\n     * @param factoryInfo stake information about the factory (if any)\\n     * @param paymasterInfo stake information about the paymaster (if any)\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\n     */\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\n        AggregatorStakeInfo aggregatorInfo);\\n\\n    /**\\n     * return value of getSenderAddress\\n     */\\n    error SenderAddressResult(address sender);\\n\\n    /**\\n     * return value of simulateHandleOp\\n     */\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\n\\n    //UserOps handled, per aggregator\\n    struct UserOpsPerAggregator {\\n        UserOperation[] userOps;\\n\\n        // aggregator address\\n        IAggregator aggregator;\\n        // aggregated signature\\n        bytes signature;\\n    }\\n\\n    /**\\n     * Execute a batch of UserOperation.\\n     * no signature aggregator is used.\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\n     * @param ops the operations to execute\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\n\\n    /**\\n     * Execute a batch of UserOperation with Aggregators\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\n     * @param beneficiary the address to receive the fees\\n     */\\n    function handleAggregatedOps(\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\n        address payable beneficiary\\n    ) external;\\n\\n    /**\\n     * generate a request Id - unique identifier for this request.\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\n     */\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\n\\n    /**\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\n     * @param userOp the user operation to validate.\\n     */\\n    function simulateValidation(UserOperation calldata userOp) external;\\n\\n    /**\\n     * gas and return values during simulation\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\n     * @param prefund the required prefund for this operation\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\n     */\\n    struct ReturnInfo {\\n        uint256 preOpGas;\\n        uint256 prefund;\\n        bool sigFailed;\\n        uint48 validAfter;\\n        uint48 validUntil;\\n        bytes paymasterContext;\\n    }\\n\\n    /**\\n     * returned aggregated signature info.\\n     * the aggregator returned by the account, and its current stake.\\n     */\\n    struct AggregatorStakeInfo {\\n        address aggregator;\\n        StakeInfo stakeInfo;\\n    }\\n\\n    /**\\n     * Get counterfactual sender address.\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\n     * this method always revert, and returns the address in SenderAddressResult error\\n     * @param initCode the constructor code to be passed into the UserOperation.\\n     */\\n    function getSenderAddress(bytes memory initCode) external;\\n\\n\\n    /**\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\n     * this method will always revert with \\\"ExecutionResult\\\".\\n     * it performs full validation of the UserOperation, but ignores signature error.\\n     * an optional target address is called after the userop succeeds, and its value is returned\\n     * (before the entire call is reverted)\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\n     * with trace enabled to track the emitted events.\\n     * @param op the UserOperation to simulate\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\n     *        are set to the return from that call.\\n     * @param targetCallData callData to pass to target address\\n     */\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\n}\\n\\n\",\"keccak256\":\"0x3a90bf308819ed125fa4202f880999caff8a8686633b8ddb79a30ca240d5b8f8\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\ninterface INonceManager {\\n\\n    /**\\n     * Return the next nonce for this sender.\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\n     * But UserOp with different keys can come with arbitrary order.\\n     *\\n     * @param sender the account address\\n     * @param key the high 192 bit of the nonce\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\n     */\\n    function getNonce(address sender, uint192 key)\\n    external view returns (uint256 nonce);\\n\\n    /**\\n     * Manually increment the nonce of the sender.\\n     * This method is exposed just for completeness..\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\n     * as the EntryPoint will update the nonce regardless.\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\n     * UserOperations will not pay extra for the first transaction with a given key.\\n     */\\n    function incrementNonce(uint192 key) external;\\n}\\n\",\"keccak256\":\"0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\nimport \\\"./UserOperation.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IPaymaster {\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now it's a 2nd call, after user's op was deliberately reverted.\\n    }\\n\\n    /**\\n     * payment validation: check if paymaster agrees to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @param userOpHash hash of the user's request data.\\n     * @param maxCost the maximum cost of this transaction (based on maximum gas and gas price from userOp)\\n     * @return context value to send to a postOp\\n     *      zero length to signify postOp is not required.\\n     * @return validationData signature and time-range of this operation, encoded the same as the return value of validateUserOperation\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 maxCost)\\n    external returns (bytes memory context, uint256 validationData);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) external;\\n}\\n\",\"keccak256\":\"0x36858ba8685024974f533530420688da3454d29996ebc42e410673a1ed2ec456\",\"license\":\"GPL-3.0\"},\"account-abstraction/contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.12;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\n */\\ninterface IStakeManager {\\n\\n    event Deposited(\\n        address indexed account,\\n        uint256 totalDeposit\\n    );\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted when stake or unstake delay are modified\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 unstakeDelaySec\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(\\n        address indexed account,\\n        uint256 withdrawTime\\n    );\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @param deposit the entity's deposit\\n     * @param staked true if this entity is staked.\\n     * @param stake actual amount of ether staked for this entity.\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 10^15 eth\\n     *    48 bit for full timestamp\\n     *    32 bit allows 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint48 withdrawTime;\\n    }\\n\\n    //API struct used by getStakeInfo and simulateValidation\\n    struct StakeInfo {\\n        uint256 stake;\\n        uint256 unstakeDelaySec;\\n    }\\n\\n    /// @return info - full deposit information of given account\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\n\\n    /// @return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\n}\\n\",\"keccak256\":\"0xd227b02888cd4ac68daebcdfd992ec00f9fff66fa3b3bb16f656cd582fa3480f\",\"license\":\"GPL-3.0-only\"},\"account-abstraction/contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.12;\\n\\n/* solhint-disable no-inline-assembly */\\n\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\n\\n/**\\n * User Operation struct\\n * @param sender the sender account of this request.\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\n     * @param initCode if set, the account contract will be created by this constructor/\\n     * @param callData the method call to execute on this account.\\n     * @param callGasLimit the gas limit passed to the callData method call.\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\n     */\\n    struct UserOperation {\\n\\n        address sender;\\n        uint256 nonce;\\n        bytes initCode;\\n        bytes callData;\\n        uint256 callGasLimit;\\n        uint256 verificationGasLimit;\\n        uint256 preVerificationGas;\\n        uint256 maxFeePerGas;\\n        uint256 maxPriorityFeePerGas;\\n        bytes paymasterAndData;\\n        bytes signature;\\n    }\\n\\n/**\\n * Utility functions helpful when working with UserOperation structs.\\n */\\nlibrary UserOperationLib {\\n\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\n        address data;\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\n        assembly {data := calldataload(userOp)}\\n        return address(uint160(data));\\n    }\\n\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\n    unchecked {\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\n            //legacy mode (for networks that don't support basefee opcode)\\n            return maxFeePerGas;\\n        }\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n    }\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        address sender = getSender(userOp);\\n        uint256 nonce = userOp.nonce;\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\n        uint256 callGasLimit = userOp.callGasLimit;\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\n\\n        return abi.encode(\\n            sender, nonce,\\n            hashInitCode, hashCallData,\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\n            maxFeePerGas, maxPriorityFeePerGas,\\n            hashPaymasterAndData\\n        );\\n    }\\n\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\n        return keccak256(pack(userOp));\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x61374003361059087fdcf17967a7bba052badeaf5c7f0ae689166f8aafd3a45c\",\"license\":\"GPL-3.0\"},\"contracts/VerifyingPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport { IEntryPoint } from \\\"account-abstraction/contracts/interfaces/IEntryPoint.sol\\\";\\nimport { UserOperation } from \\\"account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport { UserOperationLib } from \\\"account-abstraction/contracts/interfaces/UserOperation.sol\\\";\\nimport { BasePaymaster } from \\\"account-abstraction/contracts/core/BasePaymaster.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"account-abstraction/contracts/core/Helpers.sol\\\" as Helpers;\\n\\n/**\\n * A paymaster based on the eth-infinitism sample VerifyingPaymaster contract.\\n * It has the same functionality as the sample, but with added support for withdrawing ERC20 tokens.\\n * All withdrawn tokens will be transferred to the owner address.\\n * Note that the off-chain signer should have a strategy in place to handle a failed token withdrawal.\\n *\\n * See account-abstraction/contracts/samples/VerifyingPaymaster.sol for detailed comments.\\n */\\ncontract VerifyingPaymaster is BasePaymaster {\\n    using ECDSA for bytes32;\\n    using UserOperationLib for UserOperation;\\n    using SafeERC20 for IERC20;\\n\\n    mapping(address sender => uint256 nonce) public senderNonce;\\n\\n    uint256 private constant VALID_PND_OFFSET = 20;\\n\\n    uint256 private constant SIGNATURE_OFFSET = 148;\\n\\n    uint256 public constant POST_OP_GAS = 35000;\\n\\n    constructor(IEntryPoint _entryPoint, address _owner) BasePaymaster(_entryPoint) {\\n        _transferOwnership(_owner);\\n    }\\n\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\n        bytes calldata pnd = userOp.paymasterAndData;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let ofs := userOp\\n            let len := sub(sub(pnd.offset, ofs), 32)\\n            ret := mload(0x40)\\n            mstore(0x40, add(ret, add(len, 32)))\\n            mstore(ret, len)\\n            calldatacopy(add(ret, 32), ofs, len)\\n        }\\n    }\\n\\n    function getHash(\\n        UserOperation calldata userOp,\\n        uint48 validUntil,\\n        uint48 validAfter,\\n        address erc20Token,\\n        uint256 exchangeRate\\n    ) public view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    pack(userOp),\\n                    block.chainid,\\n                    address(this),\\n                    senderNonce[userOp.getSender()],\\n                    validUntil,\\n                    validAfter,\\n                    erc20Token,\\n                    exchangeRate\\n                )\\n            );\\n    }\\n\\n    function _validatePaymasterUserOp(\\n        UserOperation calldata userOp,\\n        bytes32 /*userOpHash*/,\\n        uint256 requiredPreFund\\n    ) internal override returns (bytes memory context, uint256 validationData) {\\n        (requiredPreFund);\\n\\n        (\\n            uint48 validUntil,\\n            uint48 validAfter,\\n            address erc20Token,\\n            uint256 exchangeRate,\\n            bytes calldata signature\\n        ) = parsePaymasterAndData(userOp.paymasterAndData);\\n        // solhint-disable-next-line reason-string\\n        require(\\n            signature.length == 64 || signature.length == 65,\\n            \\\"VerifyingPaymaster: invalid signature length in paymasterAndData\\\"\\n        );\\n        bytes32 hash = ECDSA.toEthSignedMessageHash(getHash(userOp, validUntil, validAfter, erc20Token, exchangeRate));\\n        senderNonce[userOp.getSender()]++;\\n        context = \\\"\\\";\\n        if (erc20Token != address(0)) {\\n            context = abi.encode(\\n                userOp.sender,\\n                erc20Token,\\n                exchangeRate,\\n                userOp.maxFeePerGas,\\n                userOp.maxPriorityFeePerGas\\n            );\\n        }\\n\\n        if (owner() != ECDSA.recover(hash, signature)) {\\n            return (context, Helpers._packValidationData(true, validUntil, validAfter));\\n        }\\n\\n        return (context, Helpers._packValidationData(false, validUntil, validAfter));\\n    }\\n\\n    function _postOp(PostOpMode mode, bytes calldata context, uint256 actualGasCost) internal override {\\n        (address sender, IERC20 token, uint256 exchangeRate, uint256 maxFeePerGas, uint256 maxPriorityFeePerGas) = abi\\n            .decode(context, (address, IERC20, uint256, uint256, uint256));\\n\\n        uint256 opGasPrice;\\n        unchecked {\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                opGasPrice = maxFeePerGas;\\n            } else {\\n                opGasPrice = Math.min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n            }\\n        }\\n\\n        uint256 actualTokenCost = ((actualGasCost + (POST_OP_GAS * opGasPrice)) * exchangeRate) / 1e18;\\n        if (mode != PostOpMode.postOpReverted) {\\n            token.safeTransferFrom(sender, owner(), actualTokenCost);\\n        }\\n    }\\n\\n    function parsePaymasterAndData(\\n        bytes calldata paymasterAndData\\n    )\\n        public\\n        pure\\n        returns (\\n            uint48 validUntil,\\n            uint48 validAfter,\\n            address erc20Token,\\n            uint256 exchangeRate,\\n            bytes calldata signature\\n        )\\n    {\\n        (validUntil, validAfter, erc20Token, exchangeRate) = abi.decode(\\n            paymasterAndData[VALID_PND_OFFSET:SIGNATURE_OFFSET],\\n            (uint48, uint48, address, uint256)\\n        );\\n        signature = paymasterAndData[SIGNATURE_OFFSET:];\\n    }\\n}\\n\",\"keccak256\":\"0x8a99bf66f016f738d7fd8342e6d94f413b1a2b669b891df9e2ccae11c4d36da9\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":7,"contract":"contracts/VerifyingPaymaster.sol:VerifyingPaymaster","label":"_owner","offset":0,"slot":"0","type":"t_address"},{"astId":3961,"contract":"contracts/VerifyingPaymaster.sol:VerifyingPaymaster","label":"senderNonce","offset":0,"slot":"1","type":"t_mapping(t_address,t_uint256)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{"addStake(uint32)":{"notice":"add stake for this paymaster. This method can also carry eth value to add to the current stake."},"deposit()":{"notice":"add a deposit for this paymaster, used for paying for transaction fees"},"getDeposit()":{"notice":"return current paymaster's deposit on the entryPoint."},"postOp(uint8,bytes,uint256)":{"notice":"post-operation handler. Must verify sender is the entryPoint"},"unlockStake()":{"notice":"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"},"validatePaymasterUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)":{"notice":"payment validation: check if paymaster agrees to pay. Must verify sender is the entryPoint. Revert to reject this request. Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted) The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns."},"withdrawStake(address)":{"notice":"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"},"withdrawTo(address,uint256)":{"notice":"withdraw value from the deposit"}},"notice":"A paymaster based on the eth-infinitism sample VerifyingPaymaster contract. It has the same functionality as the sample, but with added support for withdrawing ERC20 tokens. All withdrawn tokens will be transferred to the owner address. Note that the off-chain signer should have a strategy in place to handle a failed token withdrawal. See account-abstraction/contracts/samples/VerifyingPaymaster.sol for detailed comments.","version":1}}},"contracts/test/TestToken.sol":{"TestToken":{"abi":[{"inputs":[{"internalType":"uint8","name":"_decimals","type":"uint8"},{"internalType":"string","name":"_name","type":"string"},{"internalType":"string","name":"_symbol","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"subtractedValue","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"addedValue","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"See {IERC20-allowance}."},"approve(address,uint256)":{"details":"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."},"balanceOf(address)":{"details":"See {IERC20-balanceOf}."},"decimals()":{"details":"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."},"decreaseAllowance(address,uint256)":{"details":"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."},"increaseAllowance(address,uint256)":{"details":"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."},"name()":{"details":"Returns the name of the token."},"symbol()":{"details":"Returns the symbol of the token, usually a shorter version of the name."},"totalSupply()":{"details":"See {IERC20-totalSupply}."},"transfer(address,uint256)":{"details":"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."},"transferFrom(address,address,uint256)":{"details":"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_157":{"entryPoint":null,"id":157,"parameterSlots":2,"returnSlots":0},"@_4328":{"entryPoint":null,"id":4328,"parameterSlots":3,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":125,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint8t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":300,"id":null,"parameterSlots":2,"returnSlots":3},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":492,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":575,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":432,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":103,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:4294:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"46:95:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"63:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"70:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"75:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"66:3:21"},"nodeType":"YulFunctionCall","src":"66:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"56:6:21"},"nodeType":"YulFunctionCall","src":"56:31:21"},"nodeType":"YulExpressionStatement","src":"56:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"103:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"106:4:21","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"96:6:21"},"nodeType":"YulFunctionCall","src":"96:15:21"},"nodeType":"YulExpressionStatement","src":"96:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"127:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"130:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"120:6:21"},"nodeType":"YulFunctionCall","src":"120:15:21"},"nodeType":"YulExpressionStatement","src":"120:15:21"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"14:127:21"},{"body":{"nodeType":"YulBlock","src":"210:776:21","statements":[{"body":{"nodeType":"YulBlock","src":"259:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"268:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"271:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"261:6:21"},"nodeType":"YulFunctionCall","src":"261:12:21"},"nodeType":"YulExpressionStatement","src":"261:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"238:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"246:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"234:3:21"},"nodeType":"YulFunctionCall","src":"234:17:21"},{"name":"end","nodeType":"YulIdentifier","src":"253:3:21"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"230:3:21"},"nodeType":"YulFunctionCall","src":"230:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"223:6:21"},"nodeType":"YulFunctionCall","src":"223:35:21"},"nodeType":"YulIf","src":"220:55:21"},{"nodeType":"YulVariableDeclaration","src":"284:23:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"300:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"294:5:21"},"nodeType":"YulFunctionCall","src":"294:13:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"288:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"316:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"334:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"338:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"330:3:21"},"nodeType":"YulFunctionCall","src":"330:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"342:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"326:3:21"},"nodeType":"YulFunctionCall","src":"326:18:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"320:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"367:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"369:16:21"},"nodeType":"YulFunctionCall","src":"369:18:21"},"nodeType":"YulExpressionStatement","src":"369:18:21"}]},"condition":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"359:2:21"},{"name":"_2","nodeType":"YulIdentifier","src":"363:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"356:2:21"},"nodeType":"YulFunctionCall","src":"356:10:21"},"nodeType":"YulIf","src":"353:36:21"},{"nodeType":"YulVariableDeclaration","src":"398:17:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"412:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"408:3:21"},"nodeType":"YulFunctionCall","src":"408:7:21"},"variables":[{"name":"_3","nodeType":"YulTypedName","src":"402:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"424:23:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"444:2:21","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"438:5:21"},"nodeType":"YulFunctionCall","src":"438:9:21"},"variables":[{"name":"memPtr","nodeType":"YulTypedName","src":"428:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"456:71:21","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"478:6:21"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"502:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"506:4:21","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"498:3:21"},"nodeType":"YulFunctionCall","src":"498:13:21"},{"name":"_3","nodeType":"YulIdentifier","src":"513:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"494:3:21"},"nodeType":"YulFunctionCall","src":"494:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"518:2:21","type":"","value":"63"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"490:3:21"},"nodeType":"YulFunctionCall","src":"490:31:21"},{"name":"_3","nodeType":"YulIdentifier","src":"523:2:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"486:3:21"},"nodeType":"YulFunctionCall","src":"486:40:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"474:3:21"},"nodeType":"YulFunctionCall","src":"474:53:21"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"460:10:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"586:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"588:16:21"},"nodeType":"YulFunctionCall","src":"588:18:21"},"nodeType":"YulExpressionStatement","src":"588:18:21"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"545:10:21"},{"name":"_2","nodeType":"YulIdentifier","src":"557:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"542:2:21"},"nodeType":"YulFunctionCall","src":"542:18:21"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"565:10:21"},{"name":"memPtr","nodeType":"YulIdentifier","src":"577:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"562:2:21"},"nodeType":"YulFunctionCall","src":"562:22:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"539:2:21"},"nodeType":"YulFunctionCall","src":"539:46:21"},"nodeType":"YulIf","src":"536:72:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"624:2:21","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"628:10:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"617:6:21"},"nodeType":"YulFunctionCall","src":"617:22:21"},"nodeType":"YulExpressionStatement","src":"617:22:21"},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"655:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"663:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"648:6:21"},"nodeType":"YulFunctionCall","src":"648:18:21"},"nodeType":"YulExpressionStatement","src":"648:18:21"},{"nodeType":"YulVariableDeclaration","src":"675:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"685:4:21","type":"","value":"0x20"},"variables":[{"name":"_4","nodeType":"YulTypedName","src":"679:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"735:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"744:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"747:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"737:6:21"},"nodeType":"YulFunctionCall","src":"737:12:21"},"nodeType":"YulExpressionStatement","src":"737:12:21"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"712:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"720:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"708:3:21"},"nodeType":"YulFunctionCall","src":"708:15:21"},{"name":"_4","nodeType":"YulIdentifier","src":"725:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"704:3:21"},"nodeType":"YulFunctionCall","src":"704:24:21"},{"name":"end","nodeType":"YulIdentifier","src":"730:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"701:2:21"},"nodeType":"YulFunctionCall","src":"701:33:21"},"nodeType":"YulIf","src":"698:53:21"},{"nodeType":"YulVariableDeclaration","src":"760:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"769:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"764:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"825:87:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"854:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"862:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"850:3:21"},"nodeType":"YulFunctionCall","src":"850:14:21"},{"name":"_4","nodeType":"YulIdentifier","src":"866:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"846:3:21"},"nodeType":"YulFunctionCall","src":"846:23:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"885:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"893:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"881:3:21"},"nodeType":"YulFunctionCall","src":"881:14:21"},{"name":"_4","nodeType":"YulIdentifier","src":"897:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"877:3:21"},"nodeType":"YulFunctionCall","src":"877:23:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"871:5:21"},"nodeType":"YulFunctionCall","src":"871:30:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"839:6:21"},"nodeType":"YulFunctionCall","src":"839:63:21"},"nodeType":"YulExpressionStatement","src":"839:63:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"790:1:21"},{"name":"_1","nodeType":"YulIdentifier","src":"793:2:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"787:2:21"},"nodeType":"YulFunctionCall","src":"787:9:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"797:19:21","statements":[{"nodeType":"YulAssignment","src":"799:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"808:1:21"},{"name":"_4","nodeType":"YulIdentifier","src":"811:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"804:3:21"},"nodeType":"YulFunctionCall","src":"804:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"799:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"783:3:21","statements":[]},"src":"779:133:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"936:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"944:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"932:3:21"},"nodeType":"YulFunctionCall","src":"932:15:21"},{"name":"_4","nodeType":"YulIdentifier","src":"949:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"928:3:21"},"nodeType":"YulFunctionCall","src":"928:24:21"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"921:6:21"},"nodeType":"YulFunctionCall","src":"921:35:21"},"nodeType":"YulExpressionStatement","src":"921:35:21"},{"nodeType":"YulAssignment","src":"965:15:21","value":{"name":"memPtr","nodeType":"YulIdentifier","src":"974:6:21"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"965:5:21"}]}]},"name":"abi_decode_string_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"184:6:21","type":""},{"name":"end","nodeType":"YulTypedName","src":"192:3:21","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"200:5:21","type":""}],"src":"146:840:21"},{"body":{"nodeType":"YulBlock","src":"1124:579:21","statements":[{"body":{"nodeType":"YulBlock","src":"1170:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1179:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1182:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1172:6:21"},"nodeType":"YulFunctionCall","src":"1172:12:21"},"nodeType":"YulExpressionStatement","src":"1172:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1145:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1154:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1141:3:21"},"nodeType":"YulFunctionCall","src":"1141:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1166:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1137:3:21"},"nodeType":"YulFunctionCall","src":"1137:32:21"},"nodeType":"YulIf","src":"1134:52:21"},{"nodeType":"YulVariableDeclaration","src":"1195:29:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1214:9:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1208:5:21"},"nodeType":"YulFunctionCall","src":"1208:16:21"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"1199:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1272:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1281:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1284:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1274:6:21"},"nodeType":"YulFunctionCall","src":"1274:12:21"},"nodeType":"YulExpressionStatement","src":"1274:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1246:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1257:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"1264:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1253:3:21"},"nodeType":"YulFunctionCall","src":"1253:16:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1243:2:21"},"nodeType":"YulFunctionCall","src":"1243:27:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1236:6:21"},"nodeType":"YulFunctionCall","src":"1236:35:21"},"nodeType":"YulIf","src":"1233:55:21"},{"nodeType":"YulAssignment","src":"1297:15:21","value":{"name":"value","nodeType":"YulIdentifier","src":"1307:5:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1297:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1321:39:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1345:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1356:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1341:3:21"},"nodeType":"YulFunctionCall","src":"1341:18:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1335:5:21"},"nodeType":"YulFunctionCall","src":"1335:25:21"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1325:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1369:28:21","value":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1387:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"1391:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1383:3:21"},"nodeType":"YulFunctionCall","src":"1383:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"1395:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1379:3:21"},"nodeType":"YulFunctionCall","src":"1379:18:21"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"1373:2:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1424:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1433:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1436:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1426:6:21"},"nodeType":"YulFunctionCall","src":"1426:12:21"},"nodeType":"YulExpressionStatement","src":"1426:12:21"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"1412:6:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1420:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1409:2:21"},"nodeType":"YulFunctionCall","src":"1409:14:21"},"nodeType":"YulIf","src":"1406:34:21"},{"nodeType":"YulAssignment","src":"1449:71:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1492:9:21"},{"name":"offset","nodeType":"YulIdentifier","src":"1503:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1488:3:21"},"nodeType":"YulFunctionCall","src":"1488:22:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1512:7:21"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1459:28:21"},"nodeType":"YulFunctionCall","src":"1459:61:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1449:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1529:41:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1555:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1566:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1551:3:21"},"nodeType":"YulFunctionCall","src":"1551:18:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1545:5:21"},"nodeType":"YulFunctionCall","src":"1545:25:21"},"variables":[{"name":"offset_1","nodeType":"YulTypedName","src":"1533:8:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1599:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1608:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1611:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1601:6:21"},"nodeType":"YulFunctionCall","src":"1601:12:21"},"nodeType":"YulExpressionStatement","src":"1601:12:21"}]},"condition":{"arguments":[{"name":"offset_1","nodeType":"YulIdentifier","src":"1585:8:21"},{"name":"_1","nodeType":"YulIdentifier","src":"1595:2:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1582:2:21"},"nodeType":"YulFunctionCall","src":"1582:16:21"},"nodeType":"YulIf","src":"1579:36:21"},{"nodeType":"YulAssignment","src":"1624:73:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1667:9:21"},{"name":"offset_1","nodeType":"YulIdentifier","src":"1678:8:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1663:3:21"},"nodeType":"YulFunctionCall","src":"1663:24:21"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1689:7:21"}],"functionName":{"name":"abi_decode_string_fromMemory","nodeType":"YulIdentifier","src":"1634:28:21"},"nodeType":"YulFunctionCall","src":"1634:63:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1624:6:21"}]}]},"name":"abi_decode_tuple_t_uint8t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1074:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1085:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1097:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1105:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1113:6:21","type":""}],"src":"991:712:21"},{"body":{"nodeType":"YulBlock","src":"1763:325:21","statements":[{"nodeType":"YulAssignment","src":"1773:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1787:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"1790:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1783:3:21"},"nodeType":"YulFunctionCall","src":"1783:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1773:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"1804:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"1834:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"1840:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1830:3:21"},"nodeType":"YulFunctionCall","src":"1830:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"1808:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"1881:31:21","statements":[{"nodeType":"YulAssignment","src":"1883:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1897:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1905:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1893:3:21"},"nodeType":"YulFunctionCall","src":"1893:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1883:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1861:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1854:6:21"},"nodeType":"YulFunctionCall","src":"1854:26:21"},"nodeType":"YulIf","src":"1851:61:21"},{"body":{"nodeType":"YulBlock","src":"1971:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1992:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1999:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2004:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1995:3:21"},"nodeType":"YulFunctionCall","src":"1995:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1985:6:21"},"nodeType":"YulFunctionCall","src":"1985:31:21"},"nodeType":"YulExpressionStatement","src":"1985:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2036:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2039:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2029:6:21"},"nodeType":"YulFunctionCall","src":"2029:15:21"},"nodeType":"YulExpressionStatement","src":"2029:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2064:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2067:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2057:6:21"},"nodeType":"YulFunctionCall","src":"2057:15:21"},"nodeType":"YulExpressionStatement","src":"2057:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"1927:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1950:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1958:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1947:2:21"},"nodeType":"YulFunctionCall","src":"1947:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"1924:2:21"},"nodeType":"YulFunctionCall","src":"1924:38:21"},"nodeType":"YulIf","src":"1921:161:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"1743:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1752:6:21","type":""}],"src":"1708:380:21"},{"body":{"nodeType":"YulBlock","src":"2149:65:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2166:1:21","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"2169:3:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2159:6:21"},"nodeType":"YulFunctionCall","src":"2159:14:21"},"nodeType":"YulExpressionStatement","src":"2159:14:21"},{"nodeType":"YulAssignment","src":"2182:26:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2200:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2203:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2190:9:21"},"nodeType":"YulFunctionCall","src":"2190:18:21"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"2182:4:21"}]}]},"name":"array_dataslot_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"2132:3:21","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"2140:4:21","type":""}],"src":"2093:121:21"},{"body":{"nodeType":"YulBlock","src":"2300:464:21","statements":[{"body":{"nodeType":"YulBlock","src":"2333:425:21","statements":[{"nodeType":"YulVariableDeclaration","src":"2347:11:21","value":{"kind":"number","nodeType":"YulLiteral","src":"2357:1:21","type":"","value":"0"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"2351:2:21","type":""}]},{"expression":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2378:2:21"},{"name":"array","nodeType":"YulIdentifier","src":"2382:5:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2371:6:21"},"nodeType":"YulFunctionCall","src":"2371:17:21"},"nodeType":"YulExpressionStatement","src":"2371:17:21"},{"nodeType":"YulVariableDeclaration","src":"2401:31:21","value":{"arguments":[{"name":"_1","nodeType":"YulIdentifier","src":"2423:2:21"},{"kind":"number","nodeType":"YulLiteral","src":"2427:4:21","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"2413:9:21"},"nodeType":"YulFunctionCall","src":"2413:19:21"},"variables":[{"name":"data","nodeType":"YulTypedName","src":"2405:4:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2445:57:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2468:4:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2478:1:21","type":"","value":"5"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2485:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2497:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2481:3:21"},"nodeType":"YulFunctionCall","src":"2481:19:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2474:3:21"},"nodeType":"YulFunctionCall","src":"2474:27:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2464:3:21"},"nodeType":"YulFunctionCall","src":"2464:38:21"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2449:11:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2539:23:21","statements":[{"nodeType":"YulAssignment","src":"2541:19:21","value":{"name":"data","nodeType":"YulIdentifier","src":"2556:4:21"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"2541:11:21"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2521:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"2533:4:21","type":"","value":"0x20"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2518:2:21"},"nodeType":"YulFunctionCall","src":"2518:20:21"},"nodeType":"YulIf","src":"2515:47:21"},{"nodeType":"YulVariableDeclaration","src":"2575:41:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2589:4:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2599:1:21","type":"","value":"5"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2606:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"2611:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2602:3:21"},"nodeType":"YulFunctionCall","src":"2602:12:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2595:3:21"},"nodeType":"YulFunctionCall","src":"2595:20:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2585:3:21"},"nodeType":"YulFunctionCall","src":"2585:31:21"},"variables":[{"name":"_2","nodeType":"YulTypedName","src":"2579:2:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2629:24:21","value":{"name":"deleteStart","nodeType":"YulIdentifier","src":"2642:11:21"},"variables":[{"name":"start","nodeType":"YulTypedName","src":"2633:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2727:21:21","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2736:5:21"},{"name":"_1","nodeType":"YulIdentifier","src":"2743:2:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2729:6:21"},"nodeType":"YulFunctionCall","src":"2729:17:21"},"nodeType":"YulExpressionStatement","src":"2729:17:21"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2677:5:21"},{"name":"_2","nodeType":"YulIdentifier","src":"2684:2:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2674:2:21"},"nodeType":"YulFunctionCall","src":"2674:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2688:26:21","statements":[{"nodeType":"YulAssignment","src":"2690:22:21","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2703:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"2710:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2699:3:21"},"nodeType":"YulFunctionCall","src":"2699:13:21"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2690:5:21"}]}]},"pre":{"nodeType":"YulBlock","src":"2670:3:21","statements":[]},"src":"2666:82:21"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2316:3:21"},{"kind":"number","nodeType":"YulLiteral","src":"2321:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2313:2:21"},"nodeType":"YulFunctionCall","src":"2313:11:21"},"nodeType":"YulIf","src":"2310:448:21"}]},"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2272:5:21","type":""},{"name":"len","nodeType":"YulTypedName","src":"2279:3:21","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2284:10:21","type":""}],"src":"2219:545:21"},{"body":{"nodeType":"YulBlock","src":"2854:81:21","statements":[{"nodeType":"YulAssignment","src":"2864:65:21","value":{"arguments":[{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2879:4:21"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2897:1:21","type":"","value":"3"},{"name":"len","nodeType":"YulIdentifier","src":"2900:3:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2893:3:21"},"nodeType":"YulFunctionCall","src":"2893:11:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2910:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2906:3:21"},"nodeType":"YulFunctionCall","src":"2906:6:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2889:3:21"},"nodeType":"YulFunctionCall","src":"2889:24:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2885:3:21"},"nodeType":"YulFunctionCall","src":"2885:29:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2875:3:21"},"nodeType":"YulFunctionCall","src":"2875:40:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2921:1:21","type":"","value":"1"},{"name":"len","nodeType":"YulIdentifier","src":"2924:3:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2917:3:21"},"nodeType":"YulFunctionCall","src":"2917:11:21"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2872:2:21"},"nodeType":"YulFunctionCall","src":"2872:57:21"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"2864:4:21"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2831:4:21","type":""},{"name":"len","nodeType":"YulTypedName","src":"2837:3:21","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"2845:4:21","type":""}],"src":"2769:166:21"},{"body":{"nodeType":"YulBlock","src":"3036:1256:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3046:24:21","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3066:3:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3060:5:21"},"nodeType":"YulFunctionCall","src":"3060:10:21"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3050:6:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3113:22:21","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"3115:16:21"},"nodeType":"YulFunctionCall","src":"3115:18:21"},"nodeType":"YulExpressionStatement","src":"3115:18:21"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3085:6:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3101:2:21","type":"","value":"64"},{"kind":"number","nodeType":"YulLiteral","src":"3105:1:21","type":"","value":"1"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3097:3:21"},"nodeType":"YulFunctionCall","src":"3097:10:21"},{"kind":"number","nodeType":"YulLiteral","src":"3109:1:21","type":"","value":"1"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3093:3:21"},"nodeType":"YulFunctionCall","src":"3093:18:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3082:2:21"},"nodeType":"YulFunctionCall","src":"3082:30:21"},"nodeType":"YulIf","src":"3079:56:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3188:4:21"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3226:4:21"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"3220:5:21"},"nodeType":"YulFunctionCall","src":"3220:11:21"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"3194:25:21"},"nodeType":"YulFunctionCall","src":"3194:38:21"},{"name":"newLen","nodeType":"YulIdentifier","src":"3234:6:21"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nodeType":"YulIdentifier","src":"3144:43:21"},"nodeType":"YulFunctionCall","src":"3144:97:21"},"nodeType":"YulExpressionStatement","src":"3144:97:21"},{"nodeType":"YulVariableDeclaration","src":"3250:18:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3267:1:21","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"3254:9:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3277:23:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3296:4:21","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nodeType":"YulTypedName","src":"3281:11:21","type":""}]},{"nodeType":"YulAssignment","src":"3309:24:21","value":{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3322:11:21"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3309:9:21"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"3379:656:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3393:35:21","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3412:6:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3424:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3420:3:21"},"nodeType":"YulFunctionCall","src":"3420:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3408:3:21"},"nodeType":"YulFunctionCall","src":"3408:20:21"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"3397:7:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3441:49:21","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3485:4:21"}],"functionName":{"name":"array_dataslot_string_storage","nodeType":"YulIdentifier","src":"3455:29:21"},"nodeType":"YulFunctionCall","src":"3455:35:21"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"3445:6:21","type":""}]},{"nodeType":"YulVariableDeclaration","src":"3503:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3512:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"3507:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"3590:172:21","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3615:6:21"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3633:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3638:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3629:3:21"},"nodeType":"YulFunctionCall","src":"3629:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3623:5:21"},"nodeType":"YulFunctionCall","src":"3623:26:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3608:6:21"},"nodeType":"YulFunctionCall","src":"3608:42:21"},"nodeType":"YulExpressionStatement","src":"3608:42:21"},{"nodeType":"YulAssignment","src":"3667:24:21","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3681:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3689:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3677:3:21"},"nodeType":"YulFunctionCall","src":"3677:14:21"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3667:6:21"}]},{"nodeType":"YulAssignment","src":"3708:40:21","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3725:9:21"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3736:11:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3721:3:21"},"nodeType":"YulFunctionCall","src":"3721:27:21"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"3708:9:21"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3537:1:21"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"3540:7:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3534:2:21"},"nodeType":"YulFunctionCall","src":"3534:14:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"3549:28:21","statements":[{"nodeType":"YulAssignment","src":"3551:24:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"3560:1:21"},{"name":"srcOffset_1","nodeType":"YulIdentifier","src":"3563:11:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3556:3:21"},"nodeType":"YulFunctionCall","src":"3556:19:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"3551:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"3530:3:21","statements":[]},"src":"3526:236:21"},{"body":{"nodeType":"YulBlock","src":"3810:166:21","statements":[{"nodeType":"YulVariableDeclaration","src":"3828:43:21","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3855:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"3860:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3851:3:21"},"nodeType":"YulFunctionCall","src":"3851:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3845:5:21"},"nodeType":"YulFunctionCall","src":"3845:26:21"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"3832:9:21","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"3895:6:21"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"3907:9:21"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3934:1:21","type":"","value":"3"},{"name":"newLen","nodeType":"YulIdentifier","src":"3937:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"3930:3:21"},"nodeType":"YulFunctionCall","src":"3930:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"3946:3:21","type":"","value":"248"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3926:3:21"},"nodeType":"YulFunctionCall","src":"3926:24:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3956:1:21","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3952:3:21"},"nodeType":"YulFunctionCall","src":"3952:6:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3922:3:21"},"nodeType":"YulFunctionCall","src":"3922:37:21"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3918:3:21"},"nodeType":"YulFunctionCall","src":"3918:42:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3903:3:21"},"nodeType":"YulFunctionCall","src":"3903:58:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3888:6:21"},"nodeType":"YulFunctionCall","src":"3888:74:21"},"nodeType":"YulExpressionStatement","src":"3888:74:21"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"3781:7:21"},{"name":"newLen","nodeType":"YulIdentifier","src":"3790:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3778:2:21"},"nodeType":"YulFunctionCall","src":"3778:19:21"},"nodeType":"YulIf","src":"3775:201:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"3996:4:21"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4010:1:21","type":"","value":"1"},{"name":"newLen","nodeType":"YulIdentifier","src":"4013:6:21"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4006:3:21"},"nodeType":"YulFunctionCall","src":"4006:14:21"},{"kind":"number","nodeType":"YulLiteral","src":"4022:1:21","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4002:3:21"},"nodeType":"YulFunctionCall","src":"4002:22:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"3989:6:21"},"nodeType":"YulFunctionCall","src":"3989:36:21"},"nodeType":"YulExpressionStatement","src":"3989:36:21"}]},"nodeType":"YulCase","src":"3372:663:21","value":{"kind":"number","nodeType":"YulLiteral","src":"3377:1:21","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"4052:234:21","statements":[{"nodeType":"YulVariableDeclaration","src":"4066:14:21","value":{"kind":"number","nodeType":"YulLiteral","src":"4079:1:21","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"4070:5:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"4115:67:21","statements":[{"nodeType":"YulAssignment","src":"4133:35:21","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4152:3:21"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4157:9:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4148:3:21"},"nodeType":"YulFunctionCall","src":"4148:19:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4142:5:21"},"nodeType":"YulFunctionCall","src":"4142:26:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4133:5:21"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"4096:6:21"},"nodeType":"YulIf","src":"4093:89:21"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4202:4:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4261:5:21"},{"name":"newLen","nodeType":"YulIdentifier","src":"4268:6:21"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"4208:52:21"},"nodeType":"YulFunctionCall","src":"4208:67:21"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4195:6:21"},"nodeType":"YulFunctionCall","src":"4195:81:21"},"nodeType":"YulExpressionStatement","src":"4195:81:21"}]},"nodeType":"YulCase","src":"4044:242:21","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"3352:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"3360:2:21","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3349:2:21"},"nodeType":"YulFunctionCall","src":"3349:14:21"},"nodeType":"YulSwitch","src":"3342:944:21"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3021:4:21","type":""},{"name":"src","nodeType":"YulTypedName","src":"3027:3:21","type":""}],"src":"2940:1352:21"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), _4), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), _4), 0)\n        array := memPtr\n    }\n    function abi_decode_tuple_t_uint8t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xff))) { revert(0, 0) }\n        value0 := value\n        let offset := mload(add(headStart, 32))\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value2 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b5060405162000d6438038062000d6483398101604081905262000034916200012c565b818160036200004483826200023f565b5060046200005382826200023f565b50505060ff909216608052506200030b9050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200008f57600080fd5b81516001600160401b0380821115620000ac57620000ac62000067565b604051601f8301601f19908116603f01168101908282118183101715620000d757620000d762000067565b81604052838152602092508683858801011115620000f457600080fd5b600091505b83821015620001185785820183015181830184015290820190620000f9565b600093810190920192909252949350505050565b6000806000606084860312156200014257600080fd5b835160ff811681146200015457600080fd5b60208501519093506001600160401b03808211156200017257600080fd5b62000180878388016200007d565b935060408601519150808211156200019757600080fd5b50620001a6868287016200007d565b9150509250925092565b600181811c90821680620001c557607f821691505b602082108103620001e657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200023a57600081815260208120601f850160051c81016020861015620002155750805b601f850160051c820191505b81811015620002365782815560010162000221565b5050505b505050565b81516001600160401b038111156200025b576200025b62000067565b62000273816200026c8454620001b0565b84620001ec565b602080601f831160018114620002ab5760008415620002925750858301515b600019600386901b1c1916600185901b17855562000236565b600085815260208120601f198616915b82811015620002dc57888601518255948401946001909101908401620002bb565b5085821015620002fb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051610a3d6200032760003960006101460152610a3d6000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806340c10f1911610081578063a457c2d71161005b578063a457c2d7146101c9578063a9059cbb146101dc578063dd62ed3e146101ef57600080fd5b806340c10f191461018357806370a082311461019857806395d89b41146101c157600080fd5b806323b872dd116100b257806323b872dd1461012c578063313ce5671461013f578063395093511461017057600080fd5b806306fdde03146100d9578063095ea7b3146100f757806318160ddd1461011a575b600080fd5b6100e1610228565b6040516100ee91906108b0565b60405180910390f35b61010a61010536600461091a565b6102ba565b60405190151581526020016100ee565b6002545b6040519081526020016100ee565b61010a61013a366004610944565b6102d4565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100ee565b61010a61017e36600461091a565b6102f8565b61019661019136600461091a565b610337565b005b61011e6101a6366004610980565b6001600160a01b031660009081526020819052604090205490565b6100e16103a1565b61010a6101d736600461091a565b6103b0565b61010a6101ea36600461091a565b61045a565b61011e6101fd3660046109a2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610237906109d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610263906109d5565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050905090565b6000336102c8818585610468565b60019150505b92915050565b6000336102e285828561058c565b6102ed85858561061e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102c89082908690610332908790610a0f565b610468565b670de0b6b3a764000081106103935760405162461bcd60e51b815260206004820152601460248201527f6d696e7420616d6f756e7420746f6f206869676800000000000000000000000060448201526064015b60405180910390fd5b61039d82826107f1565b5050565b606060048054610237906109d5565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561044d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161038a565b6102ed8286868403610468565b6000336102c881858561061e565b6001600160a01b0383166104ca5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161038a565b6001600160a01b03821661052b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161038a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610618578181101561060b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161038a565b6106188484848403610468565b50505050565b6001600160a01b03831661069a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161038a565b6001600160a01b0382166106fc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161038a565b6001600160a01b0383166000908152602081905260409020548181101561078b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161038a565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610618565b6001600160a01b0382166108475760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161038a565b80600260008282546108599190610a0f565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b818110156108dd578581018301518582016040015282016108c1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461091557600080fd5b919050565b6000806040838503121561092d57600080fd5b610936836108fe565b946020939093013593505050565b60008060006060848603121561095957600080fd5b610962846108fe565b9250610970602085016108fe565b9150604084013590509250925092565b60006020828403121561099257600080fd5b61099b826108fe565b9392505050565b600080604083850312156109b557600080fd5b6109be836108fe565b91506109cc602084016108fe565b90509250929050565b600181811c908216806109e957607f821691505b602082108103610a0957634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102ce57634e487b7160e01b600052601160045260246000fdfea164736f6c6343000813000a","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0xD64 CODESIZE SUB DUP1 PUSH3 0xD64 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x12C JUMP JUMPDEST DUP2 DUP2 PUSH1 0x3 PUSH3 0x44 DUP4 DUP3 PUSH3 0x23F JUMP JUMPDEST POP PUSH1 0x4 PUSH3 0x53 DUP3 DUP3 PUSH3 0x23F JUMP JUMPDEST POP POP POP PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x80 MSTORE POP PUSH3 0x30B SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0xAC JUMPI PUSH3 0xAC PUSH3 0x67 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0xD7 JUMPI PUSH3 0xD7 PUSH3 0x67 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0xF4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x118 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0xF9 JUMP JUMPDEST PUSH1 0x0 SWAP4 DUP2 ADD SWAP1 SWAP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH3 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x180 DUP8 DUP4 DUP9 ADD PUSH3 0x7D JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x197 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x1A6 DUP7 DUP3 DUP8 ADD PUSH3 0x7D JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x1C5 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x1E6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x23A JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x215 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x236 JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x221 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x25B JUMPI PUSH3 0x25B PUSH3 0x67 JUMP JUMPDEST PUSH3 0x273 DUP2 PUSH3 0x26C DUP5 SLOAD PUSH3 0x1B0 JUMP JUMPDEST DUP5 PUSH3 0x1EC JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x2AB JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x292 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x236 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x2DC JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x2BB JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x2FB JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xA3D PUSH3 0x327 PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x146 ADD MSTORE PUSH2 0xA3D PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x11A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10A PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE JUMP JUMPDEST PUSH2 0x10A PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE JUMP JUMPDEST PUSH2 0x10A PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x337 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11E PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x980 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x10A PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST PUSH2 0x10A PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x45A JUMP JUMPDEST PUSH2 0x11E PUSH2 0x1FD CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x237 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x263 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x285 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x293 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2C8 DUP2 DUP6 DUP6 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2E2 DUP6 DUP3 DUP6 PUSH2 0x58C JUMP JUMPDEST PUSH2 0x2ED DUP6 DUP6 DUP6 PUSH2 0x61E JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2C8 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x332 SWAP1 DUP8 SWAP1 PUSH2 0xA0F JUMP JUMPDEST PUSH2 0x468 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 LT PUSH2 0x393 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E7420616D6F756E7420746F6F2068696768000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x39D DUP3 DUP3 PUSH2 0x7F1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x237 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x44D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH2 0x2ED DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2C8 DUP2 DUP6 DUP6 PUSH2 0x61E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x52B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x618 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38A JUMP JUMPDEST PUSH2 0x618 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x468 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x69A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x78B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x618 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38A JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x859 SWAP2 SWAP1 PUSH2 0xA0F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8DD JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x8C1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x936 DUP4 PUSH2 0x8FE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x959 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x962 DUP5 PUSH2 0x8FE JUMP JUMPDEST SWAP3 POP PUSH2 0x970 PUSH1 0x20 DUP6 ADD PUSH2 0x8FE JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x99B DUP3 PUSH2 0x8FE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BE DUP4 PUSH2 0x8FE JUMP JUMPDEST SWAP2 POP PUSH2 0x9CC PUSH1 0x20 DUP5 ADD PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x9E9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xA09 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2CE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"134:447:20:-:0;;;206:131;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;285:5;292:7;2042:5:1;:13;285:5:20;2042::1;:13;:::i;:::-;-1:-1:-1;2065:7:1;:17;2075:7;2065;:17;:::i;:::-;-1:-1:-1;;;311:19:20::1;::::0;;::::1;;::::0;-1:-1:-1;134:447:20;;-1:-1:-1;134:447:20;14:127:21;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:840;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:21;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:21;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;730:3;725:2;720;712:6;708:15;704:24;701:33;698:53;;;747:1;744;737:12;698:53;769:1;760:10;;779:133;793:2;790:1;787:9;779:133;;;881:14;;;877:23;;871:30;850:14;;;846:23;;839:63;804:10;;;;779:133;;;954:1;932:15;;;928:24;;;921:35;;;;936:6;146:840;-1:-1:-1;;;;146:840:21:o;991:712::-;1097:6;1105;1113;1166:2;1154:9;1145:7;1141:23;1137:32;1134:52;;;1182:1;1179;1172:12;1134:52;1214:9;1208:16;1264:4;1257:5;1253:16;1246:5;1243:27;1233:55;;1284:1;1281;1274:12;1233:55;1356:2;1341:18;;1335:25;1307:5;;-1:-1:-1;;;;;;1409:14:21;;;1406:34;;;1436:1;1433;1426:12;1406:34;1459:61;1512:7;1503:6;1492:9;1488:22;1459:61;:::i;:::-;1449:71;;1566:2;1555:9;1551:18;1545:25;1529:41;;1595:2;1585:8;1582:16;1579:36;;;1611:1;1608;1601:12;1579:36;;1634:63;1689:7;1678:8;1667:9;1663:24;1634:63;:::i;:::-;1624:73;;;991:712;;;;;:::o;1708:380::-;1787:1;1783:12;;;;1830;;;1851:61;;1905:4;1897:6;1893:17;1883:27;;1851:61;1958:2;1950:6;1947:14;1927:18;1924:38;1921:161;;2004:10;1999:3;1995:20;1992:1;1985:31;2039:4;2036:1;2029:15;2067:4;2064:1;2057:15;1921:161;;1708:380;;;:::o;2219:545::-;2321:2;2316:3;2313:11;2310:448;;;2357:1;2382:5;2378:2;2371:17;2427:4;2423:2;2413:19;2497:2;2485:10;2481:19;2478:1;2474:27;2468:4;2464:38;2533:4;2521:10;2518:20;2515:47;;;-1:-1:-1;2556:4:21;2515:47;2611:2;2606:3;2602:12;2599:1;2595:20;2589:4;2585:31;2575:41;;2666:82;2684:2;2677:5;2674:13;2666:82;;;2729:17;;;2710:1;2699:13;2666:82;;;2670:3;;;2310:448;2219:545;;;:::o;2940:1352::-;3060:10;;-1:-1:-1;;;;;3082:30:21;;3079:56;;;3115:18;;:::i;:::-;3144:97;3234:6;3194:38;3226:4;3220:11;3194:38;:::i;:::-;3188:4;3144:97;:::i;:::-;3296:4;;3360:2;3349:14;;3377:1;3372:663;;;;4079:1;4096:6;4093:89;;;-1:-1:-1;4148:19:21;;;4142:26;4093:89;-1:-1:-1;;2897:1:21;2893:11;;;2889:24;2885:29;2875:40;2921:1;2917:11;;;2872:57;4195:81;;3342:944;;3372:663;2166:1;2159:14;;;2203:4;2190:18;;-1:-1:-1;;3408:20:21;;;3526:236;3540:7;3537:1;3534:14;3526:236;;;3629:19;;;3623:26;3608:42;;3721:27;;;;3689:1;3677:14;;;;3556:19;;3526:236;;;3530:3;3790:6;3781:7;3778:19;3775:201;;;3851:19;;;3845:26;-1:-1:-1;;3934:1:21;3930:14;;;3946:3;3926:24;3922:37;3918:42;3903:58;3888:74;;3775:201;-1:-1:-1;;;;;4022:1:21;4006:14;;;4002:22;3989:36;;-1:-1:-1;2940:1352:21:o;:::-;134:447:20;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_698":{"entryPoint":null,"id":698,"parameterSlots":3,"returnSlots":0},"@_approve_633":{"entryPoint":1128,"id":633,"parameterSlots":3,"returnSlots":0},"@_beforeTokenTransfer_687":{"entryPoint":null,"id":687,"parameterSlots":3,"returnSlots":0},"@_mint_516":{"entryPoint":2033,"id":516,"parameterSlots":2,"returnSlots":0},"@_msgSender_1461":{"entryPoint":null,"id":1461,"parameterSlots":0,"returnSlots":1},"@_spendAllowance_676":{"entryPoint":1420,"id":676,"parameterSlots":3,"returnSlots":0},"@_transfer_459":{"entryPoint":1566,"id":459,"parameterSlots":3,"returnSlots":0},"@allowance_254":{"entryPoint":null,"id":254,"parameterSlots":2,"returnSlots":1},"@approve_279":{"entryPoint":698,"id":279,"parameterSlots":2,"returnSlots":1},"@balanceOf_211":{"entryPoint":null,"id":211,"parameterSlots":1,"returnSlots":1},"@decimals_4337":{"entryPoint":null,"id":4337,"parameterSlots":0,"returnSlots":1},"@decreaseAllowance_382":{"entryPoint":944,"id":382,"parameterSlots":2,"returnSlots":1},"@increaseAllowance_341":{"entryPoint":760,"id":341,"parameterSlots":2,"returnSlots":1},"@mint_4357":{"entryPoint":823,"id":4357,"parameterSlots":2,"returnSlots":0},"@name_167":{"entryPoint":552,"id":167,"parameterSlots":0,"returnSlots":1},"@symbol_177":{"entryPoint":929,"id":177,"parameterSlots":0,"returnSlots":1},"@totalSupply_197":{"entryPoint":null,"id":197,"parameterSlots":0,"returnSlots":1},"@transferFrom_312":{"entryPoint":724,"id":312,"parameterSlots":3,"returnSlots":1},"@transfer_236":{"entryPoint":1114,"id":236,"parameterSlots":2,"returnSlots":1},"abi_decode_address":{"entryPoint":2302,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":2432,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":2466,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":2372,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":2330,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":2224,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_492e33be65190c9b19afa3bf75dd0134013152c2257b6d6637de9b6678a7501d__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":2575,"id":null,"parameterSlots":2,"returnSlots":1},"extract_byte_array_length":{"entryPoint":2517,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6486:21","statements":[{"nodeType":"YulBlock","src":"6:3:21","statements":[]},{"body":{"nodeType":"YulBlock","src":"135:427:21","statements":[{"nodeType":"YulVariableDeclaration","src":"145:12:21","value":{"kind":"number","nodeType":"YulLiteral","src":"155:2:21","type":"","value":"32"},"variables":[{"name":"_1","nodeType":"YulTypedName","src":"149:2:21","type":""}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"173:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"184:2:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"166:6:21"},"nodeType":"YulFunctionCall","src":"166:21:21"},"nodeType":"YulExpressionStatement","src":"166:21:21"},{"nodeType":"YulVariableDeclaration","src":"196:27:21","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"216:6:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"210:5:21"},"nodeType":"YulFunctionCall","src":"210:13:21"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"200:6:21","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"243:9:21"},{"name":"_1","nodeType":"YulIdentifier","src":"254:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"239:3:21"},"nodeType":"YulFunctionCall","src":"239:18:21"},{"name":"length","nodeType":"YulIdentifier","src":"259:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"232:6:21"},"nodeType":"YulFunctionCall","src":"232:34:21"},"nodeType":"YulExpressionStatement","src":"232:34:21"},{"nodeType":"YulVariableDeclaration","src":"275:10:21","value":{"kind":"number","nodeType":"YulLiteral","src":"284:1:21","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"279:1:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"344:90:21","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"373:9:21"},{"name":"i","nodeType":"YulIdentifier","src":"384:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"369:3:21"},"nodeType":"YulFunctionCall","src":"369:17:21"},{"kind":"number","nodeType":"YulLiteral","src":"388:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"365:3:21"},"nodeType":"YulFunctionCall","src":"365:26:21"},{"arguments":[{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"407:6:21"},{"name":"i","nodeType":"YulIdentifier","src":"415:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"403:3:21"},"nodeType":"YulFunctionCall","src":"403:14:21"},{"name":"_1","nodeType":"YulIdentifier","src":"419:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"399:3:21"},"nodeType":"YulFunctionCall","src":"399:23:21"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"393:5:21"},"nodeType":"YulFunctionCall","src":"393:30:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"358:6:21"},"nodeType":"YulFunctionCall","src":"358:66:21"},"nodeType":"YulExpressionStatement","src":"358:66:21"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"305:1:21"},{"name":"length","nodeType":"YulIdentifier","src":"308:6:21"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"302:2:21"},"nodeType":"YulFunctionCall","src":"302:13:21"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"316:19:21","statements":[{"nodeType":"YulAssignment","src":"318:15:21","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"327:1:21"},{"name":"_1","nodeType":"YulIdentifier","src":"330:2:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"323:3:21"},"nodeType":"YulFunctionCall","src":"323:10:21"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"318:1:21"}]}]},"pre":{"nodeType":"YulBlock","src":"298:3:21","statements":[]},"src":"294:140:21"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"458:9:21"},{"name":"length","nodeType":"YulIdentifier","src":"469:6:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"454:3:21"},"nodeType":"YulFunctionCall","src":"454:22:21"},{"kind":"number","nodeType":"YulLiteral","src":"478:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"450:3:21"},"nodeType":"YulFunctionCall","src":"450:31:21"},{"kind":"number","nodeType":"YulLiteral","src":"483:1:21","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"443:6:21"},"nodeType":"YulFunctionCall","src":"443:42:21"},"nodeType":"YulExpressionStatement","src":"443:42:21"},{"nodeType":"YulAssignment","src":"494:62:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"510:9:21"},{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"529:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"537:2:21","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"525:3:21"},"nodeType":"YulFunctionCall","src":"525:15:21"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"546:2:21","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"542:3:21"},"nodeType":"YulFunctionCall","src":"542:7:21"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"521:3:21"},"nodeType":"YulFunctionCall","src":"521:29:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"506:3:21"},"nodeType":"YulFunctionCall","src":"506:45:21"},{"kind":"number","nodeType":"YulLiteral","src":"553:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"502:3:21"},"nodeType":"YulFunctionCall","src":"502:54:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"494:4:21"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"104:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"115:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"126:4:21","type":""}],"src":"14:548:21"},{"body":{"nodeType":"YulBlock","src":"616:147:21","statements":[{"nodeType":"YulAssignment","src":"626:29:21","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"648:6:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"635:12:21"},"nodeType":"YulFunctionCall","src":"635:20:21"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"626:5:21"}]},{"body":{"nodeType":"YulBlock","src":"741:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"750:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"753:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"743:6:21"},"nodeType":"YulFunctionCall","src":"743:12:21"},"nodeType":"YulExpressionStatement","src":"743:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"677:5:21"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"688:5:21"},{"kind":"number","nodeType":"YulLiteral","src":"695:42:21","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"684:3:21"},"nodeType":"YulFunctionCall","src":"684:54:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"674:2:21"},"nodeType":"YulFunctionCall","src":"674:65:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"667:6:21"},"nodeType":"YulFunctionCall","src":"667:73:21"},"nodeType":"YulIf","src":"664:93:21"}]},"name":"abi_decode_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"595:6:21","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"606:5:21","type":""}],"src":"567:196:21"},{"body":{"nodeType":"YulBlock","src":"855:167:21","statements":[{"body":{"nodeType":"YulBlock","src":"901:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"910:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"913:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"903:6:21"},"nodeType":"YulFunctionCall","src":"903:12:21"},"nodeType":"YulExpressionStatement","src":"903:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"876:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"885:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"872:3:21"},"nodeType":"YulFunctionCall","src":"872:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"897:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"868:3:21"},"nodeType":"YulFunctionCall","src":"868:32:21"},"nodeType":"YulIf","src":"865:52:21"},{"nodeType":"YulAssignment","src":"926:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"955:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"936:18:21"},"nodeType":"YulFunctionCall","src":"936:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"926:6:21"}]},{"nodeType":"YulAssignment","src":"974:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1001:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1012:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"997:3:21"},"nodeType":"YulFunctionCall","src":"997:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"984:12:21"},"nodeType":"YulFunctionCall","src":"984:32:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"974:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"813:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"824:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"836:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"844:6:21","type":""}],"src":"768:254:21"},{"body":{"nodeType":"YulBlock","src":"1122:92:21","statements":[{"nodeType":"YulAssignment","src":"1132:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1144:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1155:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1140:3:21"},"nodeType":"YulFunctionCall","src":"1140:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1132:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1174:9:21"},{"arguments":[{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1199:6:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1192:6:21"},"nodeType":"YulFunctionCall","src":"1192:14:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1185:6:21"},"nodeType":"YulFunctionCall","src":"1185:22:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1167:6:21"},"nodeType":"YulFunctionCall","src":"1167:41:21"},"nodeType":"YulExpressionStatement","src":"1167:41:21"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1091:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1102:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1113:4:21","type":""}],"src":"1027:187:21"},{"body":{"nodeType":"YulBlock","src":"1320:76:21","statements":[{"nodeType":"YulAssignment","src":"1330:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1342:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1353:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1338:3:21"},"nodeType":"YulFunctionCall","src":"1338:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1330:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1372:9:21"},{"name":"value0","nodeType":"YulIdentifier","src":"1383:6:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1365:6:21"},"nodeType":"YulFunctionCall","src":"1365:25:21"},"nodeType":"YulExpressionStatement","src":"1365:25:21"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1289:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1300:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1311:4:21","type":""}],"src":"1219:177:21"},{"body":{"nodeType":"YulBlock","src":"1505:224:21","statements":[{"body":{"nodeType":"YulBlock","src":"1551:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1560:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1563:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1553:6:21"},"nodeType":"YulFunctionCall","src":"1553:12:21"},"nodeType":"YulExpressionStatement","src":"1553:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1526:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"1535:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1522:3:21"},"nodeType":"YulFunctionCall","src":"1522:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"1547:2:21","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1518:3:21"},"nodeType":"YulFunctionCall","src":"1518:32:21"},"nodeType":"YulIf","src":"1515:52:21"},{"nodeType":"YulAssignment","src":"1576:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1605:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1586:18:21"},"nodeType":"YulFunctionCall","src":"1586:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1576:6:21"}]},{"nodeType":"YulAssignment","src":"1624:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1657:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1668:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1653:3:21"},"nodeType":"YulFunctionCall","src":"1653:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"1634:18:21"},"nodeType":"YulFunctionCall","src":"1634:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"1624:6:21"}]},{"nodeType":"YulAssignment","src":"1681:42:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1708:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1719:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1704:3:21"},"nodeType":"YulFunctionCall","src":"1704:18:21"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"1691:12:21"},"nodeType":"YulFunctionCall","src":"1691:32:21"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"1681:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1455:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1466:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1478:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"1486:6:21","type":""},{"name":"value2","nodeType":"YulTypedName","src":"1494:6:21","type":""}],"src":"1401:328:21"},{"body":{"nodeType":"YulBlock","src":"1831:87:21","statements":[{"nodeType":"YulAssignment","src":"1841:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1853:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"1864:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1849:3:21"},"nodeType":"YulFunctionCall","src":"1849:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1841:4:21"}]},{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1883:9:21"},{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1898:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"1906:4:21","type":"","value":"0xff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1894:3:21"},"nodeType":"YulFunctionCall","src":"1894:17:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1876:6:21"},"nodeType":"YulFunctionCall","src":"1876:36:21"},"nodeType":"YulExpressionStatement","src":"1876:36:21"}]},"name":"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1800:9:21","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1811:6:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1822:4:21","type":""}],"src":"1734:184:21"},{"body":{"nodeType":"YulBlock","src":"1993:116:21","statements":[{"body":{"nodeType":"YulBlock","src":"2039:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2048:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2051:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2041:6:21"},"nodeType":"YulFunctionCall","src":"2041:12:21"},"nodeType":"YulExpressionStatement","src":"2041:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2014:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2023:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2010:3:21"},"nodeType":"YulFunctionCall","src":"2010:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2035:2:21","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2006:3:21"},"nodeType":"YulFunctionCall","src":"2006:32:21"},"nodeType":"YulIf","src":"2003:52:21"},{"nodeType":"YulAssignment","src":"2064:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2093:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2074:18:21"},"nodeType":"YulFunctionCall","src":"2074:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2064:6:21"}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1959:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1970:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1982:6:21","type":""}],"src":"1923:186:21"},{"body":{"nodeType":"YulBlock","src":"2201:173:21","statements":[{"body":{"nodeType":"YulBlock","src":"2247:16:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2256:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2259:1:21","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2249:6:21"},"nodeType":"YulFunctionCall","src":"2249:12:21"},"nodeType":"YulExpressionStatement","src":"2249:12:21"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2222:7:21"},{"name":"headStart","nodeType":"YulIdentifier","src":"2231:9:21"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2218:3:21"},"nodeType":"YulFunctionCall","src":"2218:23:21"},{"kind":"number","nodeType":"YulLiteral","src":"2243:2:21","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2214:3:21"},"nodeType":"YulFunctionCall","src":"2214:32:21"},"nodeType":"YulIf","src":"2211:52:21"},{"nodeType":"YulAssignment","src":"2272:39:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2301:9:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2282:18:21"},"nodeType":"YulFunctionCall","src":"2282:29:21"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"2272:6:21"}]},{"nodeType":"YulAssignment","src":"2320:48:21","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2353:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"2364:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2349:3:21"},"nodeType":"YulFunctionCall","src":"2349:18:21"}],"functionName":{"name":"abi_decode_address","nodeType":"YulIdentifier","src":"2330:18:21"},"nodeType":"YulFunctionCall","src":"2330:38:21"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"2320:6:21"}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2159:9:21","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2170:7:21","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2182:6:21","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2190:6:21","type":""}],"src":"2114:260:21"},{"body":{"nodeType":"YulBlock","src":"2434:325:21","statements":[{"nodeType":"YulAssignment","src":"2444:22:21","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2458:1:21","type":"","value":"1"},{"name":"data","nodeType":"YulIdentifier","src":"2461:4:21"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2454:3:21"},"nodeType":"YulFunctionCall","src":"2454:12:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2444:6:21"}]},{"nodeType":"YulVariableDeclaration","src":"2475:38:21","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"2505:4:21"},{"kind":"number","nodeType":"YulLiteral","src":"2511:1:21","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2501:3:21"},"nodeType":"YulFunctionCall","src":"2501:12:21"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"2479:18:21","type":""}]},{"body":{"nodeType":"YulBlock","src":"2552:31:21","statements":[{"nodeType":"YulAssignment","src":"2554:27:21","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2568:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2576:4:21","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2564:3:21"},"nodeType":"YulFunctionCall","src":"2564:17:21"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"2554:6:21"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2532:18:21"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2525:6:21"},"nodeType":"YulFunctionCall","src":"2525:26:21"},"nodeType":"YulIf","src":"2522:61:21"},{"body":{"nodeType":"YulBlock","src":"2642:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2663:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2670:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2675:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2666:3:21"},"nodeType":"YulFunctionCall","src":"2666:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2656:6:21"},"nodeType":"YulFunctionCall","src":"2656:31:21"},"nodeType":"YulExpressionStatement","src":"2656:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2707:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2710:4:21","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2700:6:21"},"nodeType":"YulFunctionCall","src":"2700:15:21"},"nodeType":"YulExpressionStatement","src":"2700:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2735:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2738:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2728:6:21"},"nodeType":"YulFunctionCall","src":"2728:15:21"},"nodeType":"YulExpressionStatement","src":"2728:15:21"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"2598:18:21"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2621:6:21"},{"kind":"number","nodeType":"YulLiteral","src":"2629:2:21","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2618:2:21"},"nodeType":"YulFunctionCall","src":"2618:14:21"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2595:2:21"},"nodeType":"YulFunctionCall","src":"2595:38:21"},"nodeType":"YulIf","src":"2592:161:21"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"2414:4:21","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"2423:6:21","type":""}],"src":"2379:380:21"},{"body":{"nodeType":"YulBlock","src":"2812:174:21","statements":[{"nodeType":"YulAssignment","src":"2822:16:21","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2833:1:21"},{"name":"y","nodeType":"YulIdentifier","src":"2836:1:21"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2829:3:21"},"nodeType":"YulFunctionCall","src":"2829:9:21"},"variableNames":[{"name":"sum","nodeType":"YulIdentifier","src":"2822:3:21"}]},{"body":{"nodeType":"YulBlock","src":"2869:111:21","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2890:1:21","type":"","value":"0"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2897:3:21","type":"","value":"224"},{"kind":"number","nodeType":"YulLiteral","src":"2902:10:21","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2893:3:21"},"nodeType":"YulFunctionCall","src":"2893:20:21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2883:6:21"},"nodeType":"YulFunctionCall","src":"2883:31:21"},"nodeType":"YulExpressionStatement","src":"2883:31:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2934:1:21","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"2937:4:21","type":"","value":"0x11"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2927:6:21"},"nodeType":"YulFunctionCall","src":"2927:15:21"},"nodeType":"YulExpressionStatement","src":"2927:15:21"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2962:1:21","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2965:4:21","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2955:6:21"},"nodeType":"YulFunctionCall","src":"2955:15:21"},"nodeType":"YulExpressionStatement","src":"2955:15:21"}]},"condition":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2853:1:21"},{"name":"sum","nodeType":"YulIdentifier","src":"2856:3:21"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2850:2:21"},"nodeType":"YulFunctionCall","src":"2850:10:21"},"nodeType":"YulIf","src":"2847:133:21"}]},"name":"checked_add_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nodeType":"YulTypedName","src":"2795:1:21","type":""},{"name":"y","nodeType":"YulTypedName","src":"2798:1:21","type":""}],"returnVariables":[{"name":"sum","nodeType":"YulTypedName","src":"2804:3:21","type":""}],"src":"2764:222:21"},{"body":{"nodeType":"YulBlock","src":"3165:170:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3182:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3193:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3175:6:21"},"nodeType":"YulFunctionCall","src":"3175:21:21"},"nodeType":"YulExpressionStatement","src":"3175:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3216:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3227:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3212:3:21"},"nodeType":"YulFunctionCall","src":"3212:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3232:2:21","type":"","value":"20"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3205:6:21"},"nodeType":"YulFunctionCall","src":"3205:30:21"},"nodeType":"YulExpressionStatement","src":"3205:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3255:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3266:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3251:3:21"},"nodeType":"YulFunctionCall","src":"3251:18:21"},{"hexValue":"6d696e7420616d6f756e7420746f6f2068696768","kind":"string","nodeType":"YulLiteral","src":"3271:22:21","type":"","value":"mint amount too high"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3244:6:21"},"nodeType":"YulFunctionCall","src":"3244:50:21"},"nodeType":"YulExpressionStatement","src":"3244:50:21"},{"nodeType":"YulAssignment","src":"3303:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3315:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3326:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3311:3:21"},"nodeType":"YulFunctionCall","src":"3311:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3303:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_492e33be65190c9b19afa3bf75dd0134013152c2257b6d6637de9b6678a7501d__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3142:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3156:4:21","type":""}],"src":"2991:344:21"},{"body":{"nodeType":"YulBlock","src":"3514:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3531:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3542:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3524:6:21"},"nodeType":"YulFunctionCall","src":"3524:21:21"},"nodeType":"YulExpressionStatement","src":"3524:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3565:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3576:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3561:3:21"},"nodeType":"YulFunctionCall","src":"3561:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3581:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3554:6:21"},"nodeType":"YulFunctionCall","src":"3554:30:21"},"nodeType":"YulExpressionStatement","src":"3554:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3604:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3615:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3600:3:21"},"nodeType":"YulFunctionCall","src":"3600:18:21"},{"hexValue":"45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77","kind":"string","nodeType":"YulLiteral","src":"3620:34:21","type":"","value":"ERC20: decreased allowance below"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3593:6:21"},"nodeType":"YulFunctionCall","src":"3593:62:21"},"nodeType":"YulExpressionStatement","src":"3593:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3675:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3686:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3671:3:21"},"nodeType":"YulFunctionCall","src":"3671:18:21"},{"hexValue":"207a65726f","kind":"string","nodeType":"YulLiteral","src":"3691:7:21","type":"","value":" zero"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3664:6:21"},"nodeType":"YulFunctionCall","src":"3664:35:21"},"nodeType":"YulExpressionStatement","src":"3664:35:21"},{"nodeType":"YulAssignment","src":"3708:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3720:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3731:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3716:3:21"},"nodeType":"YulFunctionCall","src":"3716:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3708:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3491:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3505:4:21","type":""}],"src":"3340:401:21"},{"body":{"nodeType":"YulBlock","src":"3920:226:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3937:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3948:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3930:6:21"},"nodeType":"YulFunctionCall","src":"3930:21:21"},"nodeType":"YulExpressionStatement","src":"3930:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3971:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"3982:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3967:3:21"},"nodeType":"YulFunctionCall","src":"3967:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"3987:2:21","type":"","value":"36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3960:6:21"},"nodeType":"YulFunctionCall","src":"3960:30:21"},"nodeType":"YulExpressionStatement","src":"3960:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4010:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4021:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4006:3:21"},"nodeType":"YulFunctionCall","src":"4006:18:21"},{"hexValue":"45524332303a20617070726f76652066726f6d20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"4026:34:21","type":"","value":"ERC20: approve from the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3999:6:21"},"nodeType":"YulFunctionCall","src":"3999:62:21"},"nodeType":"YulExpressionStatement","src":"3999:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4081:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4092:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4077:3:21"},"nodeType":"YulFunctionCall","src":"4077:18:21"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"4097:6:21","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4070:6:21"},"nodeType":"YulFunctionCall","src":"4070:34:21"},"nodeType":"YulExpressionStatement","src":"4070:34:21"},{"nodeType":"YulAssignment","src":"4113:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4125:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4136:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4121:3:21"},"nodeType":"YulFunctionCall","src":"4121:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4113:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3897:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3911:4:21","type":""}],"src":"3746:400:21"},{"body":{"nodeType":"YulBlock","src":"4325:224:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4342:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4335:6:21"},"nodeType":"YulFunctionCall","src":"4335:21:21"},"nodeType":"YulExpressionStatement","src":"4335:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4376:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4387:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4372:3:21"},"nodeType":"YulFunctionCall","src":"4372:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4392:2:21","type":"","value":"34"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4365:6:21"},"nodeType":"YulFunctionCall","src":"4365:30:21"},"nodeType":"YulExpressionStatement","src":"4365:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4415:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4426:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4411:3:21"},"nodeType":"YulFunctionCall","src":"4411:18:21"},{"hexValue":"45524332303a20617070726f766520746f20746865207a65726f206164647265","kind":"string","nodeType":"YulLiteral","src":"4431:34:21","type":"","value":"ERC20: approve to the zero addre"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4404:6:21"},"nodeType":"YulFunctionCall","src":"4404:62:21"},"nodeType":"YulExpressionStatement","src":"4404:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4486:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4497:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4482:3:21"},"nodeType":"YulFunctionCall","src":"4482:18:21"},{"hexValue":"7373","kind":"string","nodeType":"YulLiteral","src":"4502:4:21","type":"","value":"ss"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4475:6:21"},"nodeType":"YulFunctionCall","src":"4475:32:21"},"nodeType":"YulExpressionStatement","src":"4475:32:21"},{"nodeType":"YulAssignment","src":"4516:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4528:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4539:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4524:3:21"},"nodeType":"YulFunctionCall","src":"4524:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4516:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4302:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4316:4:21","type":""}],"src":"4151:398:21"},{"body":{"nodeType":"YulBlock","src":"4728:179:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4745:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4756:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4738:6:21"},"nodeType":"YulFunctionCall","src":"4738:21:21"},"nodeType":"YulExpressionStatement","src":"4738:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4779:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4790:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4775:3:21"},"nodeType":"YulFunctionCall","src":"4775:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"4795:2:21","type":"","value":"29"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4768:6:21"},"nodeType":"YulFunctionCall","src":"4768:30:21"},"nodeType":"YulExpressionStatement","src":"4768:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4818:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4829:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4814:3:21"},"nodeType":"YulFunctionCall","src":"4814:18:21"},{"hexValue":"45524332303a20696e73756666696369656e7420616c6c6f77616e6365","kind":"string","nodeType":"YulLiteral","src":"4834:31:21","type":"","value":"ERC20: insufficient allowance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4807:6:21"},"nodeType":"YulFunctionCall","src":"4807:59:21"},"nodeType":"YulExpressionStatement","src":"4807:59:21"},{"nodeType":"YulAssignment","src":"4875:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4887:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"4898:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4883:3:21"},"nodeType":"YulFunctionCall","src":"4883:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4875:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4705:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4719:4:21","type":""}],"src":"4554:353:21"},{"body":{"nodeType":"YulBlock","src":"5086:227:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5103:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5114:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5096:6:21"},"nodeType":"YulFunctionCall","src":"5096:21:21"},"nodeType":"YulExpressionStatement","src":"5096:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5137:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5148:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5133:3:21"},"nodeType":"YulFunctionCall","src":"5133:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5153:2:21","type":"","value":"37"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5126:6:21"},"nodeType":"YulFunctionCall","src":"5126:30:21"},"nodeType":"YulExpressionStatement","src":"5126:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5176:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5187:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5172:3:21"},"nodeType":"YulFunctionCall","src":"5172:18:21"},{"hexValue":"45524332303a207472616e736665722066726f6d20746865207a65726f206164","kind":"string","nodeType":"YulLiteral","src":"5192:34:21","type":"","value":"ERC20: transfer from the zero ad"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5165:6:21"},"nodeType":"YulFunctionCall","src":"5165:62:21"},"nodeType":"YulExpressionStatement","src":"5165:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5247:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5258:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5243:3:21"},"nodeType":"YulFunctionCall","src":"5243:18:21"},{"hexValue":"6472657373","kind":"string","nodeType":"YulLiteral","src":"5263:7:21","type":"","value":"dress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5236:6:21"},"nodeType":"YulFunctionCall","src":"5236:35:21"},"nodeType":"YulExpressionStatement","src":"5236:35:21"},{"nodeType":"YulAssignment","src":"5280:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5292:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5303:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5288:3:21"},"nodeType":"YulFunctionCall","src":"5288:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5280:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5063:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5077:4:21","type":""}],"src":"4912:401:21"},{"body":{"nodeType":"YulBlock","src":"5492:225:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5509:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5520:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5502:6:21"},"nodeType":"YulFunctionCall","src":"5502:21:21"},"nodeType":"YulExpressionStatement","src":"5502:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5543:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5554:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5539:3:21"},"nodeType":"YulFunctionCall","src":"5539:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5559:2:21","type":"","value":"35"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5532:6:21"},"nodeType":"YulFunctionCall","src":"5532:30:21"},"nodeType":"YulExpressionStatement","src":"5532:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5582:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5593:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5578:3:21"},"nodeType":"YulFunctionCall","src":"5578:18:21"},{"hexValue":"45524332303a207472616e7366657220746f20746865207a65726f2061646472","kind":"string","nodeType":"YulLiteral","src":"5598:34:21","type":"","value":"ERC20: transfer to the zero addr"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5571:6:21"},"nodeType":"YulFunctionCall","src":"5571:62:21"},"nodeType":"YulExpressionStatement","src":"5571:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5653:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5664:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5649:3:21"},"nodeType":"YulFunctionCall","src":"5649:18:21"},{"hexValue":"657373","kind":"string","nodeType":"YulLiteral","src":"5669:5:21","type":"","value":"ess"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5642:6:21"},"nodeType":"YulFunctionCall","src":"5642:33:21"},"nodeType":"YulExpressionStatement","src":"5642:33:21"},{"nodeType":"YulAssignment","src":"5684:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5696:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5707:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5692:3:21"},"nodeType":"YulFunctionCall","src":"5692:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5684:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5469:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5483:4:21","type":""}],"src":"5318:399:21"},{"body":{"nodeType":"YulBlock","src":"5896:228:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5913:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5924:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5906:6:21"},"nodeType":"YulFunctionCall","src":"5906:21:21"},"nodeType":"YulExpressionStatement","src":"5906:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5947:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5958:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5943:3:21"},"nodeType":"YulFunctionCall","src":"5943:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"5963:2:21","type":"","value":"38"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5936:6:21"},"nodeType":"YulFunctionCall","src":"5936:30:21"},"nodeType":"YulExpressionStatement","src":"5936:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5986:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"5997:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5982:3:21"},"nodeType":"YulFunctionCall","src":"5982:18:21"},{"hexValue":"45524332303a207472616e7366657220616d6f756e7420657863656564732062","kind":"string","nodeType":"YulLiteral","src":"6002:34:21","type":"","value":"ERC20: transfer amount exceeds b"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5975:6:21"},"nodeType":"YulFunctionCall","src":"5975:62:21"},"nodeType":"YulExpressionStatement","src":"5975:62:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6057:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6068:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6053:3:21"},"nodeType":"YulFunctionCall","src":"6053:18:21"},{"hexValue":"616c616e6365","kind":"string","nodeType":"YulLiteral","src":"6073:8:21","type":"","value":"alance"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6046:6:21"},"nodeType":"YulFunctionCall","src":"6046:36:21"},"nodeType":"YulExpressionStatement","src":"6046:36:21"},{"nodeType":"YulAssignment","src":"6091:27:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6103:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6114:3:21","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6099:3:21"},"nodeType":"YulFunctionCall","src":"6099:19:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6091:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5873:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5887:4:21","type":""}],"src":"5722:402:21"},{"body":{"nodeType":"YulBlock","src":"6303:181:21","statements":[{"expression":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6320:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6331:2:21","type":"","value":"32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6313:6:21"},"nodeType":"YulFunctionCall","src":"6313:21:21"},"nodeType":"YulExpressionStatement","src":"6313:21:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6354:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6365:2:21","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6350:3:21"},"nodeType":"YulFunctionCall","src":"6350:18:21"},{"kind":"number","nodeType":"YulLiteral","src":"6370:2:21","type":"","value":"31"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6343:6:21"},"nodeType":"YulFunctionCall","src":"6343:30:21"},"nodeType":"YulExpressionStatement","src":"6343:30:21"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6393:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6404:2:21","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6389:3:21"},"nodeType":"YulFunctionCall","src":"6389:18:21"},{"hexValue":"45524332303a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"6409:33:21","type":"","value":"ERC20: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6382:6:21"},"nodeType":"YulFunctionCall","src":"6382:61:21"},"nodeType":"YulExpressionStatement","src":"6382:61:21"},{"nodeType":"YulAssignment","src":"6452:26:21","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6464:9:21"},{"kind":"number","nodeType":"YulLiteral","src":"6475:2:21","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6460:3:21"},"nodeType":"YulFunctionCall","src":"6460:18:21"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6452:4:21"}]}]},"name":"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6280:9:21","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6294:4:21","type":""}],"src":"6129:355:21"}]},"contents":"{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_stringliteral_492e33be65190c9b19afa3bf75dd0134013152c2257b6d6637de9b6678a7501d__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"mint amount too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n}","id":21,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4310":[{"length":32,"start":326}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100d45760003560e01c806340c10f1911610081578063a457c2d71161005b578063a457c2d7146101c9578063a9059cbb146101dc578063dd62ed3e146101ef57600080fd5b806340c10f191461018357806370a082311461019857806395d89b41146101c157600080fd5b806323b872dd116100b257806323b872dd1461012c578063313ce5671461013f578063395093511461017057600080fd5b806306fdde03146100d9578063095ea7b3146100f757806318160ddd1461011a575b600080fd5b6100e1610228565b6040516100ee91906108b0565b60405180910390f35b61010a61010536600461091a565b6102ba565b60405190151581526020016100ee565b6002545b6040519081526020016100ee565b61010a61013a366004610944565b6102d4565b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020016100ee565b61010a61017e36600461091a565b6102f8565b61019661019136600461091a565b610337565b005b61011e6101a6366004610980565b6001600160a01b031660009081526020819052604090205490565b6100e16103a1565b61010a6101d736600461091a565b6103b0565b61010a6101ea36600461091a565b61045a565b61011e6101fd3660046109a2565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b606060038054610237906109d5565b80601f0160208091040260200160405190810160405280929190818152602001828054610263906109d5565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050905090565b6000336102c8818585610468565b60019150505b92915050565b6000336102e285828561058c565b6102ed85858561061e565b506001949350505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906102c89082908690610332908790610a0f565b610468565b670de0b6b3a764000081106103935760405162461bcd60e51b815260206004820152601460248201527f6d696e7420616d6f756e7420746f6f206869676800000000000000000000000060448201526064015b60405180910390fd5b61039d82826107f1565b5050565b606060048054610237906109d5565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091908381101561044d5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f000000000000000000000000000000000000000000000000000000606482015260840161038a565b6102ed8286868403610468565b6000336102c881858561061e565b6001600160a01b0383166104ca5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161038a565b6001600160a01b03821661052b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161038a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610618578181101561060b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161038a565b6106188484848403610468565b50505050565b6001600160a01b03831661069a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f6472657373000000000000000000000000000000000000000000000000000000606482015260840161038a565b6001600160a01b0382166106fc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161038a565b6001600160a01b0383166000908152602081905260409020548181101561078b5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e63650000000000000000000000000000000000000000000000000000606482015260840161038a565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610618565b6001600160a01b0382166108475760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161038a565b80600260008282546108599190610a0f565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600060208083528351808285015260005b818110156108dd578581018301518582016040015282016108c1565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b038116811461091557600080fd5b919050565b6000806040838503121561092d57600080fd5b610936836108fe565b946020939093013593505050565b60008060006060848603121561095957600080fd5b610962846108fe565b9250610970602085016108fe565b9150604084013590509250925092565b60006020828403121561099257600080fd5b61099b826108fe565b9392505050565b600080604083850312156109b557600080fd5b6109be836108fe565b91506109cc602084016108fe565b90509250929050565b600181811c908216806109e957607f821691505b602082108103610a0957634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102ce57634e487b7160e01b600052601160045260246000fdfea164736f6c6343000813000a","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xD4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x40C10F19 GT PUSH2 0x81 JUMPI DUP1 PUSH4 0xA457C2D7 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x183 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x198 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x1C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0xB2 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x170 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xD9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xF7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x11A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1 PUSH2 0x228 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xEE SWAP2 SWAP1 PUSH2 0x8B0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10A PUSH2 0x105 CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x2BA JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE JUMP JUMPDEST PUSH2 0x10A PUSH2 0x13A CALLDATASIZE PUSH1 0x4 PUSH2 0x944 JUMP JUMPDEST PUSH2 0x2D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF PUSH32 0x0 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xEE JUMP JUMPDEST PUSH2 0x10A PUSH2 0x17E CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x2F8 JUMP JUMPDEST PUSH2 0x196 PUSH2 0x191 CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x337 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x11E PUSH2 0x1A6 CALLDATASIZE PUSH1 0x4 PUSH2 0x980 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xE1 PUSH2 0x3A1 JUMP JUMPDEST PUSH2 0x10A PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x3B0 JUMP JUMPDEST PUSH2 0x10A PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0x91A JUMP JUMPDEST PUSH2 0x45A JUMP JUMPDEST PUSH2 0x11E PUSH2 0x1FD CALLDATASIZE PUSH1 0x4 PUSH2 0x9A2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x237 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x263 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2B0 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x285 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2B0 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x293 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2C8 DUP2 DUP6 DUP6 PUSH2 0x468 JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2E2 DUP6 DUP3 DUP6 PUSH2 0x58C JUMP JUMPDEST PUSH2 0x2ED DUP6 DUP6 DUP6 PUSH2 0x61E JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 0x2C8 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 0x332 SWAP1 DUP8 SWAP1 PUSH2 0xA0F JUMP JUMPDEST PUSH2 0x468 JUMP JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP2 LT PUSH2 0x393 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x6D696E7420616D6F756E7420746F6F2068696768000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x39D DUP3 DUP3 PUSH2 0x7F1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x237 SWAP1 PUSH2 0x9D5 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 0x44D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x207A65726F000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH2 0x2ED DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x468 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x2C8 DUP2 DUP6 DUP6 PUSH2 0x61E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x4CA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x52B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0x0 NOT DUP2 EQ PUSH2 0x618 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x60B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38A JUMP JUMPDEST PUSH2 0x618 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x468 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x69A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6472657373000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x6FC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x78B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x616C616E63650000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x38A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP8 DUP8 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 KECCAK256 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP3 MLOAD DUP6 DUP2 MSTORE SWAP1 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x618 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x38A JUMP JUMPDEST DUP1 PUSH1 0x2 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x859 SWAP2 SWAP1 PUSH2 0xA0F JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x8DD JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x8C1 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0x40 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x915 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x92D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x936 DUP4 PUSH2 0x8FE JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x959 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x962 DUP5 PUSH2 0x8FE JUMP JUMPDEST SWAP3 POP PUSH2 0x970 PUSH1 0x20 DUP6 ADD PUSH2 0x8FE JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x99B DUP3 PUSH2 0x8FE JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9BE DUP4 PUSH2 0x8FE JUMP JUMPDEST SWAP2 POP PUSH2 0x9CC PUSH1 0x20 DUP5 ADD PUSH2 0x8FE JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x9E9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xA09 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x2CE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG1 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP EXP ","sourceMap":"134:447:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98:1;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4431:197;;;;;;:::i;:::-;;:::i;:::-;;;1192:14:21;;1185:22;1167:41;;1155:2;1140:18;4431:197:1;1027:187:21;3242:106:1;3329:12;;3242:106;;;1365:25:21;;;1353:2;1338:18;3242:106:1;1219:177:21;5190:286:1;;;;;;:::i;:::-;;:::i;343:88:20:-;;;1906:4:21;417:7:20;1894:17:21;1876:36;;1864:2;1849:18;343:88:20;1734:184:21;5871:234:1;;;;;;:::i;:::-;;:::i;437:142:20:-;;;;;;:::i;:::-;;:::i;:::-;;3406:125:1;;;;;;:::i;:::-;-1:-1:-1;;;;;3506:18:1;3480:7;3506:18;;;;;;;;;;;;3406:125;2365:102;;;:::i;6592:427::-;;;;;;:::i;:::-;;:::i;3727:189::-;;;;;;:::i;:::-;;:::i;3974:149::-;;;;;;:::i;:::-;-1:-1:-1;;;;;4089:18:1;;;4063:7;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3974:149;2154:98;2208:13;2240:5;2233:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2154:98;:::o;4431:197::-;4514:4;719:10:7;4568:32:1;719:10:7;4584:7:1;4593:6;4568:8;:32::i;:::-;4617:4;4610:11;;;4431:197;;;;;:::o;5190:286::-;5317:4;719:10:7;5373:38:1;5389:4;719:10:7;5404:6:1;5373:15;:38::i;:::-;5421:27;5431:4;5437:2;5441:6;5421:9;:27::i;:::-;-1:-1:-1;5465:4:1;;5190:286;-1:-1:-1;;;;5190:286:1:o;5871:234::-;719:10:7;5959:4:1;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:1;;;;;;;;;;5959:4;;719:10:7;6013:64:1;;719:10:7;;4089:27:1;;6038:38;;6066:10;;6038:38;:::i;:::-;6013:8;:64::i;437:142:20:-;513:7;504:6;:16;496:49;;;;-1:-1:-1;;;496:49:20;;3193:2:21;496:49:20;;;3175:21:21;3232:2;3212:18;;;3205:30;3271:22;3251:18;;;3244:50;3311:18;;496:49:20;;;;;;;;;555:17;561:2;565:6;555:5;:17::i;:::-;437:142;;:::o;2365:102:1:-;2421:13;2453:7;2446:14;;;;;:::i;6592:427::-;719:10:7;6685:4:1;4089:18;;;:11;:18;;;;;;;;-1:-1:-1;;;;;4089:27:1;;;;;;;;;;6685:4;;719:10:7;6829:15:1;6809:16;:35;;6801:85;;;;-1:-1:-1;;;6801:85:1;;3542:2:21;6801:85:1;;;3524:21:21;3581:2;3561:18;;;3554:30;3620:34;3600:18;;;3593:62;3691:7;3671:18;;;3664:35;3716:19;;6801:85:1;3340:401:21;6801:85:1;6920:60;6929:5;6936:7;6964:15;6945:16;:34;6920:8;:60::i;3727:189::-;3806:4;719:10:7;3860:28:1;719:10:7;3877:2:1;3881:6;3860:9;:28::i;10504:370::-;-1:-1:-1;;;;;10635:19:1;;10627:68;;;;-1:-1:-1;;;10627:68:1;;3948:2:21;10627:68:1;;;3930:21:21;3987:2;3967:18;;;3960:30;4026:34;4006:18;;;3999:62;-1:-1:-1;;;4077:18:21;;;4070:34;4121:19;;10627:68:1;3746:400:21;10627:68:1;-1:-1:-1;;;;;10713:21:1;;10705:68;;;;-1:-1:-1;;;10705:68:1;;4353:2:21;10705:68:1;;;4335:21:21;4392:2;4372:18;;;4365:30;4431:34;4411:18;;;4404:62;-1:-1:-1;;;4482:18:21;;;4475:32;4524:19;;10705:68:1;4151:398:21;10705:68:1;-1:-1:-1;;;;;10784:18:1;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10835:32;;1365:25:21;;;10835:32:1;;1338:18:21;10835:32:1;;;;;;;10504:370;;;:::o;11155:441::-;-1:-1:-1;;;;;4089:18:1;;;11285:24;4089:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;11351:37:1;;11347:243;;11432:6;11412:16;:26;;11404:68;;;;-1:-1:-1;;;11404:68:1;;4756:2:21;11404:68:1;;;4738:21:21;4795:2;4775:18;;;4768:30;4834:31;4814:18;;;4807:59;4883:18;;11404:68:1;4554:353:21;11404:68:1;11514:51;11523:5;11530:7;11558:6;11539:16;:25;11514:8;:51::i;:::-;11275:321;11155:441;;;:::o;7473:818::-;-1:-1:-1;;;;;7599:18:1;;7591:68;;;;-1:-1:-1;;;7591:68:1;;5114:2:21;7591:68:1;;;5096:21:21;5153:2;5133:18;;;5126:30;5192:34;5172:18;;;5165:62;5263:7;5243:18;;;5236:35;5288:19;;7591:68:1;4912:401:21;7591:68:1;-1:-1:-1;;;;;7677:16:1;;7669:64;;;;-1:-1:-1;;;7669:64:1;;5520:2:21;7669:64:1;;;5502:21:21;5559:2;5539:18;;;5532:30;5598:34;5578:18;;;5571:62;-1:-1:-1;;;5649:18:21;;;5642:33;5692:19;;7669:64:1;5318:399:21;7669:64:1;-1:-1:-1;;;;;7815:15:1;;7793:19;7815:15;;;;;;;;;;;7848:21;;;;7840:72;;;;-1:-1:-1;;;7840:72:1;;5924:2:21;7840:72:1;;;5906:21:21;5963:2;5943:18;;;5936:30;6002:34;5982:18;;;5975:62;6073:8;6053:18;;;6046:36;6099:19;;7840:72:1;5722:402:21;7840:72:1;-1:-1:-1;;;;;7946:15:1;;;:9;:15;;;;;;;;;;;7964:20;;;7946:38;;8161:13;;;;;;;;;;:23;;;;;;8210:26;;1365:25:21;;;8161:13:1;;8210:26;;1338:18:21;8210:26:1;;;;;;;8247:37;12180:121;8567:535;-1:-1:-1;;;;;8650:21:1;;8642:65;;;;-1:-1:-1;;;8642:65:1;;6331:2:21;8642:65:1;;;6313:21:21;6370:2;6350:18;;;6343:30;6409:33;6389:18;;;6382:61;6460:18;;8642:65:1;6129:355:21;8642:65:1;8794:6;8778:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8946:18:1;;:9;:18;;;;;;;;;;;:28;;;;;;8999:37;1365:25:21;;;8999:37:1;;1338:18:21;8999:37:1;;;;;;;437:142:20;;:::o;14:548:21:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:196::-;635:20;;-1:-1:-1;;;;;684:54:21;;674:65;;664:93;;753:1;750;743:12;664:93;567:196;;;:::o;768:254::-;836:6;844;897:2;885:9;876:7;872:23;868:32;865:52;;;913:1;910;903:12;865:52;936:29;955:9;936:29;:::i;:::-;926:39;1012:2;997:18;;;;984:32;;-1:-1:-1;;;768:254:21:o;1401:328::-;1478:6;1486;1494;1547:2;1535:9;1526:7;1522:23;1518:32;1515:52;;;1563:1;1560;1553:12;1515:52;1586:29;1605:9;1586:29;:::i;:::-;1576:39;;1634:38;1668:2;1657:9;1653:18;1634:38;:::i;:::-;1624:48;;1719:2;1708:9;1704:18;1691:32;1681:42;;1401:328;;;;;:::o;1923:186::-;1982:6;2035:2;2023:9;2014:7;2010:23;2006:32;2003:52;;;2051:1;2048;2041:12;2003:52;2074:29;2093:9;2074:29;:::i;:::-;2064:39;1923:186;-1:-1:-1;;;1923:186:21:o;2114:260::-;2182:6;2190;2243:2;2231:9;2222:7;2218:23;2214:32;2211:52;;;2259:1;2256;2249:12;2211:52;2282:29;2301:9;2282:29;:::i;:::-;2272:39;;2330:38;2364:2;2353:9;2349:18;2330:38;:::i;:::-;2320:48;;2114:260;;;;;:::o;2379:380::-;2458:1;2454:12;;;;2501;;;2522:61;;2576:4;2568:6;2564:17;2554:27;;2522:61;2629:2;2621:6;2618:14;2598:18;2595:38;2592:161;;2675:10;2670:3;2666:20;2663:1;2656:31;2710:4;2707:1;2700:15;2738:4;2735:1;2728:15;2592:161;;2379:380;;;:::o;2764:222::-;2829:9;;;2850:10;;;2847:133;;;2902:10;2897:3;2893:20;2890:1;2883:31;2937:4;2934:1;2927:15;2965:4;2962:1;2955:15"},"gasEstimates":{"creation":{"codeDepositCost":"524200","executionCost":"infinite","totalCost":"infinite"},"external":{"allowance(address,address)":"infinite","approve(address,uint256)":"24651","balanceOf(address)":"2585","decimals()":"infinite","decreaseAllowance(address,uint256)":"26922","increaseAllowance(address,uint256)":"infinite","mint(address,uint256)":"50851","name()":"infinite","symbol()":"infinite","totalSupply()":"2349","transfer(address,uint256)":"51094","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","decimals()":"313ce567","decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351","mint(address,uint256)":"40c10f19","name()":"06fdde03","symbol()":"95d89b41","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/TestToken.sol\":\"TestToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/test/TestToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.19;\\n\\nimport { ERC20 } from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract TestToken is ERC20 {\\n    uint8 private immutable decimal;\\n\\n    constructor(uint8 _decimals, string memory _name, string memory _symbol) ERC20(_name, _symbol) {\\n        decimal = _decimals;\\n    }\\n\\n    function decimals() public view override returns (uint8) {\\n        return decimal;\\n    }\\n\\n    function mint(address to, uint256 amount) public {\\n        require(amount < 1 ether, \\\"mint amount too high\\\");\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x437069d61c9bbf32368d5fbedd7992d490846bc277157c17d809a08988450e82\",\"license\":\"GPL-3.0\"}},\"version\":1}","storageLayout":{"storage":[{"astId":128,"contract":"contracts/test/TestToken.sol:TestToken","label":"_balances","offset":0,"slot":"0","type":"t_mapping(t_address,t_uint256)"},{"astId":134,"contract":"contracts/test/TestToken.sol:TestToken","label":"_allowances","offset":0,"slot":"1","type":"t_mapping(t_address,t_mapping(t_address,t_uint256))"},{"astId":136,"contract":"contracts/test/TestToken.sol:TestToken","label":"_totalSupply","offset":0,"slot":"2","type":"t_uint256"},{"astId":138,"contract":"contracts/test/TestToken.sol:TestToken","label":"_name","offset":0,"slot":"3","type":"t_string_storage"},{"astId":140,"contract":"contracts/test/TestToken.sol:TestToken","label":"_symbol","offset":0,"slot":"4","type":"t_string_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_mapping(t_address,t_mapping(t_address,t_uint256))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => uint256))","numberOfBytes":"32","value":"t_mapping(t_address,t_uint256)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}